const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":349,\"nextId\":349,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"3\",\"3\":\"3@0\",\"4\":\"4\",\"5\":\"4@0\",\"6\":\"4@1\",\"7\":\"5\",\"8\":\"5@0\",\"9\":\"5@1\",\"10\":\"6\",\"11\":\"6@0\",\"12\":\"6@1\",\"13\":\"7\",\"14\":\"7#markdown-介绍\",\"15\":\"7#markdown-配置\",\"16\":\"7#markdown-扩展\",\"17\":\"7#vuepress-扩展\",\"18\":\"7#主题扩展\",\"19\":\"7#提示容器\",\"20\":\"7#代码块\",\"21\":\"7#上下角标\",\"22\":\"7#自定义对齐\",\"23\":\"7#attrs\",\"24\":\"7#脚注\",\"25\":\"7#标记\",\"26\":\"7#任务列表\",\"27\":\"7#图片增强\",\"28\":\"7#组件\",\"29\":\"7@0\",\"30\":\"7@1\",\"31\":\"8\",\"32\":\"8#页面标题\",\"33\":\"8#页面信息\",\"34\":\"8#页面内容\",\"35\":\"8#组件\",\"36\":\"8@0\",\"37\":\"8@1\",\"38\":\"9\",\"39\":\"9@0\",\"40\":\"10\",\"41\":\"10#图标\",\"42\":\"10#图标库\",\"43\":\"10#设计\",\"44\":\"10#封面\",\"45\":\"10@0\",\"46\":\"11\",\"47\":\"11@0\",\"48\":\"12\",\"49\":\"12@0\",\"50\":\"12@1\",\"51\":\"13\",\"52\":\"13#_2-gin介绍\",\"53\":\"13#_3-快速入门\",\"54\":\"13@0\",\"55\":\"13@1\",\"56\":\"14\",\"57\":\"14#_1-restful-api规范\",\"58\":\"14#_2-请求方法\",\"59\":\"14#_3-uri\",\"60\":\"14#_4-处理函数\",\"61\":\"14#_5-分组路由\",\"62\":\"14@0\",\"63\":\"14@1\",\"64\":\"15\",\"65\":\"15#_1-get请求参数\",\"66\":\"15#_1-1-普通参数\",\"67\":\"15#_1-2-数组参数\",\"68\":\"15#_1-3-map参数\",\"69\":\"15#_2-post请求参数\",\"70\":\"15#_2-1-表单参数\",\"71\":\"15#_2-2-json参数\",\"72\":\"15#_3-路径参数\",\"73\":\"15#_4-文件参数\",\"74\":\"15@0\",\"75\":\"15@1\",\"76\":\"16\",\"77\":\"16#_1-字符串方式\",\"78\":\"16#_2-json方式\",\"79\":\"16#_3-xml方式\",\"80\":\"16#_4-文件格式\",\"81\":\"16#_5-设置http响应头\",\"82\":\"16#_6-重定向\",\"83\":\"16#_7-yaml方式\",\"84\":\"16@0\",\"85\":\"16@1\",\"86\":\"17\",\"87\":\"17#_1-基本使用\",\"88\":\"17#_2-多个模板渲染\",\"89\":\"17#_3-自定义模板函数\",\"90\":\"17#_4-静态文件处理\",\"91\":\"17@0\",\"92\":\"17@1\",\"93\":\"18\",\"94\":\"18#_1-cookie\",\"95\":\"18#_1-1-设置cookie\",\"96\":\"18#_1-2-读取cookie\",\"97\":\"18#_1-3-删除cookie\",\"98\":\"18#_2-session\",\"99\":\"18#_2-1-多session\",\"100\":\"18#_2-2-基于redis存储引擎的session\",\"101\":\"18@0\",\"102\":\"18@1\",\"103\":\"19\",\"104\":\"19#_1-中间件使用\",\"105\":\"19#_2-自定义中间件\",\"106\":\"19@0\",\"107\":\"19@1\",\"108\":\"20\",\"109\":\"20@0\",\"110\":\"21\",\"111\":\"21#_1-入门\",\"112\":\"21@0\",\"113\":\"21@1\",\"114\":\"22\",\"115\":\"22#_1-模型定义\",\"116\":\"22#_2-模型标签\",\"117\":\"22#_3-表名映射\",\"118\":\"22#_4-model\",\"119\":\"22#_5-数据库连接\",\"120\":\"22#_5-1-dsn\",\"121\":\"22#_5-2-连接数据库\",\"122\":\"22#_5-3-调试模式\",\"123\":\"22#_5-4-连接池配置\",\"124\":\"22@0\",\"125\":\"22@1\",\"126\":\"23\",\"127\":\"23#_1-插入数据\",\"128\":\"23#_1-1-用指定的字段创建\",\"129\":\"23#_1-2-忽略字段\",\"130\":\"23#_1-3-批量插入\",\"131\":\"23#_1-4-使用map创建\",\"132\":\"23#_1-5-sql表达式\",\"133\":\"23#_1-6-使用原生sql语句\",\"134\":\"23#_2-更新数据\",\"135\":\"23#_2-1-保存数据\",\"136\":\"23#_2-2-更新单个列\",\"137\":\"23#_2-3-更新多列\",\"138\":\"23#_2-4-更新选定的字段\",\"139\":\"23#_2-5-表达式\",\"140\":\"23#_2-6-子查询更新\",\"141\":\"23#_3-删除数据\",\"142\":\"23#_4-查询数据\",\"143\":\"23#_4-1-查询函数\",\"144\":\"23#_4-2-where\",\"145\":\"23#_4-3-select\",\"146\":\"23#_4-4-order\",\"147\":\"23#_4-5-分页\",\"148\":\"23#_4-6-count\",\"149\":\"23#_4-7-分组\",\"150\":\"23#_4-8-直接执行sql语句\",\"151\":\"23@0\",\"152\":\"23@1\",\"153\":\"24\",\"154\":\"24#_1-会话session\",\"155\":\"24#_2-事务\",\"156\":\"24#_2-1-自动事务\",\"157\":\"24#_2-2-嵌套事务\",\"158\":\"24#_2-3-手动事务\",\"159\":\"24#_2-4-保存点\",\"160\":\"24#_3-hook\",\"161\":\"24#_3-1-创建\",\"162\":\"24#_3-2-更新\",\"163\":\"24#_3-3-删除\",\"164\":\"24#_3-4-查询\",\"165\":\"24@0\",\"166\":\"24@1\",\"167\":\"25\",\"168\":\"25#_1-scope\",\"169\":\"25#_2-智能选择字段\",\"170\":\"25#_3-子查询\",\"171\":\"25#_4-关联操作\",\"172\":\"25#_4-1-查询\",\"173\":\"25@0\",\"174\":\"25@1\",\"175\":\"26\",\"176\":\"26@0\",\"177\":\"27\",\"178\":\"27@0\",\"179\":\"28\",\"180\":\"28#_1-context类型\",\"181\":\"28#_1-1-空-context\",\"182\":\"28#_1-2-cancelfunc-类型原型\",\"183\":\"28#_1-3-context-类型原型\",\"184\":\"28#_1-4-background-方法原型\",\"185\":\"28#_1-5-todo-方法原型\",\"186\":\"28#_1-6-withvalue-方法原型\",\"187\":\"28#_2-context函数\",\"188\":\"28#_2-1-withcancel-函数原型\",\"189\":\"28#_2-2-withdeadline-函数原型\",\"190\":\"28#_2-3-withtimeout-函数原型\",\"191\":\"28@0\",\"192\":\"28@1\",\"193\":\"29\",\"194\":\"29#_1-错误变量\",\"195\":\"29#_2-基础接口\",\"196\":\"29#_2-1-reader接口\",\"197\":\"29#_2-2-writer接口\",\"198\":\"29#_2-3-seeker接口\",\"199\":\"29#_2-4-closer接口\",\"200\":\"29#_3-组合接口\",\"201\":\"29#_3-1-readwriter接口\",\"202\":\"29#_3-2-readcloser接口\",\"203\":\"29#_3-3-writecloser接口\",\"204\":\"29#_3-4-readwritecloser接口\",\"205\":\"29#_3-5-readseeker接口\",\"206\":\"29#_3-6-writeseeker接口\",\"207\":\"29#_3-7-readwriteseeker接口\",\"208\":\"29#_4-指定读写器读写接口\",\"209\":\"29#_4-1-readerfrom接口\",\"210\":\"29#_4-2-writerto接口\",\"211\":\"29#_5-指定偏移量读写接口\",\"212\":\"29#_5-1-readerat接口\",\"213\":\"29#_5-2-writerat接口\",\"214\":\"29#_6-单个字节读写接口\",\"215\":\"29#_6-1-bytereader接口\",\"216\":\"29#_6-2-bytescanner接口\",\"217\":\"29#_6-3-bytewriter接口\",\"218\":\"29#_6-4-runereader接口\",\"219\":\"29#_6-5-runescanner接口\",\"220\":\"29#_6-6-stringwriter接口\",\"221\":\"29#_7-结构体\",\"222\":\"29#_7-1-limitedreader\",\"223\":\"29#_7-2-pipereader\",\"224\":\"29#_7-3-pipewriter\",\"225\":\"29#_7-4-sectionreader\",\"226\":\"29#_8-供外部调用的函数\",\"227\":\"29#_8-1-copy\",\"228\":\"29#_8-2-copybuffer\",\"229\":\"29#_8-3-copyn\",\"230\":\"29#_8-4-limitreader\",\"231\":\"29#_8-5-multireader\",\"232\":\"29#_8-6-multiwriter\",\"233\":\"29#_8-7-pipe\",\"234\":\"29#_8-8-readall\",\"235\":\"29#_8-9-readatleast\",\"236\":\"29#_8-10-readfull\",\"237\":\"29#_8-11-sectionreader\",\"238\":\"29#_8-11-1-newsectionreader\",\"239\":\"29#_8-11-2-sectionreader-read\",\"240\":\"29#_8-11-3-sectionreader-readat\",\"241\":\"29#_8-11-4-sectionreader-seek\",\"242\":\"29#_8-11-5-sectionreader-size\",\"243\":\"29#_8-12-teereader\",\"244\":\"29#_8-13-writestring\",\"245\":\"29@0\",\"246\":\"29@1\",\"247\":\"30\",\"248\":\"30#_1-环境变量\",\"249\":\"30#_2-runtime-gosched\",\"250\":\"30#_3-runtime-goexit\",\"251\":\"30#_4-runtime-gomaxprocs\",\"252\":\"30#_5-runtime-numcpu\",\"253\":\"30#_6-runtime-goos\",\"254\":\"30@0\",\"255\":\"30@1\",\"256\":\"31\",\"257\":\"32\",\"258\":\"32#概述\",\"259\":\"32#术语\",\"260\":\"32#dbms的主要功能\",\"261\":\"32#使用数据库进行信息化管理有哪些好处\",\"262\":\"32#数据模型的三个基本要素是\",\"263\":\"32#数据库系统的三级模式结构\",\"264\":\"32#什么是二级映像\",\"265\":\"32#物理独立性和逻辑独立性\",\"266\":\"32#dba的主要职责\",\"267\":\"32#关系数据库\",\"268\":\"32#实体完整性与参照完整性的规则\",\"269\":\"32#自然连接和等值连接的异同\",\"270\":\"32#完整性约束的作用\",\"271\":\"32#sql\",\"272\":\"32#sql的基本特点\",\"273\":\"32#sql的基本功能\",\"274\":\"32#sql定义语言dd-define-l包括\",\"275\":\"32#什么是存储过程\",\"276\":\"32#基本表-视图的区别和联系。\",\"277\":\"32#视图的优点\",\"278\":\"32#嵌入式sql\",\"279\":\"32#相关子查询和不相关子查询\",\"280\":\"32#游标\",\"281\":\"32#完整性和安全性\",\"282\":\"32#什么是数据库的完整性-安全性\",\"283\":\"32#维护数据库完整性dbms应该提供哪些支持\",\"284\":\"32#实体完整性的定义和违约处理\",\"285\":\"32#参照完整性的定义和违约处理\",\"286\":\"32#用户自定义的完整性\",\"287\":\"32#触发器的作用-什么时候用触发器-创建触发器的步骤\",\"288\":\"32#实现数据库安全性控制的常用方法和技术\",\"289\":\"32#自主存取控制和强制存取控制\",\"290\":\"32#强制存取规则\",\"291\":\"32#审计\",\"292\":\"32#关系数据库的设计理论\",\"293\":\"32#为什么范式会出现\",\"294\":\"32#解释范式\",\"295\":\"32#数据库设计\",\"296\":\"32#数据库设计的基本步骤\",\"297\":\"32#什么是数据库设计\",\"298\":\"32#数据字典的内容及其作用\",\"299\":\"32#设计概念系统结构\",\"300\":\"32#逻辑设计阶段主要内容和步骤\",\"301\":\"32#e-r模式合并时发生的三种冲突\",\"302\":\"32#物理设计的内容和步骤\",\"303\":\"32#数据库的运行与维护-从以下几个角度考虑\",\"304\":\"32#再组织和重构造\",\"305\":\"32#事务和并发控制\",\"306\":\"32#为什么要并发\",\"307\":\"32#事务的定义\",\"308\":\"32#事务的四大特性\",\"309\":\"32#事务并发执行可能导致哪几类数据不一致-怎么解决\",\"310\":\"32#封锁的定义\",\"311\":\"32#封锁的类型\",\"312\":\"32#锁的类型\",\"313\":\"32#死锁的检测和预防\",\"314\":\"32#事务的可串行化\",\"315\":\"32#描述两段锁结构\",\"316\":\"32#数据库恢复技术\",\"317\":\"32#故障的种类\",\"318\":\"32#恢复策略\",\"319\":\"32#故障的种类和恢复方法\",\"320\":\"32#什么是记录检查点-包含哪些内容\",\"321\":\"32#数据库转储\",\"322\":\"32#为什么要先登记日志文件-后写数据库\",\"323\":\"32#使用日志的数据库恢复技术\",\"324\":\"32#什么是数据库镜像-有什么作用\",\"325\":\"32#为什么引入意向锁-含义是什么\",\"326\":\"32#is-ix-six锁\",\"327\":\"32#补充\",\"328\":\"32#数据库的锁机制\",\"329\":\"32#什么是事务-恢复技术能保证事务的那些特性\",\"330\":\"32#什么是索引-优缺点\",\"331\":\"32#什么是er图-er图向关系模型的转换规则是什么-er图的设计原则是什么\",\"332\":\"32#并发控制的主要技术\",\"333\":\"32#delete和drop的区别\",\"334\":\"32#orm映射\",\"335\":\"32@0\",\"336\":\"32@1\",\"337\":\"33\",\"338\":\"33#端口占用\",\"339\":\"33@0\",\"340\":\"33@1\",\"341\":\"34\",\"342\":\"35\",\"343\":\"35#uniapp\",\"344\":\"35#gorm\",\"345\":\"35#go-发送邮件模板\",\"346\":\"35@0\",\"347\":\"35@1\",\"348\":\"36\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1],\"3\":[null,null,1],\"4\":[1,18],\"5\":[null,null,1],\"6\":[null,null,1],\"7\":[1,7],\"8\":[null,null,1],\"9\":[null,null,1],\"10\":[1,20],\"11\":[null,null,1],\"12\":[null,null,1],\"13\":[2,11],\"14\":[2,8],\"15\":[2,13],\"16\":[2,11],\"17\":[2,10],\"18\":[1,10],\"19\":[1,19],\"20\":[1,1],\"21\":[1,3],\"22\":[1,3],\"23\":[1,5],\"24\":[1,3],\"25\":[1,3],\"26\":[1,6],\"27\":[1,2],\"28\":[1],\"29\":[null,null,1],\"30\":[null,null,1],\"31\":[1,3],\"32\":[1,19],\"33\":[1,20],\"34\":[1,12],\"35\":[1,13],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[1],\"39\":[null,null,1],\"40\":[1],\"41\":[1],\"42\":[1,1],\"43\":[1],\"44\":[1,6],\"45\":[null,null,1],\"46\":[1],\"47\":[null,null,1],\"48\":[1],\"49\":[null,null,1],\"50\":[null,null,2],\"51\":[1,4],\"52\":[2,62],\"53\":[2,65],\"54\":[null,null,1],\"55\":[null,null,2],\"56\":[1,47],\"57\":[3,15],\"58\":[2,29],\"59\":[2,24],\"60\":[2,9],\"61\":[2,29],\"62\":[null,null,1],\"63\":[null,null,2],\"64\":[1],\"65\":[2,11],\"66\":[2,65],\"67\":[3,28],\"68\":[3,24],\"69\":[2,1],\"70\":[3,30],\"71\":[2,29],\"72\":[2,18],\"73\":[2,29],\"74\":[null,null,1],\"75\":[null,null,2],\"76\":[1],\"77\":[2,19],\"78\":[2,15],\"79\":[2,27],\"80\":[2,14],\"81\":[2,12],\"82\":[2,15],\"83\":[2,16],\"84\":[null,null,1],\"85\":[null,null,2],\"86\":[1,3],\"87\":[2,58],\"88\":[2,17],\"89\":[2,58],\"90\":[2,41],\"91\":[null,null,1],\"92\":[null,null,2],\"93\":[1,1],\"94\":[2,12],\"95\":[2,47],\"96\":[3,23],\"97\":[3,24],\"98\":[2,60],\"99\":[3,42],\"100\":[2,70],\"101\":[null,null,1],\"102\":[null,null,2],\"103\":[1,19],\"104\":[2,24],\"105\":[2,64],\"106\":[null,null,1],\"107\":[null,null,2],\"108\":[1],\"109\":[null,null,1],\"110\":[1,9],\"111\":[2,176],\"112\":[null,null,1],\"113\":[null,null,2],\"114\":[1,12],\"115\":[2,76],\"116\":[2,33],\"117\":[2,36],\"118\":[2,84],\"119\":[2,14],\"120\":[3,67],\"121\":[3,81],\"122\":[3,3],\"123\":[3,14],\"124\":[null,null,1],\"125\":[null,null,2],\"126\":[1],\"127\":[2,22],\"128\":[3,7],\"129\":[3,6],\"130\":[4,27],\"131\":[4,21],\"132\":[4,17],\"133\":[4,14],\"134\":[2,70],\"135\":[3,32],\"136\":[2,13],\"137\":[3,17],\"138\":[3,34],\"139\":[3,13],\"140\":[3,16],\"141\":[2,28],\"142\":[2],\"143\":[3,33],\"144\":[3,28],\"145\":[3,20],\"146\":[2,10],\"147\":[3,14],\"148\":[3,13],\"149\":[3,38],\"150\":[3,33],\"151\":[null,null,1],\"152\":[null,null,2],\"153\":[1],\"154\":[2,119],\"155\":[2],\"156\":[3,27],\"157\":[2,24],\"158\":[3,65],\"159\":[3,19],\"160\":[2,17],\"161\":[3,51],\"162\":[3,42],\"163\":[2,33],\"164\":[3,25],\"165\":[null,null,1],\"166\":[null,null,2],\"167\":[1],\"168\":[2,40],\"169\":[2,26],\"170\":[2,29],\"171\":[2,103],\"172\":[3,31],\"173\":[null,null,1],\"174\":[null,null,2],\"175\":[1],\"176\":[null,null,1],\"177\":[1],\"178\":[null,null,1],\"179\":[1,26],\"180\":[2],\"181\":[3,44],\"182\":[4,9],\"183\":[4,65],\"184\":[4,17],\"185\":[4,14],\"186\":[4,52],\"187\":[2],\"188\":[4,72],\"189\":[3,95],\"190\":[4,51],\"191\":[null,null,1],\"192\":[null,null,2],\"193\":[2,9],\"194\":[2,44],\"195\":[2],\"196\":[3,93],\"197\":[2,49],\"198\":[3,56],\"199\":[3,18],\"200\":[2,3],\"201\":[3,7],\"202\":[3,10],\"203\":[2,7],\"204\":[3,8],\"205\":[3,7],\"206\":[3,7],\"207\":[3,7],\"208\":[2],\"209\":[3,21],\"210\":[3,17],\"211\":[2],\"212\":[3,49],\"213\":[3,25],\"214\":[2],\"215\":[3,11],\"216\":[3,11],\"217\":[3,9],\"218\":[3,16],\"219\":[3,12],\"220\":[2,11],\"221\":[2],\"222\":[3,21],\"223\":[3,31],\"224\":[3,34],\"225\":[3,40],\"226\":[2],\"227\":[3,56],\"228\":[3,57],\"229\":[3,45],\"230\":[3,35],\"231\":[3,39],\"232\":[3,46],\"233\":[3,48],\"234\":[2,43],\"235\":[3,60],\"236\":[3,53],\"237\":[3,33],\"238\":[4,37],\"239\":[5,38],\"240\":[5,42],\"241\":[5,47],\"242\":[5,28],\"243\":[3,41],\"244\":[3,31],\"245\":[null,null,1],\"246\":[null,null,2],\"247\":[1,5],\"248\":[2,133],\"249\":[3,25],\"250\":[3,26],\"251\":[3,50],\"252\":[3,13],\"253\":[3,11],\"254\":[null,null,1],\"255\":[null,null,2],\"256\":[1],\"257\":[1],\"258\":[1],\"259\":[1,33],\"260\":[1,6],\"261\":[2,7],\"262\":[1,13],\"263\":[1,12],\"264\":[1,5],\"265\":[1,10],\"266\":[1,5],\"267\":[1,22],\"268\":[1,6],\"269\":[1,5],\"270\":[1,2],\"271\":[1],\"272\":[1,7],\"273\":[1,6],\"274\":[3,8],\"275\":[1,9],\"276\":[3,8],\"277\":[1,5],\"278\":[1,8],\"279\":[1,5],\"280\":[1,24],\"281\":[1],\"282\":[3,7],\"283\":[2,3],\"284\":[1,9],\"285\":[1,9],\"286\":[1,4],\"287\":[4,17],\"288\":[2,11],\"289\":[1,6],\"290\":[1,3],\"291\":[1,3],\"292\":[1],\"293\":[1,7],\"294\":[1,22],\"295\":[1],\"296\":[1,16],\"297\":[1,6],\"298\":[1,6],\"299\":[1,18],\"300\":[1,4],\"301\":[2,5],\"302\":[1,2],\"303\":[2,7],\"304\":[1,5],\"305\":[1],\"306\":[1,5],\"307\":[1,6],\"308\":[1,13],\"309\":[3,15],\"310\":[1,3],\"311\":[1,5],\"312\":[1,9],\"313\":[1,8],\"314\":[1,4],\"315\":[1,10],\"316\":[1],\"317\":[1,4],\"318\":[1,10],\"319\":[1,19],\"320\":[3,3],\"321\":[1,13],\"322\":[3,8],\"323\":[1,9],\"324\":[3,4],\"325\":[3,6],\"326\":[3,6],\"327\":[1],\"328\":[1,6],\"329\":[2,3],\"330\":[3,10],\"331\":[4,13],\"332\":[1,6],\"333\":[1,14],\"334\":[1,4],\"335\":[null,null,1],\"336\":[null,null,1],\"337\":[2],\"338\":[1,21],\"339\":[null,null,1],\"340\":[null,null,1],\"341\":[1],\"342\":[1],\"343\":[1,5],\"344\":[1,36],\"345\":[2,164],\"346\":[null,null,1],\"347\":[null,null,1],\"348\":[1,3]},\"averageFieldLength\":[1.947627894996547,22.03826534536931,1.0425122065532184],\"storedFields\":{\"0\":{\"h\":\"Golang\"},\"1\":{\"c\":[\"golang\"]},\"2\":{\"h\":\"写作指南\"},\"3\":{\"c\":[\"使用指南\"]},\"4\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"c\":[\"禁用\"]},\"7\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"8\":{\"c\":[\"使用指南\"]},\"9\":{\"c\":[\"加密\"]},\"10\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"11\":{\"c\":[\"指南\"]},\"12\":{\"c\":[\"布局\"]},\"13\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"14\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"15\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"16\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"17\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"18\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"19\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"20\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"21\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"22\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"23\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"24\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"25\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"26\":{\"h\":\"任务列表\",\"t\":[\"[x] 计划 1\",\"[ ] 计划 2\",\"查看详情\"]},\"27\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"28\":{\"h\":\"组件\"},\"29\":{\"c\":[\"使用指南\"]},\"30\":{\"c\":[\"Markdown\"]},\"31\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"32\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 --- \"]},\"33\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"34\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"35\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"36\":{\"c\":[\"使用指南\"]},\"37\":{\"c\":[\"页面配置\",\"使用指南\"]},\"38\":{\"h\":\"杂记\"},\"39\":{\"c\":[\"使用指南\"]},\"40\":{\"h\":\"资源链接\"},\"41\":{\"h\":\"图标\"},\"42\":{\"h\":\"图标库\",\"t\":[\"fontawesome\"]},\"43\":{\"h\":\"设计\"},\"44\":{\"h\":\"封面\",\"t\":[\"coverview\",\"简单设计\",\".9.png制作\",\"git badget\"]},\"45\":{\"c\":[\"resource\"]},\"46\":{\"h\":\"设计模式\"},\"47\":{\"c\":[\"设计模式\"]},\"48\":{\"h\":\"创建型模式\"},\"49\":{\"c\":[\"golang\"]},\"50\":{\"c\":[\"设计模式\",\"golang\"]},\"51\":{\"h\":\"认识gin\",\"t\":[\"go的框架其实是可以理解为库，并不是用了某一个框架就不能用别的框架，可以选择性的使用各个库中的优秀组件，进行组合\"]},\"52\":{\"h\":\"2. gin介绍\",\"t\":[\"特性：\",\"快速\",\"基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。\",\"支持中间件\",\"传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。\",\"Crash 处理\",\"Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！\",\"JSON 验证\",\"Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。\",\"路由组\",\"更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。\",\"错误管理\",\"Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。\",\"内置渲染\",\"Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。\",\"可扩展性\",\"新建一个中间件非常简单。\"]},\"53\":{\"h\":\"3. 快速入门\",\"t\":[\"go版本需求：go1.13及以上\",\"环境：windows 11\",\"D:\\\\go\\\\project>mkdir ginlearn D:\\\\go\\\\project>cd ginlearn D:\\\\go\\\\project\\\\ginlearn>go work init D:\\\\go\\\\project\\\\ginlearn>mkdir helloworld D:\\\\go\\\\project\\\\ginlearn>cd helloworld D:\\\\go\\\\project\\\\ginlearn\\\\helloworld>go mod init test.com/helloworld go: creating new go.mod: module test.com/helloworld D:\\\\go\\\\project\\\\ginlearn\\\\helloworld>cd .. D:\\\\go\\\\project\\\\ginlearn>go work use ./helloworld \",\"使用goland（vscode）打开\",\"PS D:\\\\go\\\\project\\\\ginlearn> cd .\\\\helloworld\\\\ #下载并安装gin PS D:\\\\go\\\\project\\\\ginlearn\\\\helloworld> go get -u github.com/gin-gonic/gin \",\"示例程序：\",\"package main import \\\"github.com/gin-gonic/gin\\\" func main() { r := gin.Default() r.GET(\\\"/ping\\\", func(c *gin.Context) { c.JSON(200, gin.H{ \\\"message\\\": \\\"pong\\\", }) }) r.Run() // 监听并在 0.0.0.0:8080 上启动服务 } \",\"运行后，postman进行测试\",\"简单的代码就实现了一个http的服务\"]},\"54\":{\"c\":[\"golang\"]},\"55\":{\"c\":[\"gin\",\"golang\"]},\"56\":{\"h\":\"路由\",\"t\":[\"路由是URI到函数的映射。\",\"一个URI含: http://localhost:8080/user/find?id=11\",\"协议，比如http，https等\",\"ip端口或者域名，比如127.0.0.1:8080或者www.test.com\",\"path，比如 /path\",\"query，比如 ?query\",\"同时访问的时候，还需要指明HTTP METHOD，比如\",\"GET\",\"GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.\",\"POST\",\"POST方法用于将实体提交到指定的资源，通常会导致在服务器上的状态变化\",\"HEAD\",\"HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.\",\"PUT\",\"PUT方法用请求有效载荷替换目标资源的所有当前表示\",\"DELETE\",\"DELETE方法删除指定的资源\",\"CONNECT\",\"CONNECT方法建立一个到由目标资源标识的服务器的隧道。\",\"OPTIONS\",\"OPTIONS方法用于描述目标资源的通信选项。\",\"TRACE\",\"TRACE方法沿着到目标资源的路径执行一个消息环回测试。\",\"PATCH\",\"PATCH方法用于对资源应用部分修改。\",\"使用的时候，应该尽量遵循其语义\"]},\"57\":{\"h\":\"1. RESTful API规范\",\"t\":[\"RESTful API 的规范建议我们使用特定的HTTP方法来对服务器上的资源进行操作。\",\"比如：\",\"GET，表示读取服务器上的资源\",\"POST，表示在服务器上创建资源\",\"PUT,表示更新或者替换服务器上的资源\",\"DELETE，表示删除服务器上的资源\",\"PATCH，表示更新/修改资源的一部分\"]},\"58\":{\"h\":\"2. 请求方法\",\"t\":[\"比如\",\" r.GET(\\\"/get\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"get\\\") }) r.POST(\\\"/post\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"post\\\") }) r.DELETE(\\\"/delete\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"delete\\\") }) r.PUT(\\\"/put\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"put\\\") }) \",\"如果想要支持所有：\",\"r.Any(\\\"/any\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"any\\\") }) \",\"如果想要支持其中的几种：\",\" r.GET(\\\"/hello\\\", func(ctx *gin.Context) { //数组 map list 结构体 ctx.JSON(200, gin.H{ \\\"name\\\": \\\"hello world\\\", }) }) r.POST(\\\"/hello\\\", func(ctx *gin.Context) { //数组 map list 结构体 ctx.JSON(200, gin.H{ \\\"name\\\": \\\"hello world\\\", }) }) \"]},\"59\":{\"h\":\"3. URI\",\"t\":[\"URI书写的时候，我们不需要关心scheme和authority这两部分，我们主要通过path和query两部分的书写来进行资源的定位。\",\"静态url，比如/hello，/user/find\",\"r.POST(\\\"/user/find\\\", func(ctx *gin.Context) { }) \",\"路径参数，比如/user/find/:id\",\"r.POST(\\\"/user/find/:id\\\", func(ctx *gin.Context) { param := ctx.Param(\\\"id\\\") ctx.JSON(200, param) }) \",\"模糊匹配，比如/user/*path\",\"r.POST(\\\"/user/*path\\\", func(ctx *gin.Context) { param := ctx.Param(\\\"path\\\") ctx.JSON(200, param) }) \"]},\"60\":{\"h\":\"4. 处理函数\",\"t\":[\"定义：\",\"type HandlerFunc func(*Context) \",\"通过上下文的参数，获取http的请求参数，响应http请求等。\"]},\"61\":{\"h\":\"5. 分组路由\",\"t\":[\"在进行开发的时候，我们往往要进行模块的划分，比如用户模块，以user开发，商品模块，以goods开头。\",\"或者进行多版本开发，不同版本之间路径是一致的，这种时候，就可以用到分组路由了。\",\"比如\",\" ug := r.Group(\\\"/user\\\") { ug.GET(\\\"find\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"user find\\\") }) ug.POST(\\\"save\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"user save\\\") }) } gg := r.Group(\\\"/goods\\\") { gg.GET(\\\"find\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"goods find\\\") }) gg.POST(\\\"save\\\", func(ctx *gin.Context) { ctx.JSON(200, \\\"goods save\\\") }) } \"]},\"62\":{\"c\":[\"golang\"]},\"63\":{\"c\":[\"gin\",\"golang\"]},\"64\":{\"h\":\"请求参数\"},\"65\":{\"h\":\"1. Get请求参数\",\"t\":[\"使用Get请求传参时，类似于这样 http://localhost:8080/user/save?id=11&name=zhangsan。\",\"如何获取呢？\"]},\"66\":{\"h\":\"1.1 普通参数\",\"t\":[\"request url: http://localhost:8080/user/save?id=11&name=zhangsan\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { id := ctx.Query(\\\"id\\\") name := ctx.Query(\\\"name\\\") ctx.JSON(200, gin.H{ \\\"id\\\": id, \\\"name\\\": name, }) }) \",\"如果参数不存在，就给一个默认值：\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { id := ctx.Query(\\\"id\\\") name := ctx.Query(\\\"name\\\") address := ctx.DefaultQuery(\\\"address\\\", \\\"北京\\\") ctx.JSON(200, gin.H{ \\\"id\\\": id, \\\"name\\\": name, \\\"address\\\": address, }) }) \",\"判断参数是否存在：\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { id, ok := ctx.GetQuery(\\\"id\\\") address, aok := ctx.GetQuery(\\\"address\\\") ctx.JSON(200, gin.H{ \\\"id\\\": id, \\\"idok\\\": ok, \\\"address\\\": address, \\\"aok\\\": aok, }) }) \",\"id是数值类型，上述获取的都是string类型，根据类型获取：\",\"type User struct { Id int64 `form:\\\"id\\\"` Name string `form:\\\"name\\\"` } r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { var user User err := ctx.BindQuery(&user) if err != nil { log.Println(err) } ctx.JSON(200, user) }) \",\"也可以：\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { var user User err := ctx.ShouldBindQuery(&user) if err != nil { log.Println(err) } ctx.JSON(200, user) }) \",\"区别：\",\"type User struct { Id int64 `form:\\\"id\\\"` Name string `form:\\\"name\\\"` Address string `form:\\\"address\\\" binding:\\\"required\\\"` } \",\"当bind是必须的时候，ShouldBindQuery会报错，开发者自行处理，状态码不变。\",\"BindQuery则报错的同时，会将状态码改为400。所以一般建议是使用Should开头的bind。\"]},\"67\":{\"h\":\"1.2 数组参数\",\"t\":[\"请求url：http://localhost:8080/user/save?address=Beijing&address=shanghai\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { address := ctx.QueryArray(\\\"address\\\") ctx.JSON(200, address) }) \",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { address, ok := ctx.GetQueryArray(\\\"address\\\") fmt.Println(ok) ctx.JSON(200, address) }) \",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { var user User err := ctx.ShouldBindQuery(&user) fmt.Println(err) ctx.JSON(200, user) }) \"]},\"68\":{\"h\":\"1.3 map参数\",\"t\":[\"请求url：http://localhost:8080/user/save?addressMap[home]=Beijing&addressMap[company]=shanghai\",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { addressMap := ctx.QueryMap(\\\"addressMap\\\") ctx.JSON(200, addressMap) }) \",\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { addressMap, _ := ctx.GetQueryMap(\\\"addressMap\\\") ctx.JSON(200, addressMap) }) \",\"map参数 bind并没有支持\"]},\"69\":{\"h\":\"2. Post请求参数\",\"t\":[\"post请求一般是表单参数和json参数\"]},\"70\":{\"h\":\"2.1 表单参数\",\"t\":[\"image-20221121163103752\",\"r.POST(\\\"/user/save\\\", func(ctx *gin.Context) { id := ctx.PostForm(\\\"id\\\") name := ctx.PostForm(\\\"name\\\") address := ctx.PostFormArray(\\\"address\\\") addressMap := ctx.PostFormMap(\\\"addressMap\\\") ctx.JSON(200, gin.H{ \\\"id\\\": id, \\\"name\\\": name, \\\"address\\\": address, \\\"addressMap\\\": addressMap, }) }) \",\"r.POST(\\\"/user/save\\\", func(ctx *gin.Context) { var user User err := ctx.ShouldBind(&user) addressMap, _ := ctx.GetPostFormMap(\\\"addressMap\\\") user.AddressMap = addressMap fmt.Println(err) ctx.JSON(200, user) }) \"]},\"71\":{\"h\":\"2.2 json参数\",\"t\":[\"{ \\\"id\\\":1111, \\\"name\\\":\\\"zhangsan\\\", \\\"address\\\": [ \\\"beijing\\\", \\\"shanghai\\\" ], \\\"addressMap\\\":{ \\\"home\\\":\\\"beijing\\\" } } \",\"r.POST(\\\"/user/save\\\", func(ctx *gin.Context) { var user User err := ctx.ShouldBindJSON(&user) fmt.Println(err) ctx.JSON(200, user) }) \",\"其他类型参数注入xml，yaml等和json道理一样\"]},\"72\":{\"h\":\"3. 路径参数\",\"t\":[\"请求url：http://localhost:8080/user/save/111\",\"r.POST(\\\"/user/save/:id\\\", func(ctx *gin.Context) { ctx.JSON(200, ctx.Param(\\\"id\\\")) }) \"]},\"73\":{\"h\":\"4. 文件参数\",\"t\":[\"r.POST(\\\"/user/save\\\", func(ctx *gin.Context) { form, err := ctx.MultipartForm() if err != nil { log.Println(err) } files := form.File for _, fileArray := range files { for _, v := range fileArray { ctx.SaveUploadedFile(v, \\\"./\\\"+v.Filename) } } ctx.JSON(200, form.Value) }) \"]},\"74\":{\"c\":[\"golang\"]},\"75\":{\"c\":[\"gin\",\"golang\"]},\"76\":{\"h\":\"响应\"},\"77\":{\"h\":\"1. 字符串方式\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { ctx.String(http.StatusOK, \\\"this is a %s\\\", \\\"ms string response\\\") }) \"]},\"78\":{\"h\":\"2. JSON方式\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { ctx.JSON(http.StatusOK, gin.H{ \\\"success\\\": true, }) }) \"]},\"79\":{\"h\":\"3. XML方式\",\"t\":[\"type XmlUser struct { Id int64 `xml:\\\"id\\\"` Name string `xml:\\\"name\\\"` } r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { u := XmlUser{ Id: 11, Name: \\\"zhangsan\\\", } ctx.XML(http.StatusOK, u) }) \"]},\"80\":{\"h\":\"4. 文件格式\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { //ctx.File(\\\"./1.png\\\") ctx.FileAttachment(\\\"./1.png\\\", \\\"2.png\\\") }) \"]},\"81\":{\"h\":\"5. 设置http响应头\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { ctx.Header(\\\"test\\\", \\\"headertest\\\") }) \"]},\"82\":{\"h\":\"6. 重定向\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { ctx.Redirect(http.StatusMovedPermanently, \\\"http://www.baidu.com\\\") }) \"]},\"83\":{\"h\":\"7. YAML方式\",\"t\":[\"r.GET(\\\"/user/save\\\", func(ctx *gin.Context) { ctx.YAML(200, gin.H{\\\"name\\\": \\\"ms\\\", \\\"age\\\": 19}) }) \"]},\"84\":{\"c\":[\"golang\"]},\"85\":{\"c\":[\"gin\",\"golang\"]},\"86\":{\"h\":\"模板渲染\",\"t\":[\"模板是golang语言的一个标准库，使用场景很多，gin框架同样支持模板\"]},\"87\":{\"h\":\"1. 基本使用\",\"t\":[\"定义一个存放模板文件的templates文件夹\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"> <title>gin_templates</title> </head> <body> {{.title}} </body> </html> \",\"后端代码：\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) func main() { r := gin.Default() // 模板解析 r.LoadHTMLFiles(\\\"templates/index.tmpl\\\") r.GET(\\\"/index\\\", func(c *gin.Context) { // HTML请求 // 模板的渲染 c.HTML(http.StatusOK, \\\"index.tmpl\\\", gin.H{ \\\"title\\\": \\\"hello 模板\\\", }) }) r.Run(\\\":9090\\\") // 启动server } \"]},\"88\":{\"h\":\"2. 多个模板渲染\",\"t\":[\"如果有多个模板，可以统一进行渲染\",\"// 模板解析,解析templates目录下的所有模板文件 r.LoadHTMLGlob(\\\"templates/**\\\") \",\"如果目录为templates/post/index.tmpl和templates/user/index.tmpl这种，可以\",\" // **/* 代表所有子目录下的所有文件 router.LoadHTMLGlob(\\\"templates/**/*\\\") \"]},\"89\":{\"h\":\"3. 自定义模板函数\",\"t\":[\" // gin框架给模板添加自定义函数 r.SetFuncMap(template.FuncMap{ \\\"safe\\\": func(str string) template.HTML { return template.HTML(str) }, }) // 模板解析,解析templates目录下的所有模板文件 r.LoadHTMLGlob(\\\"templates/**\\\") r.GET(\\\"/index\\\", func(c *gin.Context) { // HTML请求 // 模板的渲染 c.HTML(http.StatusOK, \\\"index.tmpl\\\", gin.H{ \\\"title\\\": \\\"<a href='http://baidu.com'>跳转到其他地方</a>\\\", }) }) \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"> <title>gin_templates</title> </head> <body> {{.title | safe}} </body> </html> \"]},\"90\":{\"h\":\"4. 静态文件处理\",\"t\":[\"如果在模板中引入静态文件，比如样式文件\",\"index.css\",\"body{ background-color: aqua; } \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"> <title>gin_templates</title> <link rel=\\\"stylesheet\\\" href=\\\"/css/index.css\\\"> </head> <body> {{.title}} </body> </html> \",\"// 加载静态文件 r.Static(\\\"/css\\\", \\\"./static/css\\\") \"]},\"91\":{\"c\":[\"golang\"]},\"92\":{\"c\":[\"gin\",\"golang\"]},\"93\":{\"h\":\"会话\",\"t\":[\"会话控制涉及到cookie和session的使用\"]},\"94\":{\"h\":\"1. cookie\",\"t\":[\"HTTP是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分两次请求是否由同一个客户端发出\",\"Cookie就是解决HTTP协议无状态的方案之一\",\"Cookie实际上就是服务器保存在浏览器上的一段信息。浏览器有了Cookie之后，每次向服务器发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求\",\"Cookie由服务器创建，并发送给浏览器，最终由浏览器保存\"]},\"95\":{\"h\":\"1.1 设置cookie\",\"t\":[\"func (c *Context) SetCookie(name, value string, maxAge int, path, domain string, secure, httpOnly bool) \",\"参数说明：\",\"参数名\",\"类型\",\"说明\",\"name\",\"string\",\"cookie名字\",\"value\",\"string\",\"cookie值\",\"maxAge\",\"int\",\"有效时间，单位是秒，MaxAge=0 忽略MaxAge属性，MaxAge<0 相当于删除cookie, 通常可以设置-1代表删除，MaxAge>0 多少秒后cookie失效\",\"path\",\"string\",\"cookie路径\",\"domain\",\"string\",\"cookie作用域\",\"secure\",\"bool\",\"Secure=true，那么这个cookie只能用https协议发送给服务器\",\"httpOnly\",\"bool\",\"设置HttpOnly=true的cookie不能被js获取到\",\"r.GET(\\\"/cookie\\\", func(c *gin.Context) { // 设置cookie c.SetCookie(\\\"site_cookie\\\", \\\"cookievalue\\\", 3600, \\\"/\\\", \\\"localhost\\\", false, true) }) \"]},\"96\":{\"h\":\"1.2 读取cookie\",\"t\":[\"r.GET(\\\"/read\\\", func(c *gin.Context) { // 根据cookie名字读取cookie值 data, err := c.Cookie(\\\"site_cookie\\\") if err != nil { // 直接返回cookie值 c.String(200,data) return } c.String(200,\\\"not found!\\\") }) \"]},\"97\":{\"h\":\"1.3 删除cookie\",\"t\":[\"通过将cookie的MaxAge设置为-1, 达到删除cookie的目的。\",\"r.GET(\\\"/del\\\", func(c *gin.Context) { // 设置cookie MaxAge设置为-1，表示删除cookie c.SetCookie(\\\"site_cookie\\\", \\\"cookievalue\\\", -1, \\\"/\\\", \\\"localhost\\\", false, true) c.String(200,\\\"删除cookie\\\") }) \"]},\"98\":{\"h\":\"2. Session\",\"t\":[\"在Gin框架中，我们可以依赖gin-contrib/sessions中间件处理session。\",\"安装session包\",\"go get github.com/gin-contrib/sessions \",\"package main import ( \\\"fmt\\\" \\\"github.com/gin-contrib/sessions\\\" \\\"github.com/gin-contrib/sessions/cookie\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 创建基于cookie的存储引擎，secret 参数是用于加密的密钥 store := cookie.NewStore([]byte(\\\"secret\\\")) // 设置session中间件，参数mysession，指的是session的名字，也是cookie的名字 // store是前面创建的存储引擎，我们可以替换成其他存储引擎 r.Use(sessions.Sessions(\\\"mysession\\\", store)) r.GET(\\\"/hello\\\", func(c *gin.Context) { // 初始化session对象 session := sessions.Default(c) // 通过session.Get读取session值 // session是键值对格式数据，因此需要通过key查询数据 if session.Get(\\\"hello\\\") != \\\"world\\\" { fmt.Println(\\\"没读到\\\") // 设置session数据 session.Set(\\\"hello\\\", \\\"world\\\") session.Save() } c.JSON(200, gin.H{\\\"hello\\\": session.Get(\\\"hello\\\")}) }) r.Run(\\\":8080\\\") } \"]},\"99\":{\"h\":\"2.1 多session\",\"t\":[\"package main import ( \\\"github.com/gin-contrib/sessions\\\" \\\"github.com/gin-contrib/sessions/cookie\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() store := cookie.NewStore([]byte(\\\"secret\\\")) sessionNames := []string{\\\"a\\\", \\\"b\\\"} r.Use(sessions.SessionsMany(sessionNames, store)) r.GET(\\\"/hello\\\", func(c *gin.Context) { sessionA := sessions.DefaultMany(c, \\\"a\\\") sessionB := sessions.DefaultMany(c, \\\"b\\\") if sessionA.Get(\\\"hello\\\") != \\\"world!\\\" { sessionA.Set(\\\"hello\\\", \\\"world!\\\") sessionA.Save() } if sessionB.Get(\\\"hello\\\") != \\\"world?\\\" { sessionB.Set(\\\"hello\\\", \\\"world?\\\") sessionB.Save() } c.JSON(200, gin.H{ \\\"a\\\": sessionA.Get(\\\"hello\\\"), \\\"b\\\": sessionB.Get(\\\"hello\\\"), }) }) r.Run(\\\":8080\\\") } \"]},\"100\":{\"h\":\"2.2 基于redis存储引擎的session\",\"t\":[\"如果我们想将session数据保存到redis中，只要将session的存储引擎改成redis即可。\",\"使用redis作为存储引擎的例子：\",\"首先安装redis存储引擎的包\",\"go get github.com/gin-contrib/sessions/redis \",\"package main import ( \\\"github.com/gin-contrib/sessions\\\" \\\"github.com/gin-contrib/sessions/redis\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() // 初始化基于redis的存储引擎 // 参数说明： // 第1个参数 - redis最大的空闲连接数 // 第2个参数 - 数通信协议tcp或者udp // 第3个参数 - redis地址, 格式，host:port // 第4个参数 - redis密码 // 第5个参数 - session加密密钥 store, _ := redis.NewStore(10, \\\"tcp\\\", \\\"localhost:6379\\\", \\\"\\\", []byte(\\\"secret\\\")) r.Use(sessions.Sessions(\\\"mysession\\\", store)) r.GET(\\\"/incr\\\", func(c *gin.Context) { session := sessions.Default(c) var count int v := session.Get(\\\"count\\\") if v == nil { count = 0 } else { count = v.(int) count++ } session.Set(\\\"count\\\", count) session.Save() c.JSON(200, gin.H{\\\"count\\\": count}) }) r.Run(\\\":8080\\\") } \"]},\"101\":{\"c\":[\"golang\"]},\"102\":{\"c\":[\"gin\",\"golang\"]},\"103\":{\"h\":\"中间件\",\"t\":[\"在Gin框架中，中间件（Middleware）指的是可以拦截http请求-响应生命周期的特殊函数，在请求-响应生命周期中可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。\",\"中间件的常见应用场景如下：\",\"请求限速\",\"api接口签名处理\",\"权限校验\",\"统一错误处理\",\"Gin支持设置全局中间件和针对路由分组设置中间件，设置全局中间件意思就是会拦截所有请求，针对分组路由设置中间件，意思就是仅对这个分组下的路由起作用。\"]},\"104\":{\"h\":\"1. 中间件使用\",\"t\":[\" r := gin.New() // 通过use设置全局中间件 // 设置日志中间件，主要用于打印请求日志 r.Use(gin.Logger()) // 设置Recovery中间件，主要用于拦截paic错误，不至于导致进程崩掉 r.Use(gin.Recovery()) r.GET(\\\"/test\\\", func(ctx *gin.Context) { panic(errors.New(\\\"test error\\\")) }) r.Run(\\\":8080\\\") \"]},\"105\":{\"h\":\"2. 自定义中间件\",\"t\":[\"使用Use可以使用gin自带的中间件或者其他第三方中间件，也可以自己开发中间件\",\"package main // 导入gin包 import ( \\\"github.com/gin-gonic/gin\\\" \\\"log\\\" \\\"time\\\" ) // 自定义个日志中间件 func Logger() gin.HandlerFunc { return func(c *gin.Context) { t := time.Now() // 可以通过上下文对象，设置一些依附在上下文对象里面的键/值数据 c.Set(\\\"example\\\", \\\"12345\\\") // 在这里处理请求到达控制器函数之前的逻辑 // 调用下一个中间件，或者控制器处理函数，具体得看注册了多少个中间件。 c.Next() // 在这里可以处理请求返回给用户之前的逻辑 latency := time.Since(t) log.Print(latency) // 例如，查询请求状态吗 status := c.Writer.Status() log.Println(status) } } func main() { r := gin.New() // 注册上面自定义的日志中间件 r.Use(Logger()) r.GET(\\\"/test\\\", func(c *gin.Context) { // 查询我们之前在日志中间件，注入的键值数据 example := c.MustGet(\\\"example\\\").(string) // it would print: \\\"12345\\\" log.Println(example) }) // Listen and serve on 0.0.0.0:8080 r.Run(\\\":8080\\\") } \"]},\"106\":{\"c\":[\"golang\"]},\"107\":{\"c\":[\"gin\",\"golang\"]},\"108\":{\"h\":\"gin\"},\"109\":{\"c\":[\"gin\"]},\"110\":{\"h\":\"快速入门\",\"t\":[\"gorm地址：https://github.com/go-gorm/gorm\",\"对开发者友好的gorm库，目前使用最广的go orm库之一\"]},\"111\":{\"h\":\"1. 入门\",\"t\":[\"数据库以目前使用最多的mysql为例。\",\"//安装MySQL驱动 go get -u gorm.io/driver/mysql //安装gorm包 go get -u gorm.io/gorm //安装gin go get -u github.com/gin-gonic/gin \",\"涉及到的数据库sql：\",\"CREATE TABLE `users` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增ID', `username` varchar(30) NOT NULL COMMENT '账号', `password` varchar(100) NOT NULL COMMENT '密码', `createtime` bigint(20) NOT NULL DEFAULT 0 COMMENT '创建时间', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 \",\"//定义User模型，绑定users表，ORM库操作数据库，需要定义一个struct类型和MYSQL表进行绑定或者叫映射，struct字段和MYSQL表字段一一对应 type User struct { ID int64 // 主键 //通过在字段后面的标签说明，定义golang字段和表字段的关系 //例如 `gorm:\\\"column:username\\\"` 标签说明含义是: Mysql表的列名（字段名)为username Username string `gorm:\\\"column:username\\\"` Password string `gorm:\\\"column:password\\\"` //创建时间，时间戳 CreateTime int64 `gorm:\\\"column:createtime\\\"` } \",\"package dao import ( \\\"fmt\\\" \\\"gorm.io/driver/mysql\\\" \\\"gorm.io/gorm\\\" ) var DB *gorm.DB func init() { //配置MySQL连接参数 username := \\\"root\\\" //账号 password := \\\"root\\\" //密码 host := \\\"127.0.0.1\\\" //数据库地址，可以是Ip或者域名 port := 3306 //数据库端口 Dbname := \\\"gorm\\\" //数据库名 dsn := fmt.Sprintf(\\\"%s:%s@tcp(%s:%d)/%s?charset=utf8&parseTime=True&loc=Local\\\", username, password, host, port, Dbname) db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{ Logger: logger.Default.LogMode(logger.Info), }) if err != nil { panic(\\\"连接数据库失败, error=\\\" + err.Error()) } DB = db } \",\"插入数据：\",\"package dao import \\\"log\\\" type User struct { ID int64 Username string `gorm:\\\"column:username\\\"` Password string `gorm:\\\"column:password\\\"` CreateTime int64 `gorm:\\\"column:createtime\\\"` } func (u User) TableName() string { //绑定MYSQL表名为users return \\\"users\\\" } func Save(user *User) { err := DB.Create(user) if err != nil { log.Println(\\\"insert fail : \\\", err) } } \",\"package api import ( \\\"github.com/gin-gonic/gin\\\" \\\"test.com/gormtest/dao\\\" \\\"time\\\" ) func SaveUser(c *gin.Context) { user := &dao.User{ Username: \\\"zhangsan\\\", Password: \\\"123456\\\", CreateTime: time.Now().UnixMilli(), } dao.Save(user) c.JSON(200, user) } \",\"package api import \\\"github.com/gin-gonic/gin\\\" func RegisterRouter(r *gin.Engine) { r.GET(\\\"/save\\\", SaveUser) } \",\"测试，数据成功保存，并获取到id\",\"查询：\",\"func GetById(id int64) User { var user User err := DB.Where(\\\"id=?\\\", id).First(&user).Error if err != nil { log.Println(\\\"get user by id fail : \\\", err) } return user } \",\"func GetUser(c *gin.Context) { user := dao.GetById(1) c.JSON(200, user) } \",\"func GetAll() []User { var users []User err := DB.Find(&users) if err != nil { log.Println(\\\"get users fail : \\\", err) } return users } \",\"func GetUser(c *gin.Context) { user := dao.GetAll() c.JSON(200, user) } \",\"更新：\",\"func UpdateById(id int64) { err := DB.Model(&User{}).Where(\\\"id=?\\\", id).Update(\\\"username\\\", \\\"lisi\\\") if err != nil { log.Println(\\\"update users fail : \\\", err) } } \",\"func UpdateUser(c *gin.Context) { dao.UpdateById(1) user := dao.GetById(1) c.JSON(200, user) } \",\"删除：\",\"func DeleteById(id int64) { err := DB.Where(\\\"id=?\\\", id).Delete(&User{}) if err != nil { log.Println(\\\"delete users fail : \\\", err) } } \",\"func DeleteUser(c *gin.Context) { dao.DeleteById(1) user := dao.GetById(1) c.JSON(200, user) } \"]},\"112\":{\"c\":[\"golang\"]},\"113\":{\"c\":[\"gorm\",\"golang\"]},\"114\":{\"h\":\"模型定义\",\"t\":[\"前面入门案例中，我们定义了User结构体用来和数据表users做映射，User结构体，我们称之为数据模型，在gorm框架中，操作数据库需要预先定义模型。\",\"底层都是使用的golang的database标准库，利用反射原理，执行读写操作时，将结构体翻译为sql语句，并将结果转化为对应的模型。\"]},\"115\":{\"h\":\"1. 模型定义\",\"t\":[\"假设有一个商品表\",\"CREATE TABLE `goods` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增ID，商品Id', `name` varchar(30) NOT NULL COMMENT '商品名', `price` decimal(10,2) unsigned NOT NULL COMMENT '商品价格', `type_id` int(10) unsigned NOT NULL COMMENT '商品类型Id', `createtime` int(10) NOT NULL DEFAULT 0 COMMENT '创建时间', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 \",\"将上述表翻译为模型后，如下：\",\"type Good struct { Id int //表字段名为：id Name string //表字段名为：name Price float64 //表字段名为：price TypeId int //表字段名为：type_id CreateTime int64 `gorm:\\\"column:createtime\\\"` //表字段名为：createtime } \",\"默认gorm对struct字段名使用Snake Case命名风格转换成mysql表字段名(需要转换成小写字母)。\",\"Snake Case命名风格，就是各个单词之间用下划线（_）分隔，例如： CreateTime的Snake Case风格命名为create_time\",\"同时默认情况下，使用ID做为其主键，使用结构体名称的Snake Case风格的复数形式做为表名，使用 CreatedAt、UpdatedAt 字段追踪创建、更新时间。\"]},\"116\":{\"h\":\"2. 模型标签\",\"t\":[\"标签定义：\",\"`gorm:\\\"标签内容\\\"` \",\"标签定义部分，多个标签定义可以使用分号（;）分隔\",\"gorm常用标签如下：\",\"标签\",\"说明\",\"例子\",\"column\",\"指定列名\",\"gorm:\\\"column:createtime\\\"\",\"primaryKey\",\"指定主键\",\"gorm:\\\"column:id; PRIMARY_KEY\\\"\",\"-\",\"忽略字段\",\"gorm:\\\"-\\\" 可以忽略struct字段，被忽略的字段不参与gorm的读写操作\",\"其他的可以查看官方文档：https://gorm.io/zh_CN/docs/models.html#embedded_struct\"]},\"117\":{\"h\":\"3. 表名映射\",\"t\":[\"复数表名，比如结构体User，默认的表名为users\",\"实现Tabler接口 （TableName 不支持动态变化，它会被缓存下来以便后续使用。）\",\"type Tabler interface { TableName() string } // TableName 会将 User 的表名重写为 `profiles` func (User) TableName() string { return \\\"profiles\\\" } \",\"动态表名，使用Scopes\",\"func UserTable(user User) func (tx *gorm.DB) *gorm.DB { return func (tx *gorm.DB) *gorm.DB { if user.Admin { return tx.Table(\\\"admin_users\\\") } return tx.Table(\\\"users\\\") } } db.Scopes(UserTable(user)).Create(&user) \",\"临时表名\",\"db.Table(\\\"deleted_users\\\") \"]},\"118\":{\"h\":\"4. Model\",\"t\":[\"GORM 定义一个 gorm.Model 结构体，其包括字段 ID、CreatedAt、UpdatedAt、DeletedAt\",\"// gorm.Model 的定义 type Model struct { ID uint `gorm:\\\"primaryKey\\\"` CreatedAt time.Time UpdatedAt time.Time DeletedAt gorm.DeletedAt `gorm:\\\"index\\\"` } \",\"GORM 约定使用 CreatedAt、UpdatedAt 追踪创建/更新时间。如果定义了这种字段，GORM 在创建、更新时会自动填充当前时间。\",\"要使用不同名称的字段，您可以配置 autoCreateTime、autoUpdateTime 标签\",\"如果想要保存 UNIX（毫/纳）秒时间戳，而不是 time，只需简单地将 time.Time 修改为 int 即可。\",\"例子：\",\"type User struct { CreatedAt time.Time // 默认创建时间字段， 在创建时，如果该字段值为零值，则使用当前时间填充 UpdatedAt int // 默认更新时间字段， 在创建时该字段值为零值或者在更新时，使用当前时间戳秒数填充 Updated int64 `gorm:\\\"autoUpdateTime:nano\\\"` // 自定义字段， 使用时间戳填纳秒数充更新时间 Updated int64 `gorm:\\\"autoUpdateTime:milli\\\"` //自定义字段， 使用时间戳毫秒数填充更新时间 Created int64 `gorm:\\\"autoCreateTime\\\"` //自定义字段， 使用时间戳秒数填充创建时间 } \",\"可以将它嵌入到您的结构体中，以包含这几个字段，比如\",\"type User struct { gorm.Model Name string } // 等效于 type User struct { ID uint `gorm:\\\"primaryKey\\\"` CreatedAt time.Time UpdatedAt time.Time DeletedAt gorm.DeletedAt `gorm:\\\"index\\\"` Name string } \",\"对于正常的结构体字段，你也可以通过标签 embedded 将其嵌入，例如：\",\"type Author struct { Name string Email string } type Blog struct { ID int Author Author `gorm:\\\"embedded\\\"` Upvotes int32 } // 等效于 type Blog struct { ID int64 Name string Email string Upvotes int32 } \",\"可以使用标签 embeddedPrefix 来为 db 中的字段名添加前缀，例如：\",\"type Blog struct { ID int Author Author `gorm:\\\"embedded;embeddedPrefix:author_\\\"` Upvotes int32 } // 等效于 type Blog struct { ID int64 AuthorName string AuthorEmail string Upvotes int32 } \"]},\"119\":{\"h\":\"5. 数据库连接\",\"t\":[\"GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server\",\"连接数据库主要是两个步骤：\",\"配置DSN (Data Source Name)\",\"使用gorm.Open连接数据库\"]},\"120\":{\"h\":\"5.1 DSN\",\"t\":[\"gorm库使用dsn作为连接数据库的参数，dsn翻译过来就叫数据源名称，用来描述数据库连接信息。一般都包含数据库连接地址，账号，密码之类的信息。\",\"格式：\",\"[username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN] \",\"mysql的dsn的一些例子：\",\"//mysql dsn格式 //涉及参数: //username 数据库账号 //password 数据库密码 //host 数据库连接地址，可以是Ip或者域名 //port 数据库端口 //Dbname 数据库名 username:password@tcp(host:port)/Dbname?charset=utf8&parseTime=True&loc=Local //填上参数后的例子 //username = root //password = 123456 //host = localhost //port = 3306 //Dbname = gorm //后面K/V键值对参数含义为： // charset=utf8 客户端字符集为utf8 // parseTime=true 支持把数据库datetime和date类型转换为golang的time.Time类型 // loc=Local 使用系统本地时区 root:123456@tcp(localhost:3306)/gorm?charset=utf8&parseTime=True&loc=Local //gorm 设置mysql连接超时参数 //开发的时候经常需要设置数据库连接超时参数，gorm是通过dsn的timeout参数配置 //例如，设置10秒后连接超时，timeout=10s //下面是完成的例子 root:123456@tcp(localhost:3306)/gorm?charset=utf8&parseTime=True&loc=Local&timeout=10s //设置读写超时时间 // readTimeout - 读超时时间，0代表不限制 // writeTimeout - 写超时时间，0代表不限制 root:123456@tcp(localhost:3306)/gorm?charset=utf8&parseTime=True&loc=Local&timeout=10s&readTimeout=30s&writeTimeout=60s \",\"要支持完整的 UTF-8 编码，您需要将 charset=utf8 更改为 charset=utf8mb4\"]},\"121\":{\"h\":\"5.2 连接数据库\",\"t\":[\"import ( \\\"gorm.io/driver/mysql\\\" \\\"gorm.io/gorm\\\" ) func main() { // 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情 dsn := \\\"user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local\\\" db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{}) } \",\"MySQL 驱动程序提供了 一些高级配置 可以在初始化过程中使用，例如：\",\"db, err := gorm.Open(mysql.New(mysql.Config{ DSN: \\\"gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&parseTime=True&loc=Local\\\", // DSN data source name DefaultStringSize: 256, // string 类型字段的默认长度 DisableDatetimePrecision: true, // 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持 DontSupportRenameIndex: true, // 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引 DontSupportRenameColumn: true, // 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列 SkipInitializeWithVersion: false, // 根据当前 MySQL 版本自动配置 }), &gorm.Config{}) \",\"GORM 允许通过 DriverName 选项自定义 MySQL 驱动，例如：\",\"import ( _ \\\"example.com/my_mysql_driver\\\" \\\"gorm.io/driver/mysql\\\" \\\"gorm.io/gorm\\\" ) db, err := gorm.Open(mysql.New(mysql.Config{ DriverName: \\\"my_mysql_driver\\\", DSN: \\\"gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&parseTime=True&loc=Local\\\", // data source name, 详情参考：https://github.com/go-sql-driver/mysql#dsn-data-source-name }), &gorm.Config{}) \"]},\"122\":{\"h\":\"5.3 调试模式\",\"t\":[\"db.Debug() \"]},\"123\":{\"h\":\"5.4 连接池配置\",\"t\":[\" sqlDB, _ := db.DB() //设置数据库连接池参数 sqlDB.SetMaxOpenConns(100) //设置数据库连接池最大连接数 sqlDB.SetMaxIdleConns(20) //连接池最大允许的空闲连接数，如果没有sql任务需要执行的连接数大于20，超过的连接会被连接池关闭 \"]},\"124\":{\"c\":[\"golang\"]},\"125\":{\"c\":[\"gorm\",\"golang\"]},\"126\":{\"h\":\"增删改查\"},\"127\":{\"h\":\"1. 插入数据\",\"t\":[\"user := User{ Username:\\\"zhangsan\\\", Password:\\\"123456\\\", CreateTime:time.Now().Unix(), } db.Create(&user) user.ID // 返回插入数据的主键 result.Error // 返回 error result.RowsAffected // 返回插入记录的条数 \"]},\"128\":{\"h\":\"1.1 用指定的字段创建：\",\"t\":[\"db.Select(\\\"username\\\",\\\"password\\\").Create(&user) \"]},\"129\":{\"h\":\"1.2 忽略字段\",\"t\":[\"db.Omit(\\\"username\\\").Create(&user) \"]},\"130\":{\"h\":\"1.3 批量插入：\",\"t\":[\"var users = []User{{Username: \\\"jinzhu1\\\"}, {Username: \\\"jinzhu2\\\"}, {Username: \\\"jinzhu3\\\"}} db.Create(&users) for _, user := range users { user.ID // 1,2,3 } \",\"使用 CreateInBatches 分批创建时，你可以指定每批的数量，例如：\",\"var users = []User{{Username: \\\"jinzhu_1\\\"}, ...., {Username: \\\"jinzhu_10000\\\"}} // 数量为 100 db.CreateInBatches(users, 100) \"]},\"131\":{\"h\":\"1.4 使用map创建：\",\"t\":[\"db.Model(&User{}).Create(map[string]interface{}{ \\\"Name\\\": \\\"jinzhu\\\", \\\"Age\\\": 18, }) // batch insert from `[]map[string]interface{}{}` db.Model(&User{}).Create([]map[string]interface{}{ {\\\"Name\\\": \\\"jinzhu_1\\\", \\\"Age\\\": 18}, {\\\"Name\\\": \\\"jinzhu_2\\\", \\\"Age\\\": 20}, }) \",\"map创建注意，主键不会被填充。\"]},\"132\":{\"h\":\"1.5 sql表达式：\",\"t\":[\"DB.Model(&User{}).Create(map[string]interface{}{ \\\"username\\\": \\\"jinzhu\\\", \\\"password\\\": clause.Expr{SQL: \\\"md5(?)\\\", Vars: []interface{}{\\\"123456\\\"}}, }) \"]},\"133\":{\"h\":\"1.6 使用原生sql语句：\",\"t\":[\" db.Exec(\\\"insert into users (username,password,createtime) values (?,?,?)\\\", user.Username, user.Password, user.CreateTime) \"]},\"134\":{\"h\":\"2. 更新数据\",\"t\":[\"在创建一个表\",\"CREATE TABLE `goods` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商品id', `title` varchar(100) NOT NULL COMMENT '商品名', `price` decimal(10, 2) NULL DEFAULT 0.00 COMMENT '商品价格', `stock` int(11) DEFAULT '0' COMMENT '商品库存', `type` int(11) DEFAULT '0' COMMENT '商品类型', `create_time` datetime NOT NULL COMMENT '商品创建时间', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; \",\"package dao import \\\"time\\\" type Goods struct { Id int Title string Price float64 Stock int Type int CreateTime time.Time } func (v Goods) TableName() string { return \\\"goods\\\" } func SaveGoods(goods Goods) { DB.Create(&goods) } \",\"package dao import ( \\\"testing\\\" \\\"time\\\" ) func TestSaveGoods(t *testing.T) { goods := Goods{ Title: \\\"毛巾\\\", Price: 25, Stock: 100, Type: 0, CreateTime: time.Now(), } SaveGoods(goods) } \"]},\"135\":{\"h\":\"2.1 保存数据\",\"t\":[\" goods := Goods{} DB.Where(\\\"id = ?\\\", 1).Take(&goods) goods.Price = 100 //UPDATE `goods` SET `title`='毛巾',`price`=100.000000,`stock`=100,`type`=0,`create_time `='2022-11-25 13:03:48' WHERE `id` = 1 DB.Save(&goods) \"]},\"136\":{\"h\":\"2.2 更新单个列\",\"t\":[\" goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) DB.Model(&goods).Update(\\\"title\\\", \\\"hello\\\") \"]},\"137\":{\"h\":\"2.3 更新多列\",\"t\":[\" goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) //更新非零值的字段 也可以使用map DB.Model(&goods).Updates(Goods{ Title: \\\"hello\\\", Stock: 200, }) \"]},\"138\":{\"h\":\"2.4 更新选定的字段\",\"t\":[\"goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) DB.Model(&goods).Select(\\\"title\\\").Updates(Goods{ Title: \\\"hello\\\", Stock: 200, }) \",\"排除：\",\"goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) DB.Model(&goods).Omit(\\\"title\\\").Updates(Goods{ Title: \\\"hello\\\", Stock: 200, }) \",\"也可以组合使用\",\"Select(\\\"*\\\").Omit(\\\"title\\\") \",\"gorm更新必须带条件进行更新，否则会返回错误gorm.ErrMissingWhereClause，或者启用 AllowGlobalUpdate 模式\",\"db.Session(&gorm.Session{AllowGlobalUpdate: true}).Model(&User{}).Update(\\\"name\\\", \\\"jinzhu\\\") \"]},\"139\":{\"h\":\"2.5 表达式\",\"t\":[\"db.Model(&goods).Update(\\\"stock\\\", gorm.Expr(\\\"stock + 1\\\")) db.Model(&goods).Update(map[string]interface{}{\\\"stock\\\": gorm.Expr(\\\"stock + 1\\\")}) \"]},\"140\":{\"h\":\"2.6 子查询更新\",\"t\":[\" goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) DB.Model(&goods).Update(\\\"title\\\", DB.Model(&User{}).Select(\\\"username\\\").Where(\\\"id=?\\\", 2)) \"]},\"141\":{\"h\":\"3. 删除数据\",\"t\":[\" goods := Goods{} DB.Where(\\\"id = ?\\\", 2).Take(&goods) DB.Delete(&goods) \",\"//根据主键删除 DB.Delete(&Goods{}, 1) \",\"同样的道理，不带条件不能进行删除，必须加一些条件，或者使用原生 SQL，或者启用 AllowGlobalUpdate 模式\",\"db.Session(&gorm.Session{AllowGlobalUpdate: true}).Delete(&User{}) // DELETE FROM users \"]},\"142\":{\"h\":\"4. 查询数据\"},\"143\":{\"h\":\"4.1 查询函数\",\"t\":[\"Take：查询一条记录\",\"db.Take(&goods) \",\"First: 根据主键正序排序后，查询第一条数据\",\"db.First(&goods) \",\"Last：根据主键倒序排序后，查询最后一条记录\",\"db.Last(&goods) \",\"Find：查询多条记录\",\"db.Find(&goods) \",\"Pluck：查询一列值\",\"var titles []string db.Model(&Goods{}).Pluck(\\\"title\\\", &titles) \",\"当 First、Last、Take 方法找不到记录时，GORM 会返回 ErrRecordNotFound 错误，可以通过对比gorm.ErrRecordNotFound进行判断，或者使用Find和Limit的组合进行查询。\",\"db.Limit(1).Find(&user) \"]},\"144\":{\"h\":\"4.2 where\",\"t\":[\"通过db.Where函数设置条件\",\"函数说明： db.Where(query interface{}, args ...interface{})\",\"参数说明:\",\"参数名\",\"说明\",\"query\",\"sql语句的where子句, where子句中使用问号(?)代替参数值，则表示通过args参数绑定参数\",\"args\",\"where子句绑定的参数，可以绑定多个参数\",\"比如：\",\"db.Where(\\\"id in (?)\\\", []int{1,2,5,6}).Take(&goods) \"]},\"145\":{\"h\":\"4.3 select\",\"t\":[\"设置select子句, 指定返回的字段\",\"var goods Goods DB.Select(\\\"id\\\", \\\"title\\\").Find(&goods) \",\"也可以写聚合函数\",\"var total int DB.Model(&Goods{}).Select(\\\"count(*) as total\\\").Pluck(\\\"total\\\", &total) fmt.Println(total) \"]},\"146\":{\"h\":\"4.4 order\",\"t\":[\"排序\",\"var goods []Goods DB.Order(\\\"id desc\\\").Find(&goods) \"]},\"147\":{\"h\":\"4.5 分页\",\"t\":[\"通过limit和Offset实现\",\"var goods []Goods DB.Order(\\\"create_time desc\\\").Limit(10).Offset(10).Find(&goods) \"]},\"148\":{\"h\":\"4.6 count\",\"t\":[\"返回查询匹配的行数\",\"var total int64 = 0 DB.Model(Goods{}).Count(&total) fmt.Println(total) \"]},\"149\":{\"h\":\"4.7 分组\",\"t\":[\"//统计每个商品分类下面有多少个商品 //定一个Result结构体类型，用来保存查询结果 type Result struct { Type int Total int } var results []Result //等价于: SELECT type, count(*) as total FROM `goods` GROUP BY type HAVING (total > 0) db.Model(Goods{}).Select(\\\"type, count(*) as total\\\").Group(\\\"type\\\").Having(\\\"total > 0\\\").Scan(&results) //scan类似Find都是用于执行查询语句，然后把查询结果赋值给结构体变量，区别在于scan不会从传递进来的结构体变量提取表名. //这里因为我们重新定义了一个结构体用于保存结果，但是这个结构体并没有绑定goods表，所以这里只能使用scan查询函数。 \",\"Group函数必须搭配Select函数一起使用\"]},\"150\":{\"h\":\"4.8 直接执行sql语句\",\"t\":[\"sql := \\\"SELECT type, count(*) as total FROM `goods` where create_time > ? GROUP BY type HAVING (total > 0)\\\" //因为sql语句使用了一个问号(?)作为绑定参数, 所以需要传递一个绑定参数(Raw第二个参数). //Raw函数支持绑定多个参数 db.Raw(sql, \\\"2022-11-06 00:00:00\\\").Scan(&results) fmt.Println(results) \"]},\"151\":{\"c\":[\"golang\"]},\"152\":{\"c\":[\"gorm\",\"golang\"]},\"153\":{\"h\":\"事务和Hook\"},\"154\":{\"h\":\"1. 会话Session\",\"t\":[\"为了避免共用db导致的一些问题，gorm提供了会话模式，通过新建session的形式，将db的操作分离，互不影响。\",\"创建session的时候，有一些配置：\",\"// Session 配置 type Session struct { DryRun bool //生成 SQL 但不执行 PrepareStmt bool //预编译模式 NewDB bool //新db 不带之前的条件 Initialized bool //初始化新的db SkipHooks bool //跳过钩子 SkipDefaultTransaction bool //禁用默认事务 DisableNestedTransaction bool //禁用嵌套事务 AllowGlobalUpdate bool //允许不带条件的更新 FullSaveAssociations bool //允许更新关联数据 QueryFields bool //select（字段） Context context.Context Logger logger.Interface NowFunc func() time.Time //允许改变 GORM 获取当前时间的实现 CreateBatchSize int } \",\"比如说可以禁用默认的事务，从而提供性能，官方说大致能提升30%左右：\",\"// 持续会话模式 tx := db.Session(&Session{SkipDefaultTransaction: true}) tx.First(&user, 1) tx.Find(&users) tx.Model(&user).Update(\\\"Age\\\", 18) \",\"比如使用PreparedStmt 在执行任何 SQL 时都会创建一个 prepared statement 并将其缓存，以提高后续的效率\",\"// 会话模式 tx := db.Session(&Session{PrepareStmt: true}) tx.First(&user, 1) tx.Find(&users) tx.Model(&user).Update(\\\"Age\\\", 18) // returns prepared statements manager stmtManger, ok := tx.ConnPool.(*PreparedStmtDB) // 关闭 *当前会话* 的预编译模式 stmtManger.Close() // 为 *当前会话* 预编译 SQL stmtManger.PreparedSQL // => []string{} // 为当前数据库连接池的（所有会话）开启预编译模式 stmtManger.Stmts // map[string]*sql.Stmt for sql, stmt := range stmtManger.Stmts { sql // 预编译 SQL stmt // 预编译模式 stmt.Close() // 关闭预编译模式 } \",\"还有，gorm的db默认是协程安全的，如果使用初始化参数，则db不在协程安全：\",\"tx := db.Session(&gorm.Session{Initialized: true}) \",\"比如context：\",\"timeoutCtx, _ := context.WithTimeout(context.Background(), time.Second) tx := db.Session(&Session{Context: timeoutCtx}) tx.First(&user) // 带有 context timeoutCtx 的查询操作 tx.Model(&user).Update(\\\"role\\\", \\\"admin\\\") // 带有 context timeoutCtx 的更新操作 \"]},\"155\":{\"h\":\"2. 事务\"},\"156\":{\"h\":\"2.1 自动事务\",\"t\":[\"db.Transaction(func(tx *gorm.DB) error { // 在事务中执行一些 db 操作（从这里开始，您应该使用 'tx' 而不是 'db'） if err := tx.Create(&Animal{Name: \\\"Giraffe\\\"}).Error; err != nil { // 返回任何错误都会回滚事务 return err } if err := tx.Create(&Animal{Name: \\\"Lion\\\"}).Error; err != nil { return err } // 返回 nil 提交事务 return nil }) \"]},\"157\":{\"h\":\"2.2 嵌套事务\",\"t\":[\"GORM 支持嵌套事务，您可以回滚较大事务内执行的一部分操作，例如：\",\"db.Transaction(func(tx *gorm.DB) error { tx.Create(&user1) tx.Transaction(func(tx2 *gorm.DB) error { tx2.Create(&user2) return errors.New(\\\"rollback user2\\\") // Rollback user2 }) tx.Transaction(func(tx2 *gorm.DB) error { tx2.Create(&user3) return nil }) return nil }) // Commit user1, user3 \"]},\"158\":{\"h\":\"2.3 手动事务\",\"t\":[\"// 开始事务 tx := db.Begin() // 在事务中执行一些 db 操作（从这里开始，您应该使用 'tx' 而不是 'db'） tx.Create(...) // ... // 遇到错误时回滚事务 tx.Rollback() // 否则，提交事务 tx.Commit() \",\"比如\",\"// 开启事务 tx := db.Begin() //在事务中执行数据库操作，使用的是tx变量，不是db。 //库存减一 //等价于: UPDATE `goods` SET `stock` = stock - 1 WHERE `goods`.`id` = '2' and stock > 0 //RowsAffected用于返回sql执行后影响的行数 rowsAffected := tx.Model(&goods).Where(\\\"stock > 0\\\").Update(\\\"stock\\\", gorm.Expr(\\\"stock - 1\\\")).RowsAffected if rowsAffected == 0 { //如果更新库存操作，返回影响行数为0，说明没有库存了，结束下单流程 //这里回滚作用不大，因为前面没成功执行什么数据库更新操作，也没什么数据需要回滚。 //这里就是举个例子，事务中可以执行多个sql语句，错误了可以回滚事务 tx.Rollback() return } err := tx.Create(保存订单).Error //保存订单失败，则回滚事务 if err != nil { tx.Rollback() } else { tx.Commit() } \"]},\"159\":{\"h\":\"2.4 保存点\",\"t\":[\"GORM 提供了 SavePoint、Rollbackto 方法，来提供保存点以及回滚至保存点功能，例如：\",\"tx := db.Begin() tx.Create(&user1) tx.SavePoint(\\\"sp1\\\") tx.Create(&user2) tx.RollbackTo(\\\"sp1\\\") // Rollback user2 tx.Commit() // Commit user1 \"]},\"160\":{\"h\":\"3. Hook\",\"t\":[\"Hook 是在创建、查询、更新、删除等操作之前、之后调用的函数。\",\"如果您已经为模型定义了指定的方法，它会在创建、更新、查询、删除时自动被调用。如果任何回调返回错误，GORM 将停止后续的操作并回滚事务。\",\"钩子方法的函数签名应该是 func(*gorm.DB) error\"]},\"161\":{\"h\":\"3.1 创建\",\"t\":[\"创建时可用的 hook\",\"// 开始事务 BeforeSave BeforeCreate // 关联前的 save // 插入记录至 db // 关联后的 save AfterCreate AfterSave // 提交或回滚事务 \",\"func (u *User) BeforeCreate(tx *gorm.DB) (err error) { u.UUID = uuid.New() if !u.IsValid() { err = errors.New(\\\"can't save invalid data\\\") } return } func (u *User) AfterCreate(tx *gorm.DB) (err error) { if u.ID == 1 { tx.Model(u).Update(\\\"role\\\", \\\"admin\\\") } return } \",\"在 GORM 中保存、删除操作会默认运行在事务上， 因此在事务完成之前该事务中所作的更改是不可见的，如果您的钩子返回了任何错误，则修改将被回滚。\",\"func (u *User) AfterCreate(tx *gorm.DB) (err error) { if !u.IsValid() { return errors.New(\\\"rollback invalid user\\\") } return nil } \"]},\"162\":{\"h\":\"3.2 更新\",\"t\":[\"更新时可用的 hook\",\"// 开始事务 BeforeSave BeforeUpdate // 关联前的 save // 更新 db // 关联后的 save AfterUpdate AfterSave // 提交或回滚事务 \",\"代码示例：\",\"func (u *User) BeforeUpdate(tx *gorm.DB) (err error) { if u.readonly() { err = errors.New(\\\"read only user\\\") } return } // 在同一个事务中更新数据 func (u *User) AfterUpdate(tx *gorm.DB) (err error) { if u.Confirmed { tx.Model(&Address{}).Where(\\\"user_id = ?\\\", u.ID).Update(\\\"verfied\\\", true) } return } \"]},\"163\":{\"h\":\"3.3 删除\",\"t\":[\"删除时可用的 hook\",\"// 开始事务 BeforeDelete // 删除 db 中的数据 AfterDelete // 提交或回滚事务 \",\"代码示例：\",\"// 在同一个事务中更新数据 func (u *User) AfterDelete(tx *gorm.DB) (err error) { if u.Confirmed { tx.Model(&Address{}).Where(\\\"user_id = ?\\\", u.ID).Update(\\\"invalid\\\", false) } return } \"]},\"164\":{\"h\":\"3.4 查询\",\"t\":[\"查询时可用的 hook\",\"// 从 db 中加载数据 // Preloading (eager loading) AfterFind \",\"代码示例：\",\"func (u *User) AfterFind(tx *gorm.DB) (err error) { if u.MemberShip == \\\"\\\" { u.MemberShip = \\\"user\\\" } return } \"]},\"165\":{\"c\":[\"golang\"]},\"166\":{\"c\":[\"gorm\",\"golang\"]},\"167\":{\"h\":\"高级查询\"},\"168\":{\"h\":\"1. scope\",\"t\":[\"作用域允许你复用通用的逻辑，这种共享逻辑需要定义为类型func(*gorm.DB) *gorm.DB。\",\"例子：\",\"func Paginate(r *http.Request) func(db *gorm.DB) *gorm.DB { return func (db *gorm.DB) *gorm.DB { q := r.URL.Query() page, _ := strconv.Atoi(q.Get(\\\"page\\\")) if page == 0 { page = 1 } pageSize, _ := strconv.Atoi(q.Get(\\\"page_size\\\")) switch { case pageSize > 100: pageSize = 100 case pageSize <= 0: pageSize = 10 } offset := (page - 1) * pageSize return db.Offset(offset).Limit(pageSize) } } db.Scopes(Paginate(r)).Find(&users) db.Scopes(Paginate(r)).Find(&articles) \"]},\"169\":{\"h\":\"2. 智能选择字段\",\"t\":[\"type User struct { ID uint Name string Age int Gender string // 假设后面还有几百个字段... } type APIUser struct { ID uint Name string } // 查询时会自动选择 `id`, `name` 字段 db.Model(&User{}).Limit(10).Find(&APIUser{}) // SELECT `id`, `name` FROM `users` LIMIT 10 \"]},\"170\":{\"h\":\"3. 子查询\",\"t\":[\"db.Where(\\\"amount > (?)\\\", db.Table(\\\"orders\\\").Select(\\\"AVG(amount)\\\")).Find(&orders) // SELECT * FROM \\\"orders\\\" WHERE amount > (SELECT AVG(amount) FROM \\\"orders\\\"); \",\"from子查询\",\"db.Table(\\\"(?) as u\\\", db.Model(&User{}).Select(\\\"name\\\", \\\"age\\\")).Where(\\\"age = ?\\\", 18).Find(&User{}) // SELECT * FROM (SELECT `name`,`age` FROM `users`) as u WHERE `age` = 18 subQuery1 := db.Model(&User{}).Select(\\\"name\\\") subQuery2 := db.Model(&Pet{}).Select(\\\"name\\\") db.Table(\\\"(?) as u, (?) as p\\\", subQuery1, subQuery2).Find(&User{}) \"]},\"171\":{\"h\":\"4. 关联操作\",\"t\":[\"CREATE TABLE `gorm`.`user_profiles` ( `id` int(20) NOT NULL AUTO_INCREMENT, `sex` tinyint(4) NULL DEFAULT NULL, `age` int(10) NULL DEFAULT NULL, `user_id` int(20) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4; \",\"比如有一个用户属性表，查询用户的时候需要将其的性别和年龄查询出来：\",\"type UserProfile struct { ID int64 UserId int64 Sex int Age int } func (u UserProfile) TableName() string { return \\\"user_profiles\\\" } \",\"type User struct { ID int64 Username string `gorm:\\\"column:username\\\"` Password string `gorm:\\\"column:password\\\"` CreateTime int64 `gorm:\\\"column:createtime\\\"` UserProfile UserProfile } \",\"保存User\",\"var user = User{ Username: \\\"ms\\\", Password: \\\"ms\\\", CreateTime: time.Now().UnixMilli(), UserProfile: UserProfile{ Sex: 0, Age: 20, }, } DB.Save(&user) \",\"会产生两条sql，users表和user_profiles表都有数据\",\"这是因为默认的外键是结构体名字+下划线+id，即UserId或者表字段是user_id\",\"如果将user_profiles表中的user_id改为other_id就会失败。\",\"type User struct { ID int64 Username string `gorm:\\\"column:username\\\"` Password string `gorm:\\\"column:password\\\"` CreateTime int64 `gorm:\\\"column:createtime\\\"` UserProfile UserProfile `gorm:\\\"foreignKey:OtherId\\\"` } \",\"只要给UserProfile添加上相应的tag即可。\",\"关联标签\",\"标签\",\"描述\",\"foreignKey\",\"指定当前模型的列作为连接表的外键\",\"references\",\"指定引用表的列名，其将被映射为连接表外键\",\"polymorphic\",\"指定多态类型，比如模型名\",\"polymorphicValue\",\"指定多态值、默认表名\",\"many2many\",\"指定连接表表名\",\"joinForeignKey\",\"指定连接表的外键列名，其将被映射到当前表\",\"joinReferences\",\"指定连接表的外键列名，其将被映射到引用表\",\"constraint\",\"关系约束，例如：OnUpdate、OnDelete\"]},\"172\":{\"h\":\"4.1 查询\",\"t\":[\" var users []User err := DB.Preload(\\\"UserProfile\\\").Find(&users).Error fmt.Println(err) fmt.Println(users) \",\"Preload预加载，直接加载关联关系\",\"也可以使用joins进行加载关联数据：\",\" var users []User err := DB.Joins(\\\"UserProfile\\\").Find(&users).Error fmt.Println(err) fmt.Println(users) \",\"从sql中能看的出来，使用了left join。\",\"如果不想要User的数据，只想要关联表的数据，可以这么做：\",\" var user User DB.Where(\\\"id=?\\\", 25).Take(&user) var userProfile UserProfile err := DB.Model(&user).Association(\\\"UserProfile\\\").Find(&userProfile) fmt.Println(err) fmt.Println(userProfile) \"]},\"173\":{\"c\":[\"golang\"]},\"174\":{\"c\":[\"gorm\",\"golang\"]},\"175\":{\"h\":\"gorm\"},\"176\":{\"c\":[\"gorm\"]},\"177\":{\"h\":\"标准库\"},\"178\":{\"c\":[\"标准库\"]},\"179\":{\"h\":\"Context标准库\",\"t\":[\"tips\",\"context 翻译成中文是 上下文 的意思，它可以对 API 和进程之间传递截止日期、取消信号和其他请求范围的值。\",\"使用上下文的程序应遵循以下规则：\",\"保持包之间的接口一致\",\"不要在结构类型中存储上下文\",\"上下文应该是第一个参数，通常命名为ctx\",\"上下文值仅用于传输进程和API的请求范围数据，而不用于向函数传递可选参数\",\"context 是 Golang 开发常用的并发编程技术。\",\"提示\",\"Context 实际上只定义了接口，凡是实现该接口的类都可称为是一种 context，官方包实现了几个常用的context，分别可用于不同的场景。\"]},\"180\":{\"h\":\"1. context类型\"},\"181\":{\"h\":\"1.1 空 context\",\"t\":[\"context包中定义了一个空的context，名为emptyCtx，用于 context 的根节点，空的 context 只是简单的实现了 context，本身不包含任何值，仅用于其他 context 的父节点。\",\"type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key any) any { return nil } func (e *emptyCtx) String() string { switch e { case background: return \\\"context.Background\\\" case todo: return \\\"context.TODO\\\" } return \\\"unknown empty Context\\\" } \"]},\"182\":{\"h\":\"1.2 CancelFunc 类型原型\",\"t\":[\"// CancelFunc类型是一个停止工作的方法 // CancelFunc不会等待工作停止 // CancelFunc可以被多个goroutine同时调用, 在第一次调用之后, 对CancelFunc的后续调用什么也不做 type CancelFunc func() \"]},\"183\":{\"h\":\"1.3 Context 类型原型\",\"t\":[\"type Context interface { // Deadline返回的时间是代表该上下文所做的工作应该被取消的时间。如果没有设置截止日期，则返回ok==false。连续调用Deadline会返回相同的结果。 Deadline() (deadline time.Time, ok bool) // Done返回一个channel通道，该通道代表完成工作时关闭取消上下文。需要在 select-case 语句中使用, case <-context.Done(): // 如果上下文未关闭，Done返回nil。 // 当context关闭后, Done返回一个被关闭的通道, 关闭仍然是可读的, goroutine可以接收到关闭请求 // 连续调用Done将返回相同的值。Done通道的关闭可能会异步发生，当cancel函数返回。 // 参考 https://blog.golang.org/pipelines 更多的示例 Done() <-chan struct{} // 该方法描述 context 关闭的原因 // 如果Done未关闭，Err返回nil。 // 如果Done被关闭，Err返回一个非nil错误 Err() error // 该方法根据 key 值查询map中 value // Value返回与此上下文关联的Value for key，或nil 如果没有value与key相关联。连续调用Value相同的键返回相同的结果。 Value(key any) any } \",\"Context 一般携带一个截止日期、一个取消信号和其他跨越API边界的值。上下文的方法可以被多个 goroutine 同时调用。\"]},\"184\":{\"h\":\"1.4 Background() 方法原型\",\"t\":[\"var background = new(emptyCtx) func Background() Context{ return background } \",\"Background 函数返回一个非nil的空Context。它永远不会被取消，没有价值，也没有期限。它通常由主函数、初始化和测试使用，并作为传入请求的顶级上下文。\"]},\"185\":{\"h\":\"1.5 TODO() 方法原型\",\"t\":[\"var todo = new(emptyCtx) func TODO() Context { return todo } \",\"TODO 函数返回一个非nil的空Context。代码应该使用上下文。当不清楚要使用哪个Context或者它还不可用时(因为周围的函数还没有扩展到接受Context参数)。\"]},\"186\":{\"h\":\"1.6 WithValue() 方法原型\",\"t\":[\"func WithValue(parent Context, key, val any) Context \",\"WithValue 函数，返回父对象的副本，其中与键关联的值为val。\",\"上下文值只用于传递进程和api的请求范围内的数据，而不是传递可选参数给函数。\",\"提供的键必须具有可比性，不应该是string类型或任何其他内置类型，以避免使用上下文的包之间的冲突。使用WithValue的用户应该定义自己的键类型。在给接口{}赋值时，为了避免分配，上下文键通常有具体的类型struct{}。另外，导出的上下文关键变量的静态类型应该是指针或接口。\",\"这个例子演示了使用 context.WithValue()函数，如何将值传递给上下文，以及如果值存在，如何检索它\",\"package main import ( \\\"fmt\\\" \\\"context\\\" ) func main() { type favContextKey string f := func(ctx context.Context, k favContextKey) { if v := ctx.Value(k); v != nil { fmt.Println(\\\"found value:\\\", v) return } fmt.Println(\\\"key not found:\\\", k) } key1 := favContextKey(\\\"key1\\\") ctx := context.WithValue(context.Background(), key1, \\\"Golang\\\") f(ctx, key1) f(ctx, favContextKey(\\\"key2\\\")) } \"]},\"187\":{\"h\":\"2. context函数\"},\"188\":{\"h\":\"2.1 WithCancel() 函数原型\",\"t\":[\"func WithCancel(parent Context) (ctx Context, cancel CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } c := newCancelCtx(parent) propagateCancel(parent, &c) return &c, func() { c.cancel(true, Canceled) } } \",\"WithCancel 函数，返回带有新的 Done() 通道的父进程的副本。当返回的 cancel 函数被调用或父上下文的 Done() 通道被关闭时，返回上下文的 Done() 通道将被关闭，以哪个先发生为准。\",\"取消此上下文将释放与其关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel。\",\"示例\",\"。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func handelrequest(ctx context.Context) { go writeredis(ctx) go writedatabase(ctx) for { select { case <-ctx.Done(): fmt.Println(\\\"handelrequest done.\\\") return default: fmt.Println(\\\"handelrequest running\\\") time.Sleep(2 * time.Second) } } } func writeredis(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"writeredis done.\\\") return default: fmt.Println(\\\"writeredis running\\\") time.Sleep(2 * time.Second) } } } func writedatabase(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"writedatabase done.\\\") return default: fmt.Println(\\\"writedatabase running\\\") time.Sleep(2 * time.Second) } } } func main() { ctx, cancel := context.WithCancel(context.Background()) go handelrequest(ctx) time.Sleep(5 * time.Second) fmt.Println(\\\"it's time to stop all sub goroutines!\\\") cancel() //just for test whether sub goroutines exit or not time.Sleep(5 * time.Second) } \"]},\"189\":{\"h\":\"2.2 WithDeadline() 函数原型\",\"t\":[\"func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } if cur, ok := parent.Deadline(); ok && cur.Before(d) { // The current deadline is already sooner than the new one. return WithCancel(parent) } c := &timerCtx{ cancelCtx: newCancelCtx(parent), deadline: d, } propagateCancel(parent, c) dur := time.Until(d) if dur <= 0 { c.cancel(true, DeadlineExceeded) // deadline has already passed return c, func() { c.cancel(false, Canceled) } } c.mu.Lock() defer c.mu.Unlock() if c.err == nil { c.timer = time.AfterFunc(dur, func() { c.cancel(true, DeadlineExceeded) }) } return c, func() { c.cancel(true, Canceled) } } \",\"WithDeadline 函数，返回父上下文的一个副本，其截止日期调整为不迟于d。如果父上下文的截止日期已经早于d, WithDeadline(parent, d) 在语义上等价于parent。当截止日期到期、调用返回的 cancel 函数或父上下文的 Done() 通道被关闭时，返回上下文的Done通道将被关闭，以先发生的情况为准。\",\"取消此上下文将释放与其关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel。\",\"示例\",\"这个例子传递了一个带有任意截止日期的上下文，告诉阻塞函数一旦到达该时间就应该结束它的工作。\",\"package main import ( \\\"fmt\\\" \\\"context\\\" \\\"time\\\" ) const shortDuration = 1 * time.Millisecond func main() { d := time.Now().Add(shortDuration) ctx, cancel := context.WithDeadline(context.Background(), d) defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"在截止时间之后停止\\\") case <-ctx.Done(): fmt.Println(\\\"在截止时间停止\\\") } } \"]},\"190\":{\"h\":\"2.3 WithTimeout() 函数原型\",\"t\":[\"func WithTimeout(parent Context, timeout time.Duration) (context, CancelFunc) \",\"WithTimeout函数，返回 WithDeadline(parent, time.Now().add(timeout))\",\"取消这个上下文会释放与之相关的资源，所以只要在这个上下文中运行的操作完成，代码就应该调用cancel:\",\"func slowOperationWithTimeout(ctx context.Context) (Result, error) { ctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond) defer cancel() // 如果slowOperation在超时之前完成，则释放资源 return slowOperation(ctx) } \",\"示例\",\"这个例子传递了一个带有超时的上下文，告诉阻塞函数在超时过后应该放弃它的工作。\",\"package main import ( \\\"fmt\\\" \\\"context\\\" \\\"time\\\" ) const shortDuration = 1 * time.Millisecond func main() { ctx, cancel := context.WithTimeout(context.Background(), shortDuration) defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"在超时时间之后结束\\\") case <-ctx.Done(): fmt.Println(\\\"在超时时间结束\\\") } } \"]},\"191\":{\"c\":[\"golang\"]},\"192\":{\"c\":[\"标准库\",\"golang\"]},\"193\":{\"h\":\"I/O标准库\",\"t\":[\"tips\",\"io包中提供I/O原始操作的一系列接口。它主要包装了一些已有的实现，如 os 包中的那些，并将这些抽象成为实用性的功能和一些其他相关的接口。\"]},\"194\":{\"h\":\"1. 错误变量\",\"t\":[\"var EOF = errors.New(“EOF”) 正常输入结束Read返回EOF，如果在一个结构化数据流中EOF在不期望的位置出现了，则应返回错误ErrUnexpectedEOF或者其它给出更多细节的错误。\",\"var ErrClosedPipe = errors.New(“io: read/write on closed pipe”) 当从一个已关闭的Pipe读取或者写入时，会返回ErrClosedPipe。\",\"var ErrNoProgress = errors.New(“multiple Read calls return no data or error”) 某些使用io.Reader接口的客户端如果多次调用Read都不返回数据也不返回错误时，就会返回本错误，一般来说是io.Reader的实现有问题的标志。\",\"var ErrShortBuffer = errors.New(“short buffer”) ErrShortBuffer表示读取操作需要大缓冲，但提供的缓冲不够大。\",\"var ErrShortWrite = errors.New(“short write”) ErrShortWrite表示写入操作写入的数据比提供的少，却没有显式的返回错误。\",\"var ErrUnexpectedEOF = errors.New(“unexpected EOF”) ErrUnexpectedEOF表示在读取一个固定尺寸的块或者数据结构时，在读取未完全时遇到了EOF。\"]},\"195\":{\"h\":\"2. 基础接口\"},\"196\":{\"h\":\"2.1 Reader接口\",\"t\":[\"type Reader interface { Read(p []byte) (n int, err error) } \",\"Read 将 len个字节读取到 p 中。它返回读取的字节数 n（0 <= n <= len）以及任何遇到的错误。即使 Read 返回的 n < len，它也会在调用过程中使用 p的全部作为暂存空间。若一些数据可用但不到 len 个字节，Read 会照例返回可用的东西，而不是等待更多。\",\"当 Read 在成功读取 n > 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数，可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。\",\"调用者应当总在考虑到错误 err 前处理 n > 0 的字节。这样做可以在读取一些字节，以及允许的 EOF 行为后正确地处理I/O错误。\",\"Read 的实现会阻止返回零字节的计数和一个 nil 错误，调用者应将这种情况视作空操作。\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func main() { f, err := os.Open(\\\"a.txt\\\") if err != nil { fmt.Printf(\\\"err: %v\\\\n\\\", err) return } defer f.Close() buf := make([]byte, 12) // 实例化一个长度为4的[]byte for { n, err2 := f.Read(buf) // 将内容读至buf if n == 0 || err2 == io.EOF { fmt.Println(\\\"文件以读取完毕\\\") break } fmt.Println(string(buf[:n])) } } \",\"其中a.txt内容为：\",\" hello world \"]},\"197\":{\"h\":\"2.2 Writer接口\",\"t\":[\"type Writerinterface { Write(p []byte) (n int, err error) } \",\"Write 将 len个字节从 p 中写入到基本数据流中。它返回从 p 中被写入的字节数n（0 <= n <= len）以及任何遇到的引起写入提前停止的错误。若 Write 返回的n < len，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。\",\"实例演示：\",\"package main import ( \\\"os\\\" ) func main() { f, _ := os.OpenFile(\\\"a.txt\\\", os.O_RDWR|os.O_APPEND, 0775) // 以读写模式打开文件，并且在写操作时将数据附加到文件尾部 f.Write([]byte(\\\" hello golang\\\")) f.Close() } \",\"a.txt内容更新为：\",\" hello world hello golang \",\"其中a.txt初始内容为：\",\" hello world \"]},\"198\":{\"h\":\"2.3 Seeker接口\",\"t\":[\"type Seeker interface { Seek(offset int64, whence int) (int64, error) } \",\"Seeker 用来移动数据的读写指针\",\"Seek 设置下一次读写操作的指针位置，每次的读写操作都是从指针位置开始的\",\"whence 的含义：\",\"如果 whence 为 0：表示从数据的开头开始移动指针\",\"如果 whence 为 1：表示从数据的当前指针位置开始移动指针\",\"如果 whence 为 2：表示从数据的尾部开始移动指针\",\"offset 是指针移动的偏移量\",\"返回移动后的指针位置和移动过程中遇到的任何错误\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" ) func main() { f, _ := os.Open(\\\"a.txt\\\") // 打开文件后，光标默认在文件开头 f.Seek(3, 0) // 从索引值为3处开始读 buf := make([]byte, 10) // 设置缓冲区 n, _ := f.Read(buf) // 将内容读到缓冲区内 fmt.Printf(\\\"n: %v\\\\n\\\", n) fmt.Printf(\\\"string(buf): %v\\\\n\\\", string(buf)) f.Close() } \",\"其中a.txt内容为：\",\" hello world \"]},\"199\":{\"h\":\"2.4 Closer接口\",\"t\":[\"type Closer interface { Close() error } \",\"Closer关闭的接口, 带有Close() 方法， 但是行为没有定义，所以 可以特定行为来实现 在整个标准库内都没有对Closer的引用，只有实现，用法都是开启某某连接/流，在用完/报错后在进行Close的操作。\"]},\"200\":{\"h\":\"3. 组合接口\",\"t\":[\"组合接口是对多个接口进行了组合，当同时实现多个接口时，可以使用组合接口进行传递\"]},\"201\":{\"h\":\"3.1 ReadWriter接口\",\"t\":[\"type ReadWriter interface { Reader Writer } \",\"ReadWriter接口聚合了基本的读写操作。\"]},\"202\":{\"h\":\"3.2 ReadCloser接口\",\"t\":[\"type ReadCloser interface { Reader Closer } \",\"ReadCloser就是Reader+Closer，例如在ioutil中的NopCloser方法返回的就是一个ReadCloser，但是里面的Close就是个空函数，毫无作用。\"]},\"203\":{\"h\":\"3.3 WriteCloser接口\",\"t\":[\"type WriteCloser interface { Writer Closer } \",\"WriteCloser接口聚合了基本的写入和关闭操作。\"]},\"204\":{\"h\":\"3.4 ReadWriteCloser接口\",\"t\":[\"type ReadWriteCloser interface { Reader Writer Closer } \",\"ReadWriteCloser接口聚合了基本的读写和关闭操作。\"]},\"205\":{\"h\":\"3.5 ReadSeeker接口\",\"t\":[\"type ReadSeeker interface { Reader Seeker } \",\"ReadSeeker接口聚合了基本的读取和移位操作。\"]},\"206\":{\"h\":\"3.6 WriteSeeker接口\",\"t\":[\"type WriteSeeker interface { Writer Seeker } \",\"WriteSeeker接口聚合了基本的写入和移位操作。\"]},\"207\":{\"h\":\"3.7 ReadWriteSeeker接口\",\"t\":[\"type ReadWriteSeeker interface { Reader Writer Seeker } \",\"ReadWriteSeeker接口聚合了基本的读写和移位操作\"]},\"208\":{\"h\":\"4. 指定读写器读写接口\"},\"209\":{\"h\":\"4.1 ReaderFrom接口\",\"t\":[\"type ReaderFrom interface { ReadFrom(r Reader) (n int64, err error) } \",\"ReadFrom 从 r 中读取数据到对象的数据流中 直到 r 返回 EOF 或 r 出现读取错误为止 返回值 n 是读取的字节数 返回值 err 就是 r 的返回值 err\"]},\"210\":{\"h\":\"4.2 WriterTo接口\",\"t\":[\"type WriterTo interface { WriteTo(w Writer) (n int64, err error) } \",\"WriterTo 将对象的数据流写入到 w 中 直到对象的数据流全部写入完毕或遇到写入错误为止 返回值 n 是写入的字节数 返回值 err 就是 w 的返回值 err\"]},\"211\":{\"h\":\"5. 指定偏移量读写接口\"},\"212\":{\"h\":\"5.1 ReaderAt接口\",\"t\":[\"type ReaderAt interface { ReadAt(p []byte, off int64) (n int, err error) } \",\"ReadAt 从对象数据流的 off 处读出数据到 p 中\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始读取\",\"如果对象的数据流只有部分可用，不足以填满 p则 ReadAt 将等待所有数据可用之后，继续向 p 中写入直到将 p 填满后再返回，在这点上 ReadAt 要比 Read 更严格\",\"返回读取的字节数 n 和读取时遇到的错误\",\"如果 n < len，则需要返回一个 err 值来说明为什么没有将 p 填满（比如 EOF）\",\"如果 n > len，而且对象的数据没有全部读完，则err 将返回 nil\",\"如果 n = len，而且对象的数据刚好全部读完，则err 将返回 EOF 或者 nil（不确定）\"]},\"213\":{\"h\":\"5.2 WriterAt接口\",\"t\":[\"type WriterAt interface { WriteAt(p []byte, off int64) (n int, err error) } \",\"WriteAt 将 p 中的数据写入到对象数据流的 off 处\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始写入\",\"返回写入的字节数和写入时遇到的错误\",\"如果 n < len，则必须返回一个 err 值来说明为什么没有将 p 完全写入\"]},\"214\":{\"h\":\"6. 单个字节读写接口\"},\"215\":{\"h\":\"6.1 ByteReader接口\",\"t\":[\"type ByteReader interface { ReadByte() (byte, error) } \",\"ByteReader是基本的ReadByte方法的包装。 ReadByte读取输入中的单个字节并返回。如果没有字节可读取，会返回错误。\"]},\"216\":{\"h\":\"6.2 ByteScanner接口\",\"t\":[\"type ByteScanner interface { ByteReader UnreadByte() error } \",\"ByteScanner接口在基本的ReadByte方法之外还添加了UnreadByte方法。\",\"UnreadByte方法让下一次调用ReadByte时返回之前调用ReadByte时返回的同一个字节。连续调用两次UnreadByte方法而中间没有调用ReadByte时，可能会导致错误。\"]},\"217\":{\"h\":\"6.3 ByteWriter接口\",\"t\":[\"type ByteWriter interface { WriteByte(c byte) error } \",\"包装 WriteByte 单个字节写入方法的接口\"]},\"218\":{\"h\":\"6.4 RuneReader接口\",\"t\":[\"type RuneReader interface { ReadRune() (r rune, size int, err error) } \",\"ReadRune 方法的包装，读取单个UTF-8编码的Unicode字符，并返回rune及其字节大小。如果没有可用字符，将设置err\"]},\"219\":{\"h\":\"6.5 RuneScanner接口\",\"t\":[\"type RuneScanner interface { RuneReader UnreadRune() error } \",\"RuneScanner接口在基本的ReadRune方法之外还添加了UnreadRune方法。\",\"UnreadRune方法让下一次调用ReadRune时返回之前调用ReadRune时返回的同一个utf-8字符。连续调用两次UnreadRune方法而中间没有调用ReadRune时，可能会导致错误。\"]},\"220\":{\"h\":\"6.6 StringWriter接口\",\"t\":[\"type StringWriter interface { WriteString(s string) (n int, err error) } \",\"字符串写入方法WriteString的包装\"]},\"221\":{\"h\":\"7. 结构体\"},\"222\":{\"h\":\"7.1 LimitedReader\",\"t\":[\"type LimitedReader struct { R Reader // underlying reader N int64 // max bytes remaining } \",\"LimitedReader从R读取，但将返回的数据量限制为N个字节。每次读取更新N以标记剩余可以读取的字节数。Read在N<=0时或基础R返回EOF时返回EOF。\",\"具体实现方法为：func LimitReader(r Reader, n int64) Reader\"]},\"223\":{\"h\":\"7.2 PipeReader\",\"t\":[\"type PipeReader struct { // 内含隐藏或非导出字段 } \",\"PipeReader是一个管道的读取端。\",\"具体实现方法有：\",\"func (r *PipeReader) Read(data []byte) (n int, err error) Read实现了标准的读取接口：它从管道中读取数据，阻塞直到写入端到达或写入端被关闭。如果用错误关闭写入端，则返回错误为ERR；否则ERR为EOF。\",\"func (r *PipeReader) Close() error Close关闭读取器；关闭后如果对管道的写入端进行写入操作，就会返回(0, ErrClosedPip)。\",\"func (r *PipeReader) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Write时返回的错误改为err。\"]},\"224\":{\"h\":\"7.3 PipeWriter\",\"t\":[\"type PipeWriter struct { // 内含隐藏或非导出字段 } \",\"PipeWriter是一个管道的写入端。 具体实现方法有：\",\"func (w *PipeWriter) Write(data []byte) (n int, err error) Write实现了标准的写接口：它将数据写入管道，直到一个或多个读取端消耗完所有数据或读取端关闭为止。如果以错误关闭读取端，则该错误将作为ERR返回；否则ERR将为ErrClosedPipe。\",\"func (w *PipeWriter) Close() error Close关闭写入器；关闭后如果对管道的读取端进行读取操作，就会返回(0, EOF)。\",\"func (w *PipeWriter) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Read时返回的错误改为err。\",\"注：以上两个结构体PipeWriter与PipeReader是结合使用的需要用Pipe()方法进行创建。\"]},\"225\":{\"h\":\"7.4 SectionReader\",\"t\":[\"type SectionReader struct { // contains filtered or unexported fields } \",\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。 具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法 func (*SectionReader) Size\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"226\":{\"h\":\"8. 供外部调用的函数\"},\"227\":{\"h\":\"8.1 Copy\",\"t\":[\"func Copy(dst Writer, src Reader) (written int64, err error) \",\"将副本从src复制到dst，直到在src上达到EOF或发生错误。它返回复制的字节数和复制时遇到的第一个错误（如果有）。 成功的复制将返回err == nil而不是err == EOF。因为复制被定义为从src读取直到EOF，所以它不会将读取的EOF视为要报告的错误。 如果src实现WriterTo接口，则通过调用src.WriteTo（dst）实现该副本。否则，如果dst实现了ReaderFrom接口，则通过调用dst.ReadFrom（src）实现该副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") if _, err := io.Copy(os.Stdout, r); err != nil { // os.Stdout将内容输出到控制台 log.Fatal(err) // log.Fatal函数完成： // 1. 打印输出err // 2. 退出应用程序 } } \"]},\"228\":{\"h\":\"8.2 CopyBuffer\",\"t\":[\"func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) \",\"CopyBuffer与Copy相同，区别在于CopyBuffer逐步遍历提供的缓冲区（如果需要），而不是分配临时缓冲区。如果buf为nil，则分配一个；如果长度为零，则CopyBuffer会panic报错。 如果src实现WriterTo或dst实现ReaderFrom，则buf将不用于执行复制。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader\\\\n\\\") r2 := strings.NewReader(\\\"second reader\\\\n\\\") buf := make([]byte, 8) // buf is used here... if _, err := io.CopyBuffer(os.Stdout, r1, buf); err != nil { log.Fatal(err) } // ... reused here also. No need to allocate an extra buffer. if _, err := io.CopyBuffer(os.Stdout, r2, buf); err != nil { log.Fatal(err) } } \"]},\"229\":{\"h\":\"8.3 CopyN\",\"t\":[\"func CopyN(dst Writer, src Reader, n int64) (written int64, err error) \",\"CopyN将n个字节（或直到出错）从src复制到dst。它返回复制的字节数以及复制时遇到的最早错误。返回时，只有err == nil时，writte == n。 如果dst实现了ReaderFrom接口，则使用该接口实现副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\") if _, err := io.CopyN(os.Stdout, r, 4); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"230\":{\"h\":\"8.4 LimitReader\",\"t\":[\"func LimitReader(r Reader, n int64) Reader \",\"LimitedReader从r读取，但将返回的数据量限制为n个字节。每次读取更新n以标记剩余可以读取的字节数。Read在n<=0时或基础r返回EOF时返回EOF。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") lr := io.LimitReader(r, 4) if _, err := io.Copy(os.Stdout, lr); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"231\":{\"h\":\"8.5 MultiReader\",\"t\":[\"func MultiReader(readers ...Reader) Reader \",\"MultiReader返回一个Reader，它是所提供的输入阅读器的逻辑串联。它们被顺序读取。一旦所有输入均返回EOF，读取将返回EOF。如果任何读取器返回非零，非EOF错误，则Read将返回该错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader \\\") r2 := strings.NewReader(\\\"second reader \\\") r3 := strings.NewReader(\\\"third reader\\\\n\\\") r := io.MultiReader(r1, r2, r3) if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"first reader second reader third reader \"]},\"232\":{\"h\":\"8.6 MultiWriter\",\"t\":[\"func MultiWriter(writers ...Writer) Writer \",\"MultiWriter创建一个Writers，将其写入复制到所有提供的写入器中，类似于Unix tee（1）命令。 每个写入一次写入每个列出的写入器。如果列出的写程序返回错误，则整个写操作将停止并返回错误；它不会在列表中继续下去。\",\"官方示例：\",\"package main import ( \\\"bytes\\\" \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") var buf1, buf2 bytes.Buffer w := io.MultiWriter(&buf1, &buf2) if _, err := io.Copy(w, r); err != nil { log.Fatal(err) } fmt.Print(buf1.String()) fmt.Print(buf2.String()) } \"]},\"233\":{\"h\":\"8.7 Pipe\",\"t\":[\"func Pipe() (*PipeReader, *PipeWriter) \",\"Pipe创建一个同步的内存管道。 可用于连接期望io.Reader的代码和期望io.Writer的代码。\",\"管道上的读和写是一对一匹配的，除非需要多次读取才能使用单次写入。也就是说，每次对PipeWriter的写入都将阻塞，直到它满足从PipeReader读取的一个或多个读取，这些读取会完全消耗已写入的数据。\",\"数据直接从Write复制到相应的Read (或Reads)；没有内部缓冲。 对读的并行调用和对写的并行调用也是安全的：单个调用将按顺序执行。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { r, w := io.Pipe() go func() { fmt.Fprint(w, \\\"some io.Reader stream to be read\\\\n\\\") w.Close() }() if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果\",\"some io.Reader stream to be read \"]},\"234\":{\"h\":\"8.8 ReadAll\",\"t\":[\"func ReadAll(r Reader) ([]byte, error) \",\"ReadAll从r读取，直到出现错误或EOF，并返回其读取的数据。成功的调用返回errnil，而不是errEOF。由于ReadAll定义为从src读取直到EOF，因此它不会将读取的EOF视为要报告的错误。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"Go is a general-purpose language designed with systems programming in mind.\\\") b, err := io.ReadAll(r) if err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\", b) } \"]},\"235\":{\"h\":\"8.9 ReadAtLeast\",\"t\":[\"func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error) \",\"ReadAtLeast从r读取到buf，直到它至少读取了min字节。它返回复制的字节数n，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取少于最小字节后发生EOF，则ReadAtLeast返回ErrUnexpectedEOF。如果min大于buf的长度，则ReadAtLeast返回ErrShortBuffer。返回时，当且仅当err == nil时，n> = min。\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 14) if _, err := io.ReadAtLeast(r, buf, 4); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // buffer smaller than minimal read size. shortBuf := make([]byte, 3) if _, err := io.ReadAtLeast(r, shortBuf, 4); err != nil { fmt.Println(\\\"error:\\\", err) } // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadAtLeast(r, longBuf, 64); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"236\":{\"h\":\"8.10 ReadFull\",\"t\":[\"func ReadFull(r Reader, buf []byte) (n int, err error) \",\"ReadFull将r中的len（buf）个字节准确地读取到buf中。它返回复制的字节数，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取了一些但不是全部字节后发生EOF，则ReadFull返回ErrUnexpectedEOF。返回时，当且仅当err == nil时，n == len（buf）。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 4) if _, err := io.ReadFull(r, buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadFull(r, longBuf); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"237\":{\"h\":\"8.11 SectionReader\",\"t\":[\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。\",\"具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"238\":{\"h\":\"8.11.1 NewSectionReader\",\"t\":[\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader \",\"NewSectionReader返回一个SectionReader，它从r开始读取偏移量off，并在n个字节后以EOF停止。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \"]},\"239\":{\"h\":\"8.11.2 SectionReader.Read\",\"t\":[\"func (s *SectionReader) Read(p []byte) (n int, err error) \",\"实现了接口Reader的Read方法\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 9) if _, err := s.Read(buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"240\":{\"h\":\"8.11.3 SectionReader.ReadAt\",\"t\":[\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) \",\"实现了接口ReaderAt的ReadAt方法\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 6) if _, err := s.ReadAt(buf, 10); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"241\":{\"h\":\"8.11.4 SectionReader.Seek\",\"t\":[\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) \",\"实现了接口Seeker的Seek方法\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := s.Seek(10, io.SeekStart); err != nil { log.Fatal(err) } if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \",\"可以看的出来SectionReader是根据ReaderAt实现的，而非Seeker，虽然两者的效果很像，但是ReaderAt读取内容是无视Seeker偏移量的。且在读取数据大小上ReadAt是要比Read严格的，同样的Bytes在Read上即使设大了也会没事，但在ReadAt会报错。\"]},\"242\":{\"h\":\"8.11.5 SectionReader.Size\",\"t\":[\"func (s *SectionReader) Size() int64 \",\"Size返回以字节为单位的片段大小。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) fmt.Println(s.Size()) } \"]},\"243\":{\"h\":\"8.12 TeeReader\",\"t\":[\"func TeeReader(r Reader, w Writer) Reader \",\"TeeReader返回一个Reader，该Reader向w写入从r读取的内容。通过r执行的所有r读取均与对w的相应写入匹配。没有内部缓冲-写入必须在读取完成之前完成。写入时遇到的任何错误均报告为读取错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { var r io.Reader = strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") r = io.TeeReader(r, os.Stdout) // Everything read from r will be copied to stdout. if _, err := io.ReadAll(r); err != nil { log.Fatal(err) } } \"]},\"244\":{\"h\":\"8.13 WriteString\",\"t\":[\"func WriteString(w Writer, s string) (n int, err error) \",\"WriteString将字符串s的内容写入w，w接受字节片。如果w实现StringWriter，则直接调用其WriteString方法。否则，w.Write只调用一次。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { if _, err := io.WriteString(os.Stdout, \\\"Hello World\\\"); err != nil { log.Fatal(err) } } \"]},\"245\":{\"c\":[\"golang\"]},\"246\":{\"c\":[\"标准库\",\"golang\"]},\"247\":{\"h\":\"Runtime标准库\",\"t\":[\"tips\",\"runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。\"]},\"248\":{\"h\":\"1. 环境变量\",\"t\":[\"环境变量GOGC设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。runtime/debug包的SetGCPercent函数允许在运行时修改该百分比。\",\"环境变量GODEBUG控制运行时的debug输出。GODEBUG的值是逗号分隔的name=val对。支持的name如下：\",\"allocfreetrace\",\"设置其为1，会导致每次分配都会记录每一个对象的分配、释放及其堆栈踪迹。\",\"efence\",\"设置其为1，会导致分配器运行模式为：每个对象申请在独立的页和地址，且永不循环利用\",\"gctrace\",\"设置其为1，会导致每次垃圾回收器触发一行日志，包含内存回收的概要信息和暂停的时间。设置其为2，会写入同样的概述，但会重复收集。\",\"gcdead\",\"设置其为1，会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈\",\"schedtrace\",\"设置其为X，会导致调度程序每隔X毫秒输出单行信息到标准错误输出\",\"scheddetail\",\"设置schedtrace为X并设置其为1，会导致调度程序每隔X毫秒输出详细的多行信息，描述调度、进程、线程和go程的状态\",\"环境变量GOMAXPROCS限制可以同时运行用户层次的go代码的操作系统进程数。没有对代表go代码的、可以在系统调用中阻塞的go程数的限制；那些阻塞的goroutine不与GOMAXPROCS限制冲突。本包的GOMAXPROCS函数可以查询和修改该限制。\",\"环境变量GOTRACEBACK控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出。失败的程序默认会打印所有现存go程的堆栈踪迹（省略运行时系统中的函数），然后以状态码2退出。如果GOTRACEBACK为0，会完全忽略所有go程的堆栈踪迹。如果GOTRACEBACK为1，会采用默认行为。如果GOTRACEBACK为2，会打印所有现存go程包括运行时函数的堆栈踪迹。如果GOTRACEBACK为crash，会打印所有现存go程包括运行时函数的堆栈踪迹，并且如果可能会采用操作系统特定的方式崩溃，而不是退出。例如，在Unix系统里，程序会释放SIGABRT信号以触发核心信息转储。\",\"环境变量GOARCH、GOOS、GOPATH和GOROOT构成完整的go环境变量集合。它们影响go程序的构建, GOARCH、GOOS和GOROOT在编译时被记录并可用本包的常量和函数获取，但它们不会影响运行时环境\",\"gctrace 每一行打印的日志格式如下：\",\"gc {0} @{1}s {2}%: {3}+...+{4} ms clock, {5}+...+{6} ms cpu, {7}->{8}->{9} MB, {10} MB goal, {11} P \",\"每一个变量的具体定义：\",\"{0}: gc 运行次数\",\"{1}: 程序已运行的时间\",\"{2}: gc 占用的 CPU 百分比\",\"{3}: 执行时间，包括程序延迟和资源等待\",\"{4}: 也是执行时间, 一般看这个\",\"{5}: CPU clock\",\"{6}: CPU clock\",\"{7}: GC 启动前的堆内存\",\"{8}: GC 运行后的堆内存\",\"{9}: 当前堆内存\",\"{10}: GC 目标\",\"{11}: 进程数\",\"下面是一块存在内存泄露的代码段：\",\"package main import ( \\\"os\\\" \\\"os/signal\\\" ) func main() { go func() { m := make(map[int]int) for i := 0; ; i++ { m[i] = i } }() sig := make(chan os.Signal, 1) signal.Notify(sig) <-sig } \",\"执行 GODEBUG=gctrace=1 go run main.go, 查看运行时的内存情况：\",\"可以看到程序在运行过程中， 每次 GC，堆内存都在不断增大， 这是一个很明显的内存泄露场景。\"]},\"249\":{\"h\":\"2. runtime.Gosched\",\"t\":[\"让出CPU时间片，重新等待安排任务\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { go func(s string) { for i :=0; i < 2; i++ { fmt.Println(s) runtime.Gosched() // 让出CPU时间片，重新等带安排任务 } }(\\\"world\\\") for i := 0; i < 2; i++ { fmt.Println(\\\"hello\\\") runtime.Gosched() // 让出CPU时间片，重新等待安排任务 } } \"]},\"250\":{\"h\":\"3. runtime.Goexit\",\"t\":[\"退出当前协程\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" \\\"sync\\\" ) var wg sync.WaitGroup func main() { wg.Add(1) go func() { defer wg.Done() defer fmt.Println(\\\"A.defer\\\") func() { defer fmt.Println(\\\"B.defer\\\") // 结束协程 runtime.Goexit() defer fmt.Println(\\\"C.defer\\\") fmt.Println(\\\"B\\\") }() fmt.Println(\\\"A\\\") }() wg.Wait() // 主goroutine等待子goroutine结束，主在结束 } \"]},\"251\":{\"h\":\"4. runtime.GOMAXPROCS\",\"t\":[\"Go运行时调度器使用runtime.GOMAXPROCS参数来确定需要使用多少个os线程来同时执行go代码, 默认值是机器上的CPU核心数量，例如一个8核心的机器上，调度器会把go代码同时调度到8个os线程上\",\"go语言中可以通过runtime.GOMAXPROCS()函数来设置当前程序并发时占用的CPU逻辑核心数 go1.5版本之前默认使用的是单核心执行，1.5之后默认使用全部的cpu逻辑核心数\",\"我们可以通过将任务分配到不同的CPU逻辑核心上，从而实现并行的效果 :\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" \\\"sync\\\" \\\"time\\\" ) var wg sync.WaitGroup func a() { defer wg.Done() for i := 0; i < 100000000; i++ { //fmt.Println(\\\"A\\\", i) } } func b() { defer wg.Done() for i := 0; i < 100000000; i++ { //fmt.Println(\\\"B\\\", i) } } func main() { startTime := time.Now() //runtime.GOMAXPROCS(1) // 设置go运行时(runtime)的os线程数 // runtime.GOMAXPROCS设置为1os线程数时执行时间要比4os线程数用时更长 runtime.GOMAXPROCS(4) // 设置go运行时(runtime)的os线程数 wg.Add(1) go a() wg.Add(1) go b() wg.Add(1) go a() wg.Add(1) go b() wg.Wait() fmt.Println(time.Now().Sub(startTime)) } \"]},\"252\":{\"h\":\"5. runtime.NumCPU\",\"t\":[\"返回当前系统的 CPU 核数量\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { fmt.Println(\\\"cpus:\\\", runtime.NumCPU()) } \"]},\"253\":{\"h\":\"6. runtime.GOOS\",\"t\":[\"目标操作系统\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { fmt.Println(\\\"archive:\\\", runtime.GOOS) } \"]},\"254\":{\"c\":[\"golang\"]},\"255\":{\"c\":[\"标准库\",\"golang\"]},\"256\":{\"h\":\"已整理的杂记\"},\"257\":{\"h\":\"数据库\"},\"258\":{\"h\":\"概述\"},\"259\":{\"h\":\"术语\",\"t\":[\"DBMS 是数据库管理系统的简称。\",\"数据库 是长期储存在计算机内、有组织、可共享的大量数据的集合。\",\"数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。\",\"数据库系统 由数据库、DBMS、应用程序和数据库管理员组成。\",\"数据模型 是用来对现实世界抽象的工具，用于数据建模，描述数据与数据之间的关系。\",\"由三部分（具体见下方三要素）组成： 数据结构，数据操作，数据完整性约束。\",\"数据库模式 描述了数据库中数据的组织方式和特征。\",\"对于关系数据库而言，数据库模式由一组关系模式构成。\",\"数据字典 数据字典是DBMS维护的一系列内部表，用来存放元数据。\"]},\"260\":{\"h\":\"DBMS的主要功能\",\"t\":[\"数据定义。\",\"数据组织，存储和管理功能。\",\"数据操纵\",\"数据事务管理和运行管理\",\"数据库的建立和维护\"]},\"261\":{\"h\":\"使用数据库进行信息化管理有哪些好处？\",\"t\":[\"数据库整体结构化\",\"数据可以充分共享\",\"数据具有独立性\",\"数据标准化\",\"数据由DBMS统一管理和控制，使得系统能够为数据管理提供更多支持。\"]},\"262\":{\"h\":\"数据模型的三个基本要素是\",\"t\":[\"数据结构 描述数据库的对象和对象之间的联系，是对数据的静态描述。关系模型只有关系一种数据结构。\",\"数据操作 数据库中各种对象允许的操作和操作规则，是对系统的动态描述，定义数据操作的方法有两种：关系代数和关系演算。\",\"完整性约束 关系模型的完整性约束包括实体完整性，参照完整性和用户定义的完整性约束。\"]},\"263\":{\"h\":\"数据库系统的三级模式结构\",\"t\":[\"外模式 也称为用户模式，是用户或应用程序能够看到和访问的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图。\",\"概念模式(模式) 是数据库中全体数据的逻辑结构和特性的描述，是所有用户的公共视图。\",\"内模式 是数据在数据库的内部表示，对数据的索引方式，物理结构和存储方式的描述\"]},\"264\":{\"h\":\"什么是二级映像\",\"t\":[\"三个模式之间的转换\",\"外模式/模式映像\",\"模式/内模式映像\"]},\"265\":{\"h\":\"物理独立性和逻辑独立性\",\"t\":[\"物理独立性 用户的应用程序与数据库的物理存储结构无关，内模式改变后只需要对模式/内模式映像进行修改，而不用修改应用程序。\",\"逻辑独立性 用户的应用程序和数据库的逻辑结构无关，当模式改变时只需要改变模式/外模型映像即可。\"]},\"266\":{\"h\":\"DBA的主要职责\",\"t\":[\"决定数据库中的信息内容和数据的逻辑结构。\",\"决定数据库的存储结构和存取策略。\",\"定义数据的安全性要求和完整性约束条件。\",\"数据库的日常维护。\"]},\"267\":{\"h\":\"关系数据库\",\"t\":[\"关系 一张二维表，表名就是关系名。\",\"属性 二维表中的列\",\"元组 二维表中的一行\",\"关系模式 对关系的描述\",\"候选码 一个属性集的值可唯一标识一个关系的元素，又不含多余的属性。\",\"主码 关系模式中候选码中选取的一个作为主码。\",\"主属性 包含在任意候选码中的属性。\",\"非主属性 不包含在任意候选码中的属性。\",\"外键 关系模式R中的属性K是其他关系模式的主键，则称K是R的外键。\"]},\"268\":{\"h\":\"实体完整性与参照完整性的规则\",\"t\":[\"实体完整性 关系中元组在组成主键的属性上不能有空值。\",\"参照完整性 要么取空值，要么取参照表中某个元组的主码值。\"]},\"269\":{\"h\":\"自然连接和等值连接的异同\",\"t\":[\"两个都是常用的连接。自然连接是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉。\"]},\"270\":{\"h\":\"完整性约束的作用\",\"t\":[\"保护数据的一致性和准确性\",\"提高数据库的安全性和完整性\"]},\"271\":{\"h\":\"SQL\"},\"272\":{\"h\":\"SQL的基本特点\",\"t\":[\"综合统一\",\"高度非过程化 只需要支持要做什么，不需要指出怎么做。\",\"面向集合的操作方式\",\"语言灵活，功能强大\"]},\"273\":{\"h\":\"SQL的基本功能\",\"t\":[\"定义模式\",\"CRUD\",\"定义视图\",\"定义完整性约束条件\",\"授权\",\"事务\"]},\"274\":{\"h\":\"SQL定义语言DD(Define)L包括\",\"t\":[\"模式，表，视图，域，断言的定义，修改，删除\",\"授权的定义和回收\"]},\"275\":{\"h\":\"什么是存储过程\",\"t\":[\"一组为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户通过指定存储过程的名字并给出参数(如果需要参数)来执行它。\",\"一个业务同时对多个表进行操作，可以考虑使用存储过程。\",\"多条件多表联合查询。\"]},\"276\":{\"h\":\"基本表，视图的区别和联系。\",\"t\":[\"基本表 本身存在的表\",\"视图 从一个或几个基本表导出的表是一个虚表。\",\"联系 所有视图都是直接或间接的由基本表定义的。\",\"区别 视图并不存储数据\"]},\"277\":{\"h\":\"视图的优点\",\"t\":[\"简化用户操作。\",\"可以让用户从多种角度来看同一组数据。\",\"提供了一定程度的逻辑独立性。\",\"提高数据的安全性。\"]},\"278\":{\"h\":\"嵌入式SQL\",\"t\":[\"将sql嵌入到变成语言中\",\"SQL只能表达常见的查询，但是不能表达所有的查询。\",\"一些非数据库操作，如文件操作，网络操作等，不能直接用SQL表达。\"]},\"279\":{\"h\":\"相关子查询和不相关子查询\",\"t\":[\"子条件查询不依赖父查询，称为不相关子查询。 子条件查询依赖父查询，称为相关子查询。\"]},\"280\":{\"h\":\"游标\",\"t\":[\"游标是系统为用户开放的缓冲区,用于存放SQL语句的执行结果。 游标通常用于遍历查询结果集，允许应用程序逐行处理查询结果。\",\"游标的作用包括：\",\"逐行处理数据：游标允许程序逐行访问查询结果集中的数据，这对于需要逐行处理数据的情况非常有用，比如在编写存储过程或批处理作业时。\",\"定位和导航：游标提供了定位和导航查询结果集的能力，允许程序员在结果集中移动到特定的行或记录。\",\"数据检索：通过游标，可以在结果集中检索数据，以便在应用程序中进行处理、分析或展示。\",\"数据更新：游标还可以用于在结果集中更新、删除或插入数据，允许应用程序对查询结果进行修改。\",\"游标操作通常比批量操作效率低，且可能会引起性能问题。开发中尽量使用批操作来替代游标\"]},\"281\":{\"h\":\"完整性和安全性\"},\"282\":{\"h\":\"什么是数据库的完整性？安全性？\",\"t\":[\"完整性 数据库的完整性是指数据的正确性和相容性。\",\"安全性 保护数据库防止不合法的使用所造成的数据泄露、更改、破坏等。\"]},\"283\":{\"h\":\"维护数据库完整性DBMS应该提供哪些支持？\",\"t\":[\"违约处理\",\"完整性检查机制\",\"提供定义完整性约束条件的机制\"]},\"284\":{\"h\":\"实体完整性的定义和违约处理\",\"t\":[\"定义\",\"建表的时候使用primary key来定义。 一种是定义为列级约束条件，另外一种是定义为表级约束条件。\",\"违约处理 当用户进行操作的时候会检查主码值是否唯一或者为空，如果满足条件则拒绝。\"]},\"285\":{\"h\":\"参照完整性的定义和违约处理\",\"t\":[\"定义 使用foreign key来定义外码，用references来指明这些外码参照哪些表的主码\",\"违约处理\",\"拒绝处理\",\"级联处理\",\"设置为空值\",\"设置为缺省值\"]},\"286\":{\"h\":\"用户自定义的完整性\",\"t\":[\"断言\",\"域约束\",\"属性约束\",\"关系约束\"]},\"287\":{\"h\":\"触发器的作用，什么时候用触发器，创建触发器的步骤？\",\"t\":[\"作用 触发器是一种程序模块，是数据库的一种自动处理机制。主要作用是保证数据库的安全性。\",\"什么时候用触发器\",\"触发器通过事件来激活，实现业务规则或约束，自动化任务。\",\"dml触发器\",\"ddl触发器\",\"instead of触发器\",\"创建触发器的步骤 \",\"定义触发器\",\"触发条件\",\"声明部分\",\"主体部分\"]},\"288\":{\"h\":\"实现数据库安全性控制的常用方法和技术？\",\"t\":[\"用户表示和鉴别 核对用户信息\",\"多层存取控制 具有权限才能访问\",\"视图 对不同的用户定义视图。\",\"审计 建立审计日志。\",\"数据加密 对于传输的信息进行加密。\"]},\"289\":{\"h\":\"自主存取控制和强制存取控制\",\"t\":[\"自主存取控制 用户访问的时候检查用户存取权限\",\"强制存取控制 数据对象被授予密级 ，用户也被赋予相应的许可证。\"]},\"290\":{\"h\":\"强制存取规则\",\"t\":[\"主体许可证大于等于客体的密级时才能读取相应的客体。\",\"主体许可证小于等于客体的密级时才能写相应的客体。\"]},\"291\":{\"h\":\"审计\",\"t\":[\"把用户的所有操作都记录到系统的审计日志中，用来分析。\"]},\"292\":{\"h\":\"关系数据库的设计理论\"},\"293\":{\"h\":\"为什么范式会出现\",\"t\":[\"在数据库中不合理的设计会导致数据冗余，更新异常，插入异常，删除异常。 范式理论的出现是为了解决不合理的数据依赖，使数据库设计规范化。\"]},\"294\":{\"h\":\"解释范式\",\"t\":[\"1NF 每一列都是不可分割的数据项。\",\"2NF 在1NF的基础上，非码属性必须完全依赖于候选码。\",\"3NF 在2NF的基础上，属性不能简介依赖主属性(传递依赖)。（消除传递依赖）\",\"BCNF 在1NF的基础上，所有的函数依赖，比如x->y,决定因素x中都是候选码。\",\"4NF 关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。\",\"1NF到2NF消除了非码属性对部分函数的依赖。\",\"2NF到3NF消除了非主属性对码的传递函数依赖。\",\"3NF到4NF消除了主属性对码的部分函数依赖和传递函数依赖。\",\"BCNF到4NF消除了非平凡且非函数依赖的多值依赖。\"]},\"295\":{\"h\":\"数据库设计\"},\"296\":{\"h\":\"数据库设计的基本步骤\",\"t\":[\"需求分析 数据字典\",\"概念结构设计 E-R图\",\"逻辑结构设计 将E-R图转化为数据模型。形成模式。同时还能建立数据的外模式。\",\"物理结构设计 设计索引，物理存储安排，设立内模式。\",\"数据库实施\",\"数据库运行和维护\"]},\"297\":{\"h\":\"什么是数据库设计\",\"t\":[\"对于一个给定的应用环境，构造最优的数据库模式，建立数据库及其应用系统，使之能够有效的存储数据，满足各种用户的应用需求。\"]},\"298\":{\"h\":\"数据字典的内容及其作用\",\"t\":[\"数据字典通常包括数据项，数据结构，数据流，数据存储和处理过程。\",\"数据字典是关于数据库中数据的描述。\"]},\"299\":{\"h\":\"设计概念系统结构\",\"t\":[\"特点：能够真实的反应现实世界，事物与事物之间的联系。易于理解，易于修改。易于向数据模型转化\",\"设计策略：\",\"自顶向下 首先定义全局概念结构框架，然后逐步细化。\",\"自底向上 首先定义局部概念结构框架，然后逐步向上细化。\",\"逐步扩张 首先定义核心概念结构，然后向外扩充。\",\"混合策略 结合起来\"]},\"300\":{\"h\":\"逻辑设计阶段主要内容和步骤\",\"t\":[\"将概念结构设计阶段设计好的基本E-R图转化为关系数据模型。\",\"将概念结构转化为关系模型\",\"对数据模型优化\"]},\"301\":{\"h\":\"E-R模式合并时发生的三种冲突\",\"t\":[\"属性冲突 域范围不相同\",\"命名冲突\",\"结构冲突 同一个对象在不同地方有不同的身份\"]},\"302\":{\"h\":\"物理设计的内容和步骤\",\"t\":[\"确定数据库的物理结构\",\"对所设计的物理结构进行评价\"]},\"303\":{\"h\":\"数据库的运行与维护，从以下几个角度考虑\",\"t\":[\"数据库的转储和恢复。\",\"数据库的安全性，完整性控制。\",\"数据库的性能监督，分析和改造。\",\"数据库的再组织和重改造。\"]},\"304\":{\"h\":\"再组织和重构造\",\"t\":[\"再组织是按照原设计要求重新安排存储位置，回收垃圾，以提高系统性能。\",\"重改造是修改数据库的模式和内模式。\"]},\"305\":{\"h\":\"事务和并发控制\"},\"306\":{\"h\":\"为什么要并发\",\"t\":[\"提高吞吐量和资源的利用率。\",\"减少平均等待事件和平均响应时间。\",\"并发控制能保证事务的ACID性质，主要是保证事务的隔离性和数据库的一致性。\"]},\"307\":{\"h\":\"事务的定义\",\"t\":[\"事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。\"]},\"308\":{\"h\":\"事务的四大特性\",\"t\":[\"原子性 事务中的全部操作是不可分割的。原子性保证了事务的一致性。\",\"一致性 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。满足完整性约束。\",\"隔离性 事务的执行不受其他的事务的干扰。\",\"持久性 对于任意已提交的事务，系统保证该事务对数据库的改变不会丢失，也就是出现故障。\"]},\"309\":{\"h\":\"事务并发执行可能导致哪几类数据不一致？怎么解决？\",\"t\":[\"事务并发执行可能导致\",\"丢失修改 \",\"两个事务同时修改数据，会有一个被覆盖掉。\",\"读“脏”数据 \",\"读未提交，其他事务回滚导致使用的数据不对\",\"不可重复读 \",\"一个事务内读到了两个不相同的数据\",\"数据库系统解决这些问题的主要方法是采用封锁技术。\",\"一级封锁协议可以保证不丢失修改\",\"二级封锁协议可以保证不读“脏”数据\",\"三级封锁协议可以保证可重复读\"]},\"310\":{\"h\":\"封锁的定义\",\"t\":[\"数据库系统中的封锁是指数据库并发执行过程中，将某个事务的所有操作单元全部锁定的操作。\"]},\"311\":{\"h\":\"封锁的类型\",\"t\":[\"排它锁（X锁）\",\"共享锁（S锁）\"]},\"312\":{\"h\":\"锁的类型\",\"t\":[\"活锁又称为饥饿，是一个事务在等待资源的过程中，被无限期地拒绝资源。使用fifo来避免活锁\",\"死锁两个或多个事务在执行过程中，因竞争资源而造成的一种阻塞的现象，若无外力作用，它们将无法推进下去。\"]},\"313\":{\"h\":\"死锁的检测和预防\",\"t\":[\"检测\",\"超时法\",\"设置时间\",\"超过则死锁\",\"预防\",\"一次封锁法\",\"顺序封锁法 \",\"事务按顺序执行\"]},\"314\":{\"h\":\"事务的可串行化\",\"t\":[\"多个事务并发执行，当且仅当结果与某一次顺序串行执行的结果相同。\",\"可串行化调度是并行调度正确的唯一准则。\"]},\"315\":{\"h\":\"描述两段锁结构\",\"t\":[\"第一阶段只加锁，第二段只释放锁。 协议规定\",\"对任何数据读写之前，必须先加锁。\",\"释放了一个锁之后，事务不能再获取其他的锁。\",\"两段锁协议可以保证事务的可串行化，是充分条件。\"]},\"316\":{\"h\":\"数据库恢复技术\"},\"317\":{\"h\":\"故障的种类\",\"t\":[\"事务内部的故障\",\"系统故障\",\"介质故障\",\"计算机病毒\"]},\"318\":{\"h\":\"恢复策略\",\"t\":[\"REDO重做 正向扫描日志文件，对每个REDO事务重新执行日志文件的登记操作\",\"UNDO撤销 逆向扫描日志文件，对每个UNDO事务执行回滚操作\",\"COMMIT提交 将事务的修改永久保存到数据库中\",\"ROLLBACK回滚 将事务的修改从数据库中撤销\"]},\"319\":{\"h\":\"故障的种类和恢复方法\",\"t\":[\"事务故障 表示非预期的不正常程序结束所造成的故障。\",\"反向扫描文件日志，查找该事务的更新操作，并对那些操作进行逆操作，直到事务开始的标志。\",\"系统故障 表示非预期的系统崩溃或断电所造成的故障。\",\"正向扫描日志\",\"未完成的事务，进行UNDO\",\"提交的事务，进行REDO\",\"介质故障 表示非预期的存储介质故障所造成的故障。\",\"装入数据库副本。装入日志文件副本，并执行恢复。\"]},\"320\":{\"h\":\"什么是记录检查点？包含哪些内容？\",\"t\":[\"检查点是一类新的日志记录，包括建立检查点时刻所有正在执行的事务清单，这些事务的最新一个日志记录地址\"]},\"321\":{\"h\":\"数据库转储\",\"t\":[\"按照系统状态分类 \",\"静态转储 停止数据库服务，将数据库的当前状态保存到磁盘上\",\"动态转储 运行事务并转储，但要在转储期间记录数据活动的日志。恢复时通过日志和副本共同恢复\",\"转储量分类 \",\"海量转储 一次转储所有的数据\",\"增量转储 只转储更新过的数据\"]},\"322\":{\"h\":\"为什么要先登记日志文件，后写数据库？\",\"t\":[\"如果先写了数据库修改，在日志中没有记录，这样就没有办法恢复这个修改了。\",\"如果先写了日志，但是没有修改数据库，这样在恢复时只不过多执行一次undo操作，并不会影响数据库的正确性。\"]},\"323\":{\"h\":\"使用日志的数据库恢复技术\",\"t\":[\"推迟更新技术 每个数据到达提交点之前不能更新数据库； 一个事务的所有更新操作对应的日志记录写入存储器之前，该事务无法到达提交点。\",\"即时更新技术 所有更新类型的日志安全的存储到存储器之前，事务T不能更新数据库，也无法提交。\"]},\"324\":{\"h\":\"什么是数据库镜像？有什么作用？\",\"t\":[\"自动的把数据库中所有或者关键数据复制一份保存在磁盘上\",\"用于数据库恢复，提高数据库的可用性。\"]},\"325\":{\"h\":\"为什么引入意向锁？含义是什么？\",\"t\":[\"引进意向锁是为了提高封锁子系统的效率。\",\"对任意节点加锁时，都必须先对其上层节点加意向锁。引进意向锁之后，系统对某一数据对象加锁时不必逐个检查锁冲突了。\"]},\"326\":{\"h\":\"IS，IX，SIX锁\",\"t\":[\"IS锁 对一个数据对象加IS锁代表其后裔节点加S锁\",\"IX锁 对一个数据对象加IX锁代表其后裔节点加X锁\",\"SIX锁 先加S锁再加IX锁\"]},\"327\":{\"h\":\"补充\"},\"328\":{\"h\":\"数据库的锁机制\",\"t\":[\"排他锁 独占\",\"共享锁 可以和别人共享\",\"意向锁 指示事务将进行的锁定\"]},\"329\":{\"h\":\"什么是事务？恢复技术能保证事务的那些特性\",\"t\":[\"事务是一个不可分割的工作单元。\",\"恢复技术保证了事务的 原子性和持久性\"]},\"330\":{\"h\":\"什么是索引？优缺点？\",\"t\":[\"索引是一种数据结构，用于快速查找和访问数据库表中的特定行。\",\"优点 加快检索速度，优化排序和分组操作，减少磁盘IO\",\"缺点 占用磁盘空间，降低数据插入更新和删除的速度。\"]},\"331\":{\"h\":\"什么是ER图？ER图向关系模型的转换规则是什么？ER图的设计原则是什么？\",\"t\":[\"ER图是一种用于描述实体之间关系的图形化工具，常用于数据库概念设计阶段。\",\"实体转化成表，属性转化成字段，联系转化成外键，多对多关系转化成连接表。\",\"设计原则：简单性，完整性，准确性，一致性，可扩展性。\"]},\"332\":{\"h\":\"并发控制的主要技术\",\"t\":[\"锁，时间戳，乐观控制法，多版本并发控制（MVCC）\"]},\"333\":{\"h\":\"delete和drop的区别\",\"t\":[\"delete 是dml命令，可以和where子句一起使用，删除满足条件的记录，会被记录在日志中，可以回滚，不会改变表的结构或索引所占空间\",\"drop 是ddl命令，不能和其他命令一起使用，删除表的结构和所有数据，不会被记录在日志中，不能回滚，会释放表占用的空间\"]},\"334\":{\"h\":\"orm映射\",\"t\":[\"对象关系映射，在关系数据库和对象之间建立了一个映射，使得用户可以操纵对象的方式操纵数据库。\"]},\"335\":{\"c\":[\"note\"]},\"336\":{\"c\":[\"database\"]},\"337\":{\"h\":\"Linux 相关\"},\"338\":{\"h\":\"端口占用\",\"t\":[\"使用ps -ef|grep [占用端口号|进程名称]来查看进程id，获取进程id后使用kill -9 id来强制关闭应用。\",\"使用lsof -i:[端口号] 获取PID\",\"使用killall会杀死指定名称的所有进程killall -9 [process_name]。\",\"使用pkill 也会通过进程名来杀死进程，但是可以将信号发给指定用户(踢某人下线)，较于killall更为灵活 pkill -9 [process_name]。\"]},\"339\":{\"c\":[\"note\"]},\"340\":{\"c\":[\"linux\"]},\"341\":{\"h\":\"待整理的杂记\"},\"342\":{\"h\":\"未整理\"},\"343\":{\"h\":\"uniapp\",\"t\":[\"uniapp 写h5转APP不支持在拦截器处设置请求头，但是在HBuilderX的内部浏览器运行起来是正常的\",\"解决方法： 在发送请求的时候加上\"]},\"344\":{\"h\":\"gorm\",\"t\":[\"分页模板\",\"type PageDto struct { Page int `form:\\\"page\\\" json:\\\"page\\\"` PageSize int `form:\\\"page_size\\\" json:\\\"page_size\\\"` } func Paginate(req *dto.PageDto) func(db *gorm.DB) *gorm.DB { return func(db *gorm.DB) *gorm.DB { page := req.Page if page == 0 { page = 1 } pageSize := req.PageSize switch { case pageSize > 100: pageSize = 100 case pageSize <= 0: pageSize = 10 } offset := (page - 1) * pageSize return db.Offset(offset).Limit(pageSize) } } \"]},\"345\":{\"h\":\"go 发送邮件模板\",\"t\":[\"注意事项\",\"不可以使用带有%的样式，尽量替换成vh \",\"也是可以解决的，直接使用%来转义\",\"确定好渲染参数\",\"<!DOCTYPE html> <html xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"utf-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"description\\\" content=\\\"email code\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"> </head> <!--邮箱验证码模板--> <body> <div style=\\\"background-color:#ECECEC; padding: 35px;\\\"> <table cellpadding=\\\"0\\\" align=\\\"center\\\" style=\\\"width: 800px;height: 40vh; margin: 0px auto; text-align: left; position: relative; border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 5px; font-size: 14px; font-family:微软雅黑, 黑体; line-height: 1.5; box-shadow: rgb(153, 153, 153) 0px 0px 5px; border-collapse: collapse; background-position: initial initial; background-repeat: initial initial;background:#fff;\\\"> <tbody> <tr> <th valign=\\\"middle\\\" style=\\\"height: 25px; line-height: 25px; padding: 15px 35px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: RGB(148,0,211); background-color: RGB(148,0,211); border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\\\"> <font face=\\\"微软雅黑\\\" size=\\\"5\\\" style=\\\"color: rgb(255, 255, 255); \\\">基于深度学习的动物图片分类APP 注册</font> </th> </tr> <tr> <td style=\\\"word-break:break-all\\\"> <div style=\\\"padding:25px 35px 40px; background-color:#fff;opacity:0.8;\\\"> <h2 style=\\\"margin: 5px 0px; \\\"> <font color=\\\"#333333\\\" style=\\\"line-height: 20px; \\\"> <font style=\\\"line-height: 22px; \\\" size=\\\"4\\\"> 尊敬的用户：</font> </font> </h2> <!-- 中文 --> <p>您好！感谢您使用<span style=\\\"font-weight: bold;\\\">基于深度学习的动物图片分类APP</span>，您的账号正在进行邮箱验证，验证码为：<font color=\\\"#ff8c00\\\">{%v}</font>，有效期30分钟，请尽快填写验证码完成验证！</p><br> <div style=\\\"width:100vh;margin:0 auto;\\\"> <div style=\\\"padding:10px 10px 0;border-top:1px solid #ccc;color:#747474;margin-bottom:20px;line-height:1.3em;font-size:12px;text-align:right\\\"> <!-- <p>──zarttic</p> --> <br> <p>此为系统邮件，请勿回复<br> Please do not reply to this system email </p> <!--<p>©***</p>--> </div> </div> </div> </td> </tr> </tbody> </table> </div> </body> </html> \",\"英语问答1\",\"英语问答2\",\"英语问答3\"]},\"346\":{\"c\":[\"note\"]},\"347\":{\"c\":[\"mess\"]},\"348\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"英语问答3\",{\"1\":{\"345\":1}}],[\"英语问答2\",{\"1\":{\"345\":1}}],[\"英语问答1\",{\"1\":{\"345\":1}}],[\"感谢您使用<span\",{\"1\":{\"345\":1}}],[\"尊敬的用户\",{\"1\":{\"345\":1}}],[\"黑体\",{\"1\":{\"345\":1}}],[\"微软雅黑\",{\"1\":{\"345\":2}}],[\"邮箱验证码模板\",{\"1\":{\"345\":1}}],[\"确定好渲染参数\",{\"1\":{\"345\":1}}],[\"确定数据库的物理结构\",{\"1\":{\"302\":1}}],[\"尽量替换成vh\",{\"1\":{\"345\":1}}],[\"发送邮件模板\",{\"0\":{\"345\":1}}],[\"未整理\",{\"0\":{\"342\":1}}],[\"未完成的事务\",{\"1\":{\"319\":1}}],[\"待整理的杂记\",{\"0\":{\"341\":1}}],[\"较于killall更为灵活\",{\"1\":{\"338\":1}}],[\"较高的数据独立性\",{\"1\":{\"259\":1}}],[\"踢某人下线\",{\"1\":{\"338\":1}}],[\"端口号\",{\"1\":{\"338\":1}}],[\"端口占用\",{\"0\":{\"338\":1}}],[\"乐观控制法\",{\"1\":{\"332\":1}}],[\"锁\",{\"1\":{\"332\":1}}],[\"锁的类型\",{\"0\":{\"312\":1}}],[\"准确性\",{\"1\":{\"331\":1}}],[\"常用于数据库概念设计阶段\",{\"1\":{\"331\":1}}],[\"降低数据插入更新和删除的速度\",{\"1\":{\"330\":1}}],[\"占用端口号|进程名称\",{\"1\":{\"338\":1}}],[\"占用磁盘空间\",{\"1\":{\"330\":1}}],[\"占用的\",{\"1\":{\"248\":1}}],[\"缺点\",{\"1\":{\"330\":1}}],[\"减少磁盘io\",{\"1\":{\"330\":1}}],[\"减少平均等待事件和平均响应时间\",{\"1\":{\"306\":1}}],[\"优化排序和分组操作\",{\"1\":{\"330\":1}}],[\"优点\",{\"1\":{\"330\":1}}],[\"优缺点\",{\"0\":{\"330\":1}}],[\"索引是一种数据结构\",{\"1\":{\"330\":1}}],[\"意向锁\",{\"1\":{\"328\":1}}],[\"意思就是仅对这个分组下的路由起作用\",{\"1\":{\"103\":1}}],[\"独占\",{\"1\":{\"328\":1}}],[\"补充\",{\"0\":{\"327\":1}}],[\"先加s锁再加ix锁\",{\"1\":{\"326\":1}}],[\"引进意向锁之后\",{\"1\":{\"325\":1}}],[\"引进意向锁是为了提高封锁子系统的效率\",{\"1\":{\"325\":1}}],[\"都必须先对其上层节点加意向锁\",{\"1\":{\"325\":1}}],[\"都应当返回\",{\"1\":{\"196\":1}}],[\"含义是什么\",{\"0\":{\"325\":1}}],[\"推迟更新技术\",{\"1\":{\"323\":1}}],[\"增量转储\",{\"1\":{\"321\":1}}],[\"增删改查\",{\"0\":{\"126\":1}}],[\"海量转储\",{\"1\":{\"321\":1}}],[\"转储量分类\",{\"1\":{\"321\":1}}],[\"恢复技术保证了事务的\",{\"1\":{\"329\":1}}],[\"恢复技术能保证事务的那些特性\",{\"0\":{\"329\":1}}],[\"恢复时通过日志和副本共同恢复\",{\"1\":{\"321\":1}}],[\"恢复策略\",{\"0\":{\"318\":1}}],[\"动态转储\",{\"1\":{\"321\":1}}],[\"动态表名\",{\"1\":{\"117\":1}}],[\"停止数据库服务\",{\"1\":{\"321\":1}}],[\"按照系统状态分类\",{\"1\":{\"321\":1}}],[\"检查点是一类新的日志记录\",{\"1\":{\"320\":1}}],[\"检测\",{\"1\":{\"313\":1}}],[\"装入日志文件副本\",{\"1\":{\"319\":1}}],[\"装入数据库副本\",{\"1\":{\"319\":1}}],[\"反向扫描文件日志\",{\"1\":{\"319\":1}}],[\"逆向扫描日志文件\",{\"1\":{\"318\":1}}],[\"正向扫描日志\",{\"1\":{\"319\":1}}],[\"正向扫描日志文件\",{\"1\":{\"318\":1}}],[\"正常输入结束read返回eof\",{\"1\":{\"194\":1}}],[\"计算机病毒\",{\"1\":{\"317\":1}}],[\"计划\",{\"1\":{\"26\":2}}],[\"介质故障\",{\"1\":{\"317\":1,\"319\":1}}],[\"介绍\",{\"0\":{\"14\":1},\"1\":{\"14\":1,\"15\":1}}],[\"系统对某一数据对象加锁时不必逐个检查锁冲突了\",{\"1\":{\"325\":1}}],[\"系统故障\",{\"1\":{\"317\":1,\"319\":1}}],[\"系统保证该事务对数据库的改变不会丢失\",{\"1\":{\"308\":1}}],[\"故障的种类和恢复方法\",{\"0\":{\"319\":1}}],[\"故障的种类\",{\"0\":{\"317\":1}}],[\"两段锁协议可以保证事务的可串行化\",{\"1\":{\"315\":1}}],[\"两个事务同时修改数据\",{\"1\":{\"309\":1}}],[\"两个都是常用的连接\",{\"1\":{\"269\":1}}],[\"释放了一个锁之后\",{\"1\":{\"315\":1}}],[\"释放及其堆栈踪迹\",{\"1\":{\"248\":1}}],[\"必须先加锁\",{\"1\":{\"315\":1}}],[\"必须加一些条件\",{\"1\":{\"141\":1}}],[\"顺序封锁法\",{\"1\":{\"313\":1}}],[\"预防\",{\"1\":{\"313\":1}}],[\"预编译\",{\"1\":{\"154\":2}}],[\"预编译模式\",{\"1\":{\"154\":2}}],[\"超过则死锁\",{\"1\":{\"313\":1}}],[\"超过的连接会被连接池关闭\",{\"1\":{\"123\":1}}],[\"超时法\",{\"1\":{\"313\":1}}],[\"死锁的检测和预防\",{\"0\":{\"313\":1}}],[\"死锁两个或多个事务在执行过程中\",{\"1\":{\"312\":1}}],[\"被无限期地拒绝资源\",{\"1\":{\"312\":1}}],[\"被忽略的字段不参与gorm的读写操作\",{\"1\":{\"116\":1}}],[\"活锁又称为饥饿\",{\"1\":{\"312\":1}}],[\"共享锁\",{\"1\":{\"311\":1,\"328\":1}}],[\"封锁的类型\",{\"0\":{\"311\":1}}],[\"封锁的定义\",{\"0\":{\"310\":1}}],[\"封面\",{\"0\":{\"44\":1}}],[\"三级封锁协议可以保证可重复读\",{\"1\":{\"309\":1}}],[\"三个模式之间的转换\",{\"1\":{\"264\":1}}],[\"二级封锁协议可以保证不读\",{\"1\":{\"309\":1}}],[\"二维表中的一行\",{\"1\":{\"267\":1}}],[\"二维表中的列\",{\"1\":{\"267\":1}}],[\"脏\",{\"1\":{\"309\":2}}],[\"丢失修改\",{\"1\":{\"309\":1}}],[\"怎么解决\",{\"0\":{\"309\":1}}],[\"持久性\",{\"1\":{\"308\":1}}],[\"持续会话模式\",{\"1\":{\"154\":1}}],[\"隔离性\",{\"1\":{\"308\":1}}],[\"满足完整性约束\",{\"1\":{\"308\":1}}],[\"满足各种用户的应用需求\",{\"1\":{\"297\":1}}],[\"原子性和持久性\",{\"1\":{\"329\":1}}],[\"原子性保证了事务的一致性\",{\"1\":{\"308\":1}}],[\"原子性\",{\"1\":{\"308\":1}}],[\"回收垃圾\",{\"1\":{\"304\":1}}],[\"再组织是按照原设计要求重新安排存储位置\",{\"1\":{\"304\":1}}],[\"再组织和重构造\",{\"0\":{\"304\":1}}],[\"命名冲突\",{\"1\":{\"301\":1}}],[\"命令\",{\"1\":{\"232\":1}}],[\"混合策略\",{\"1\":{\"299\":1}}],[\"逐步扩张\",{\"1\":{\"299\":1}}],[\"逐行处理数据\",{\"1\":{\"280\":1}}],[\"首先定义核心概念结构\",{\"1\":{\"299\":1}}],[\"首先定义局部概念结构框架\",{\"1\":{\"299\":1}}],[\"首先定义全局概念结构框架\",{\"1\":{\"299\":1}}],[\"首先安装redis存储引擎的包\",{\"1\":{\"100\":1}}],[\"易于向数据模型转化\",{\"1\":{\"299\":1}}],[\"易于修改\",{\"1\":{\"299\":1}}],[\"易于理解\",{\"1\":{\"299\":1}}],[\"事物与事物之间的联系\",{\"1\":{\"299\":1}}],[\"事务是一个不可分割的工作单元\",{\"1\":{\"329\":1}}],[\"事务是用户定义的数据库操作序列\",{\"1\":{\"307\":1}}],[\"事务t不能更新数据库\",{\"1\":{\"323\":1}}],[\"事务故障\",{\"1\":{\"319\":1}}],[\"事务内部的故障\",{\"1\":{\"317\":1}}],[\"事务不能再获取其他的锁\",{\"1\":{\"315\":1}}],[\"事务按顺序执行\",{\"1\":{\"313\":1}}],[\"事务并发执行可能导致\",{\"1\":{\"309\":1}}],[\"事务并发执行可能导致哪几类数据不一致\",{\"0\":{\"309\":1}}],[\"事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态\",{\"1\":{\"308\":1}}],[\"事务中的全部操作是不可分割的\",{\"1\":{\"308\":1}}],[\"事务中可以执行多个sql语句\",{\"1\":{\"158\":1}}],[\"事务的可串行化\",{\"0\":{\"314\":1}}],[\"事务的执行不受其他的事务的干扰\",{\"1\":{\"308\":1}}],[\"事务的四大特性\",{\"0\":{\"308\":1}}],[\"事务的定义\",{\"0\":{\"307\":1}}],[\"事务和并发控制\",{\"0\":{\"305\":1}}],[\"事务和hook\",{\"0\":{\"153\":1}}],[\"事务\",{\"0\":{\"155\":1},\"1\":{\"273\":1}}],[\"能够真实的反应现实世界\",{\"1\":{\"299\":1}}],[\"特点\",{\"1\":{\"299\":1}}],[\"特性\",{\"1\":{\"52\":1}}],[\"构造最优的数据库模式\",{\"1\":{\"297\":1}}],[\"形成模式\",{\"1\":{\"296\":1}}],[\"逻辑设计阶段主要内容和步骤\",{\"0\":{\"300\":1}}],[\"逻辑结构设计\",{\"1\":{\"296\":1}}],[\"逻辑独立性\",{\"1\":{\"265\":1}}],[\"需求分析\",{\"1\":{\"296\":1}}],[\"需要在\",{\"1\":{\"183\":1}}],[\"需要转换成小写字母\",{\"1\":{\"115\":1}}],[\"需要定义一个struct类型和mysql表进行绑定或者叫映射\",{\"1\":{\"111\":1}}],[\"决定因素x中都是候选码\",{\"1\":{\"294\":1}}],[\"决定数据库的存储结构和存取策略\",{\"1\":{\"266\":1}}],[\"决定数据库中的信息内容和数据的逻辑结构\",{\"1\":{\"266\":1}}],[\"消除传递依赖\",{\"1\":{\"294\":1}}],[\"传递依赖\",{\"1\":{\"294\":1}}],[\"传入的\",{\"1\":{\"52\":1}}],[\"解决方法\",{\"1\":{\"343\":1}}],[\"解释范式\",{\"0\":{\"294\":1}}],[\"解析templates目录下的所有模板文件\",{\"1\":{\"88\":1,\"89\":1}}],[\"范式理论的出现是为了解决不合理的数据依赖\",{\"1\":{\"293\":1}}],[\"把用户的所有操作都记录到系统的审计日志中\",{\"1\":{\"291\":1}}],[\"强制存取规则\",{\"0\":{\"290\":1}}],[\"强制存取控制\",{\"1\":{\"289\":1}}],[\"建立数据库及其应用系统\",{\"1\":{\"297\":1}}],[\"建立审计日志\",{\"1\":{\"288\":1}}],[\"建表的时候使用primary\",{\"1\":{\"284\":1}}],[\"审计\",{\"0\":{\"291\":1},\"1\":{\"288\":1}}],[\"核对用户信息\",{\"1\":{\"288\":1}}],[\"核数量\",{\"1\":{\"252\":1}}],[\"声明部分\",{\"1\":{\"287\":1}}],[\"触发条件\",{\"1\":{\"287\":1}}],[\"触发器通过事件来激活\",{\"1\":{\"287\":1}}],[\"触发器是一种程序模块\",{\"1\":{\"287\":1}}],[\"触发器的作用\",{\"0\":{\"287\":1}}],[\"什么时候用触发器\",{\"0\":{\"287\":1},\"1\":{\"287\":1}}],[\"什么是er图\",{\"0\":{\"331\":1}}],[\"什么是索引\",{\"0\":{\"330\":1}}],[\"什么是事务\",{\"0\":{\"329\":1}}],[\"什么是记录检查点\",{\"0\":{\"320\":1}}],[\"什么是数据库镜像\",{\"0\":{\"324\":1}}],[\"什么是数据库设计\",{\"0\":{\"297\":1}}],[\"什么是数据库的完整性\",{\"0\":{\"282\":1}}],[\"什么是存储过程\",{\"0\":{\"275\":1}}],[\"什么是二级映像\",{\"0\":{\"264\":1}}],[\"断言\",{\"1\":{\"286\":1}}],[\"断言的定义\",{\"1\":{\"274\":1}}],[\"级联处理\",{\"1\":{\"285\":1}}],[\"拒绝处理\",{\"1\":{\"285\":1}}],[\"违约处理\",{\"1\":{\"283\":1,\"284\":1,\"285\":1}}],[\"维护数据库完整性dbms应该提供哪些支持\",{\"0\":{\"283\":1}}],[\"破坏等\",{\"1\":{\"282\":1}}],[\"游标操作通常比批量操作效率低\",{\"1\":{\"280\":1}}],[\"游标还可以用于在结果集中更新\",{\"1\":{\"280\":1}}],[\"游标提供了定位和导航查询结果集的能力\",{\"1\":{\"280\":1}}],[\"游标允许程序逐行访问查询结果集中的数据\",{\"1\":{\"280\":1}}],[\"游标的作用包括\",{\"1\":{\"280\":1}}],[\"游标通常用于遍历查询结果集\",{\"1\":{\"280\":1}}],[\"游标是系统为用户开放的缓冲区\",{\"1\":{\"280\":1}}],[\"游标\",{\"0\":{\"280\":1}}],[\"称为相关子查询\",{\"1\":{\"279\":1}}],[\"称为不相关子查询\",{\"1\":{\"279\":1}}],[\"子条件查询依赖父查询\",{\"1\":{\"279\":1}}],[\"子条件查询不依赖父查询\",{\"1\":{\"279\":1}}],[\"子查询\",{\"0\":{\"170\":1}}],[\"子查询更新\",{\"0\":{\"140\":1}}],[\"网络操作等\",{\"1\":{\"278\":1}}],[\"嵌入式sql\",{\"0\":{\"278\":1}}],[\"嵌套事务\",{\"0\":{\"157\":1}}],[\"简化用户操作\",{\"1\":{\"277\":1}}],[\"简单性\",{\"1\":{\"331\":1}}],[\"简单的代码就实现了一个http的服务\",{\"1\":{\"53\":1}}],[\"简单设计\",{\"1\":{\"44\":1}}],[\"联系转化成外键\",{\"1\":{\"331\":1}}],[\"联系\",{\"1\":{\"276\":1}}],[\"经编译创建并保存在数据库中\",{\"1\":{\"275\":1}}],[\"域范围不相同\",{\"1\":{\"301\":1}}],[\"域约束\",{\"1\":{\"286\":1}}],[\"域\",{\"1\":{\"274\":1}}],[\"视图的优点\",{\"0\":{\"277\":1}}],[\"视图的区别和联系\",{\"0\":{\"276\":1}}],[\"视图并不存储数据\",{\"1\":{\"276\":1}}],[\"视图\",{\"1\":{\"274\":1,\"276\":1,\"288\":1}}],[\"授权的定义和回收\",{\"1\":{\"274\":1}}],[\"授权\",{\"1\":{\"273\":1}}],[\"功能强大\",{\"1\":{\"272\":1}}],[\"面向集合的操作方式\",{\"1\":{\"272\":1}}],[\"高度非过程化\",{\"1\":{\"272\":1}}],[\"高级查询\",{\"0\":{\"167\":1}}],[\"综合统一\",{\"1\":{\"272\":1}}],[\"外键\",{\"1\":{\"267\":1}}],[\"外模型映像即可\",{\"1\":{\"265\":1}}],[\"外模式\",{\"1\":{\"263\":1,\"264\":1}}],[\"又不含多余的属性\",{\"1\":{\"267\":1}}],[\"候选码\",{\"1\":{\"267\":1}}],[\"元组\",{\"1\":{\"267\":1}}],[\"属性转化成字段\",{\"1\":{\"331\":1}}],[\"属性冲突\",{\"1\":{\"301\":1}}],[\"属性不能简介依赖主属性\",{\"1\":{\"294\":1}}],[\"属性约束\",{\"1\":{\"286\":1}}],[\"属性\",{\"1\":{\"267\":1}}],[\"物理设计的内容和步骤\",{\"0\":{\"302\":1}}],[\"物理存储安排\",{\"1\":{\"296\":1}}],[\"物理结构设计\",{\"1\":{\"296\":1}}],[\"物理结构和存储方式的描述\",{\"1\":{\"263\":1}}],[\"物理独立性\",{\"1\":{\"265\":1}}],[\"物理独立性和逻辑独立性\",{\"0\":{\"265\":1}}],[\"概念结构设计\",{\"1\":{\"296\":1}}],[\"概念模式\",{\"1\":{\"263\":1}}],[\"概述\",{\"0\":{\"258\":1}}],[\"完整性控制\",{\"1\":{\"303\":1}}],[\"完整性检查机制\",{\"1\":{\"283\":1}}],[\"完整性\",{\"1\":{\"282\":1,\"331\":1}}],[\"完整性和安全性\",{\"0\":{\"281\":1}}],[\"完整性约束的作用\",{\"0\":{\"270\":1}}],[\"完整性约束\",{\"1\":{\"262\":1}}],[\"完全写入\",{\"1\":{\"213\":1}}],[\"使得用户可以操纵对象的方式操纵数据库\",{\"1\":{\"334\":1}}],[\"使得系统能够为数据管理提供更多支持\",{\"1\":{\"261\":1}}],[\"使之能够有效的存储数据\",{\"1\":{\"297\":1}}],[\"使数据库设计规范化\",{\"1\":{\"293\":1}}],[\"使用pkill\",{\"1\":{\"338\":1}}],[\"使用ps\",{\"1\":{\"338\":1}}],[\"使用killall会杀死指定名称的所有进程killall\",{\"1\":{\"338\":1}}],[\"使用lsof\",{\"1\":{\"338\":1}}],[\"使用日志的数据库恢复技术\",{\"0\":{\"323\":1}}],[\"使用fifo来避免活锁\",{\"1\":{\"312\":1}}],[\"使用foreign\",{\"1\":{\"285\":1}}],[\"使用数据库进行信息化管理有哪些好处\",{\"0\":{\"261\":1}}],[\"使用withvalue的用户应该定义自己的键类型\",{\"1\":{\"186\":1}}],[\"使用上下文的程序应遵循以下规则\",{\"1\":{\"179\":1}}],[\"使用了left\",{\"1\":{\"172\":1}}],[\"使用的是tx变量\",{\"1\":{\"158\":1}}],[\"使用的时候\",{\"1\":{\"56\":1}}],[\"使用原生sql语句\",{\"0\":{\"133\":1}}],[\"使用map创建\",{\"0\":{\"131\":1}}],[\"使用系统本地时区\",{\"1\":{\"120\":1}}],[\"使用时间戳秒数填充创建时间\",{\"1\":{\"118\":1}}],[\"使用时间戳毫秒数填充更新时间\",{\"1\":{\"118\":1}}],[\"使用时间戳填纳秒数充更新时间\",{\"1\":{\"118\":1}}],[\"使用当前时间戳秒数填充\",{\"1\":{\"118\":1}}],[\"使用scopes\",{\"1\":{\"117\":1}}],[\"使用\",{\"1\":{\"115\":1,\"130\":1}}],[\"使用结构体名称的snake\",{\"1\":{\"115\":1}}],[\"使用id做为其主键\",{\"1\":{\"115\":1}}],[\"使用use可以使用gin自带的中间件或者其他第三方中间件\",{\"1\":{\"105\":1}}],[\"使用redis作为存储引擎的例子\",{\"1\":{\"100\":1}}],[\"使用场景很多\",{\"1\":{\"86\":1}}],[\"使用gorm\",{\"1\":{\"119\":1}}],[\"使用goland\",{\"1\":{\"53\":1}}],[\"使用get请求传参时\",{\"1\":{\"65\":1}}],[\"使用get的请求应该只被用于获取数据\",{\"1\":{\"56\":1}}],[\"使用指南\",{\"1\":{\"33\":2},\"2\":{\"3\":1,\"5\":1,\"8\":1,\"29\":1,\"36\":1,\"37\":1,\"39\":1}}],[\"存储和管理功能\",{\"1\":{\"260\":1}}],[\"应用程序和数据库管理员组成\",{\"1\":{\"259\":1}}],[\"应该尽量遵循其语义\",{\"1\":{\"56\":1}}],[\"由三部分\",{\"1\":{\"259\":1}}],[\"由数据库\",{\"1\":{\"259\":1}}],[\"由于readall定义为从src读取直到eof\",{\"1\":{\"234\":1}}],[\"具有原子性\",{\"1\":{\"307\":1}}],[\"具有权限才能访问\",{\"1\":{\"288\":1}}],[\"具有较小的冗余度\",{\"1\":{\"259\":1}}],[\"具体见下方三要素\",{\"1\":{\"259\":1}}],[\"具体实现方法有\",{\"1\":{\"223\":1,\"224\":1,\"225\":1,\"237\":1}}],[\"具体实现方法为\",{\"1\":{\"222\":1}}],[\"具体得看注册了多少个中间件\",{\"1\":{\"105\":1}}],[\"术语\",{\"0\":{\"259\":1}}],[\"已整理的杂记\",{\"0\":{\"256\":1}}],[\"退出当前协程\",{\"1\":{\"250\":1}}],[\"退出应用程序\",{\"1\":{\"227\":1}}],[\"让出cpu时间片\",{\"1\":{\"249\":3}}],[\"堆内存都在不断增大\",{\"1\":{\"248\":1}}],[\"目标操作系统\",{\"1\":{\"253\":1}}],[\"目标\",{\"1\":{\"248\":1}}],[\"目前使用最广的go\",{\"1\":{\"110\":1}}],[\"启动前的堆内存\",{\"1\":{\"248\":1}}],[\"启动server\",{\"1\":{\"87\":1}}],[\"执行\",{\"1\":{\"248\":1}}],[\"执行时间\",{\"1\":{\"248\":1}}],[\"执行读写操作时\",{\"1\":{\"114\":1}}],[\"百分比\",{\"1\":{\"248\":1}}],[\"程序已运行的时间\",{\"1\":{\"248\":1}}],[\"程序会释放sigabrt信号以触发核心信息转储\",{\"1\":{\"248\":1}}],[\"然后向外扩充\",{\"1\":{\"299\":1}}],[\"然后逐步向上细化\",{\"1\":{\"299\":1}}],[\"然后逐步细化\",{\"1\":{\"299\":1}}],[\"然后以状态码2退出\",{\"1\":{\"248\":1}}],[\"然后把查询结果赋值给结构体变量\",{\"1\":{\"149\":1}}],[\"省略运行时系统中的函数\",{\"1\":{\"248\":1}}],[\"失败的程序默认会打印所有现存go程的堆栈踪迹\",{\"1\":{\"248\":1}}],[\"那些阻塞的goroutine不与gomaxprocs限制冲突\",{\"1\":{\"248\":1}}],[\"那么这个cookie只能用https协议发送给服务器\",{\"1\":{\"95\":1}}],[\"线程和go程的状态\",{\"1\":{\"248\":1}}],[\"进程数\",{\"1\":{\"248\":1}}],[\"进程\",{\"1\":{\"248\":1}}],[\"进行redo\",{\"1\":{\"319\":1}}],[\"进行undo\",{\"1\":{\"319\":1}}],[\"进行组合\",{\"1\":{\"51\":1}}],[\"进行引用\",{\"1\":{\"34\":1}}],[\"且可能会引起性能问题\",{\"1\":{\"280\":1}}],[\"且永不循环利用\",{\"1\":{\"248\":1}}],[\"且在读取数据大小上readat是要比read严格的\",{\"1\":{\"241\":1}}],[\"虽然两者的效果很像\",{\"1\":{\"241\":1}}],[\"仅当未读取任何字节时\",{\"1\":{\"235\":1,\"236\":1}}],[\"仅用于其他\",{\"1\":{\"181\":1}}],[\"成功的调用返回errnil\",{\"1\":{\"234\":1}}],[\"成功的复制将返回err\",{\"1\":{\"227\":1}}],[\"除非需要多次读取才能使用单次写入\",{\"1\":{\"233\":1}}],[\"管道上的读和写是一对一匹配的\",{\"1\":{\"233\":1}}],[\"非码属性必须完全依赖于候选码\",{\"1\":{\"294\":1}}],[\"非主属性\",{\"1\":{\"267\":1}}],[\"非eof错误\",{\"1\":{\"231\":1}}],[\"非nil的\",{\"1\":{\"196\":1}}],[\"运行事务并转储\",{\"1\":{\"321\":1}}],[\"运行次数\",{\"1\":{\"248\":1}}],[\"运行结果\",{\"1\":{\"229\":1,\"230\":1,\"231\":1,\"233\":1}}],[\"运行后的堆内存\",{\"1\":{\"248\":1}}],[\"运行后\",{\"1\":{\"53\":1}}],[\"供外部调用的函数\",{\"0\":{\"226\":1}}],[\"偏移量为off\",{\"1\":{\"225\":1,\"237\":1}}],[\"阻塞直到写入端到达或写入端被关闭\",{\"1\":{\"223\":1}}],[\"而非seeker\",{\"1\":{\"241\":1}}],[\"而且对象的数据刚好全部读完\",{\"1\":{\"212\":1}}],[\"而且对象的数据没有全部读完\",{\"1\":{\"212\":1}}],[\"而不用修改应用程序\",{\"1\":{\"265\":1}}],[\"而不用于向函数传递可选参数\",{\"1\":{\"179\":1}}],[\"而不是退出\",{\"1\":{\"248\":1}}],[\"而不是erreof\",{\"1\":{\"234\":1}}],[\"而不是分配临时缓冲区\",{\"1\":{\"228\":1}}],[\"而不是等待更多\",{\"1\":{\"196\":1}}],[\"而不是传递可选参数给函数\",{\"1\":{\"186\":1}}],[\"而不是\",{\"1\":{\"118\":1,\"156\":1,\"158\":1}}],[\"填满\",{\"1\":{\"212\":1}}],[\"填满后再返回\",{\"1\":{\"212\":1}}],[\"填上参数后的例子\",{\"1\":{\"120\":1}}],[\"继续向\",{\"1\":{\"212\":1}}],[\"处开始写入\",{\"1\":{\"213\":1}}],[\"处开始读取\",{\"1\":{\"212\":1}}],[\"处\",{\"1\":{\"213\":1}}],[\"处读出数据到\",{\"1\":{\"212\":1}}],[\"处理函数\",{\"0\":{\"60\":1}}],[\"处理\",{\"1\":{\"52\":1}}],[\"出现读取错误为止\",{\"1\":{\"209\":1}}],[\"直到事务开始的标志\",{\"1\":{\"319\":1}}],[\"直到它至少读取了min字节\",{\"1\":{\"235\":1}}],[\"直到它满足从pipereader读取的一个或多个读取\",{\"1\":{\"233\":1}}],[\"直到出现错误或eof\",{\"1\":{\"234\":1}}],[\"直到在src上达到eof或发生错误\",{\"1\":{\"227\":1}}],[\"直到一个或多个读取端消耗完所有数据或读取端关闭为止\",{\"1\":{\"224\":1}}],[\"直到对象的数据流全部写入完毕或遇到写入错误为止\",{\"1\":{\"210\":1}}],[\"直到\",{\"1\":{\"209\":1}}],[\"直接使用\",{\"1\":{\"345\":1}}],[\"直接加载关联关系\",{\"1\":{\"172\":1}}],[\"直接执行sql语句\",{\"0\":{\"150\":1}}],[\"直接返回cookie值\",{\"1\":{\"96\":1}}],[\"组成\",{\"1\":{\"259\":1}}],[\"组合接口是对多个接口进行了组合\",{\"1\":{\"200\":1}}],[\"组合接口\",{\"0\":{\"200\":1}}],[\"组件\",{\"0\":{\"28\":1,\"35\":1},\"1\":{\"35\":1}}],[\"报错后在进行close的操作\",{\"1\":{\"199\":1}}],[\"报告这个\",{\"1\":{\"52\":1}}],[\"流\",{\"1\":{\"199\":1}}],[\"光标默认在文件开头\",{\"1\":{\"198\":1}}],[\"若无外力作用\",{\"1\":{\"312\":1}}],[\"若\",{\"1\":{\"197\":1}}],[\"若一些数据可用但不到\",{\"1\":{\"196\":1}}],[\"行为后正确地处理i\",{\"1\":{\"196\":1}}],[\"前处理\",{\"1\":{\"196\":1}}],[\"前面入门案例中\",{\"1\":{\"114\":1}}],[\"无论如何\",{\"1\":{\"196\":1}}],[\"情况\",{\"1\":{\"196\":1}}],[\"个字节准确地读取到buf中\",{\"1\":{\"236\":1}}],[\"个字节后遇到一个错误或\",{\"1\":{\"196\":1}}],[\"个字节\",{\"1\":{\"196\":1}}],[\"却没有显式的返回错误\",{\"1\":{\"194\":1}}],[\"某些使用io\",{\"1\":{\"194\":1}}],[\"包括建立检查点时刻所有正在执行的事务清单\",{\"1\":{\"320\":1}}],[\"包括程序延迟和资源等待\",{\"1\":{\"248\":1}}],[\"包装\",{\"1\":{\"217\":1}}],[\"包中的那些\",{\"1\":{\"193\":1}}],[\"包含哪些内容\",{\"0\":{\"320\":1}}],[\"包含在任意候选码中的属性\",{\"1\":{\"267\":1}}],[\"包含内存回收的概要信息和暂停的时间\",{\"1\":{\"248\":1}}],[\"包含\",{\"1\":{\"19\":1}}],[\"告诉阻塞函数在超时过后应该放弃它的工作\",{\"1\":{\"190\":1}}],[\"告诉阻塞函数一旦到达该时间就应该结束它的工作\",{\"1\":{\"189\":1}}],[\"示例\",{\"1\":{\"188\":1,\"189\":1,\"190\":1}}],[\"示例程序\",{\"1\":{\"53\":1}}],[\"取消这个上下文会释放与之相关的资源\",{\"1\":{\"190\":1}}],[\"取消此上下文将释放与其关联的资源\",{\"1\":{\"188\":1,\"189\":1}}],[\"取消信号和其他请求范围的值\",{\"1\":{\"179\":1}}],[\"k\",{\"1\":{\"186\":3}}],[\"key来定义外码\",{\"1\":{\"285\":1}}],[\"key来定义\",{\"1\":{\"284\":1}}],[\"key2\",{\"1\":{\"186\":1}}],[\"key1\",{\"1\":{\"186\":4}}],[\"key\",{\"1\":{\"111\":1,\"115\":1,\"116\":1,\"134\":1,\"171\":1,\"181\":1,\"183\":3,\"186\":2}}],[\"另外一种是定义为表级约束条件\",{\"1\":{\"284\":1}}],[\"另外\",{\"1\":{\"186\":1}}],[\"赋值时\",{\"1\":{\"186\":1}}],[\"函数来设置当前程序并发时占用的cpu逻辑核心数\",{\"1\":{\"251\":1}}],[\"函数或父上下文的\",{\"1\":{\"189\":1}}],[\"函数被调用或父上下文的\",{\"1\":{\"188\":1}}],[\"函数原型\",{\"0\":{\"188\":1,\"189\":1,\"190\":1}}],[\"函数\",{\"1\":{\"186\":2,\"188\":1,\"189\":1}}],[\"函数返回一个非nil的空context\",{\"1\":{\"184\":1,\"185\":1}}],[\"函数说明\",{\"1\":{\"144\":1}}],[\"或reads\",{\"1\":{\"233\":1}}],[\"或直到出错\",{\"1\":{\"229\":1}}],[\"或\",{\"1\":{\"209\":1}}],[\"或nil\",{\"1\":{\"183\":1}}],[\"或者\",{\"1\":{\"212\":1}}],[\"或者使用find和limit的组合进行查询\",{\"1\":{\"143\":1}}],[\"或者使用原生\",{\"1\":{\"141\":1}}],[\"或者启用\",{\"1\":{\"138\":1,\"141\":1}}],[\"或者控制器处理函数\",{\"1\":{\"105\":1}}],[\"或者进行多版本开发\",{\"1\":{\"61\":1}}],[\"值来说明为什么没有将\",{\"1\":{\"212\":1,\"213\":1}}],[\"值查询map中\",{\"1\":{\"183\":1}}],[\"值数据\",{\"1\":{\"105\":1}}],[\"该事务无法到达提交点\",{\"1\":{\"323\":1}}],[\"该reader向w写入从r读取的内容\",{\"1\":{\"243\":1}}],[\"该方法根据\",{\"1\":{\"183\":1}}],[\"该方法描述\",{\"1\":{\"183\":1}}],[\"该通道代表完成工作时关闭取消上下文\",{\"1\":{\"183\":1}}],[\"语言灵活\",{\"1\":{\"272\":1}}],[\"语句中使用\",{\"1\":{\"183\":1}}],[\"语法\",{\"1\":{\"18\":1,\"35\":1}}],[\"语法进行了扩展\",{\"1\":{\"17\":1}}],[\"语法扩展\",{\"1\":{\"16\":1}}],[\"连续调用两次unreadrune方法而中间没有调用readrune时\",{\"1\":{\"219\":1}}],[\"连续调用两次unreadbyte方法而中间没有调用readbyte时\",{\"1\":{\"216\":1}}],[\"连续调用value相同的键返回相同的结果\",{\"1\":{\"183\":1}}],[\"连续调用done将返回相同的值\",{\"1\":{\"183\":1}}],[\"连续调用deadline会返回相同的结果\",{\"1\":{\"183\":1}}],[\"连接池最大允许的空闲连接数\",{\"1\":{\"123\":1}}],[\"连接池配置\",{\"0\":{\"123\":1}}],[\"连接数据库\",{\"0\":{\"121\":1}}],[\"连接数据库主要是两个步骤\",{\"1\":{\"119\":1}}],[\"连接数据库失败\",{\"1\":{\"111\":1}}],[\"本身存在的表\",{\"1\":{\"276\":1}}],[\"本身不包含任何值\",{\"1\":{\"181\":1}}],[\"本包的gomaxprocs函数可以查询和修改该限制\",{\"1\":{\"248\":1}}],[\"本页面就是一个示例\",{\"1\":{\"4\":1}}],[\"名为emptyctx\",{\"1\":{\"181\":1}}],[\"空的\",{\"1\":{\"181\":1}}],[\"空\",{\"0\":{\"181\":1}}],[\"凡是实现该接口的类都可称为是一种\",{\"1\":{\"179\":1}}],[\"保护数据库防止不合法的使用所造成的数据泄露\",{\"1\":{\"282\":1}}],[\"保护数据的一致性和准确性\",{\"1\":{\"270\":1}}],[\"保持包之间的接口一致\",{\"1\":{\"179\":1}}],[\"保存user\",{\"1\":{\"171\":1}}],[\"保存点\",{\"0\":{\"159\":1}}],[\"保存订单失败\",{\"1\":{\"158\":1}}],[\"保存订单\",{\"1\":{\"158\":1}}],[\"保存数据\",{\"0\":{\"135\":1}}],[\"翻译成中文是\",{\"1\":{\"179\":1}}],[\"描述两段锁结构\",{\"0\":{\"315\":1}}],[\"描述数据库的对象和对象之间的联系\",{\"1\":{\"262\":1}}],[\"描述数据与数据之间的关系\",{\"1\":{\"259\":1}}],[\"描述了数据库中数据的组织方式和特征\",{\"1\":{\"259\":1}}],[\"描述和存储\",{\"1\":{\"259\":1}}],[\"描述调度\",{\"1\":{\"248\":1}}],[\"描述\",{\"1\":{\"171\":1}}],[\"即时更新技术\",{\"1\":{\"323\":1}}],[\"即便它是临时的\",{\"1\":{\"197\":1}}],[\"即使\",{\"1\":{\"196\":1}}],[\"即userid或者表字段是user\",{\"1\":{\"171\":1}}],[\"即可\",{\"1\":{\"118\":1}}],[\"假设后面还有几百个字段\",{\"1\":{\"169\":1}}],[\"假设有一个商品表\",{\"1\":{\"115\":1}}],[\"智能选择字段\",{\"0\":{\"169\":1}}],[\"q\",{\"1\":{\"168\":3}}],[\"queryfields\",{\"1\":{\"154\":1}}],[\"querymap\",{\"1\":{\"68\":1}}],[\"queryarray\",{\"1\":{\"67\":1}}],[\"query\",{\"1\":{\"56\":2,\"66\":4,\"144\":2,\"168\":1}}],[\"钩子方法的函数签名应该是\",{\"1\":{\"160\":1}}],[\"之后调用的函数\",{\"1\":{\"160\":1}}],[\"之前的数据库和\",{\"1\":{\"121\":2}}],[\"之前的数据库不支持\",{\"1\":{\"121\":1}}],[\"方法进行创建\",{\"1\":{\"224\":1}}],[\"方法的包装\",{\"1\":{\"218\":1}}],[\"方法原型\",{\"0\":{\"184\":1,\"185\":1,\"186\":1}}],[\"方法\",{\"1\":{\"159\":1,\"199\":1}}],[\"方法找不到记录时\",{\"1\":{\"143\":1}}],[\"结构冲突\",{\"1\":{\"301\":1}}],[\"结构体sectionreader的创建方法\",{\"1\":{\"225\":1,\"237\":1}}],[\"结构体\",{\"0\":{\"221\":1},\"1\":{\"58\":2,\"118\":1}}],[\"结合起来\",{\"1\":{\"299\":1}}],[\"结束协程\",{\"1\":{\"250\":1}}],[\"结束下单流程\",{\"1\":{\"158\":1}}],[\"库存减一\",{\"1\":{\"158\":1}}],[\"否则err将为errclosedpipe\",{\"1\":{\"224\":1}}],[\"否则err为eof\",{\"1\":{\"223\":1}}],[\"否则\",{\"1\":{\"158\":1,\"227\":1,\"244\":1}}],[\"否则会返回错误gorm\",{\"1\":{\"138\":1}}],[\"遇到错误时回滚事务\",{\"1\":{\"158\":1}}],[\"手动事务\",{\"0\":{\"158\":1}}],[\"从以下几个角度考虑\",{\"0\":{\"303\":1}}],[\"从一个或几个基本表导出的表是一个虚表\",{\"1\":{\"276\":1}}],[\"从而实现并行的效果\",{\"1\":{\"251\":1}}],[\"从而提供性能\",{\"1\":{\"154\":1}}],[\"从src复制到dst\",{\"1\":{\"229\":1}}],[\"从sql中能看的出来\",{\"1\":{\"172\":1}}],[\"从数据的起始位置偏移\",{\"1\":{\"212\":1,\"213\":1}}],[\"从对象数据流的\",{\"1\":{\"212\":1}}],[\"从索引值为3处开始读\",{\"1\":{\"198\":1}}],[\"从\",{\"1\":{\"164\":1,\"209\":1}}],[\"从这里开始\",{\"1\":{\"156\":1,\"158\":1}}],[\"操作\",{\"1\":{\"156\":1,\"158\":1}}],[\"操作数据库需要预先定义模型\",{\"1\":{\"114\":1}}],[\"带有close\",{\"1\":{\"199\":1}}],[\"带有\",{\"1\":{\"154\":2}}],[\"开启事务\",{\"1\":{\"158\":1}}],[\"开启预编译模式\",{\"1\":{\"154\":1}}],[\"开始事务\",{\"1\":{\"158\":1,\"161\":1,\"162\":1,\"163\":1}}],[\"开发中尽量使用批操作来替代游标\",{\"1\":{\"280\":1}}],[\"开发常用的并发编程技术\",{\"1\":{\"179\":1}}],[\"开发的时候经常需要设置数据库连接超时参数\",{\"1\":{\"120\":1}}],[\"开发者自行处理\",{\"1\":{\"66\":1}}],[\"所有更新类型的日志安全的存储到存储器之前\",{\"1\":{\"323\":1}}],[\"所有的函数依赖\",{\"1\":{\"294\":1}}],[\"所有视图都是直接或间接的由基本表定义的\",{\"1\":{\"276\":1}}],[\"所有会话\",{\"1\":{\"154\":1}}],[\"所以它不会将读取的eof视为要报告的错误\",{\"1\":{\"227\":1}}],[\"所以\",{\"1\":{\"199\":1}}],[\"所以只要在这个上下文中运行的操作完成\",{\"1\":{\"190\":1}}],[\"所以需要传递一个绑定参数\",{\"1\":{\"150\":1}}],[\"所以这里只能使用scan查询函数\",{\"1\":{\"149\":1}}],[\"所以一般建议是使用should开头的bind\",{\"1\":{\"66\":1}}],[\"关系中元组在组成主键的属性上不能有空值\",{\"1\":{\"268\":1}}],[\"关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖\",{\"1\":{\"294\":1}}],[\"关系模式r中的属性k是其他关系模式的主键\",{\"1\":{\"267\":1}}],[\"关系模式中候选码中选取的一个作为主码\",{\"1\":{\"267\":1}}],[\"关系模式\",{\"1\":{\"267\":1}}],[\"关系模型的完整性约束包括实体完整性\",{\"1\":{\"262\":1}}],[\"关系模型只有关系一种数据结构\",{\"1\":{\"262\":1}}],[\"关系\",{\"1\":{\"267\":1}}],[\"关系数据库的设计理论\",{\"0\":{\"292\":1}}],[\"关系数据库\",{\"0\":{\"267\":1}}],[\"关系代数和关系演算\",{\"1\":{\"262\":1}}],[\"关系约束\",{\"1\":{\"171\":1,\"286\":1}}],[\"关联标签\",{\"1\":{\"171\":1}}],[\"关联操作\",{\"0\":{\"171\":1}}],[\"关联后的\",{\"1\":{\"161\":1,\"162\":1}}],[\"关联前的\",{\"1\":{\"161\":1,\"162\":1}}],[\"关闭后如果对管道的读取端进行读取操作\",{\"1\":{\"224\":1}}],[\"关闭后如果对管道的写入端进行写入操作\",{\"1\":{\"223\":1}}],[\"关闭的原因\",{\"1\":{\"183\":1}}],[\"关闭仍然是可读的\",{\"1\":{\"183\":1}}],[\"关闭预编译模式\",{\"1\":{\"154\":1}}],[\"关闭\",{\"1\":{\"154\":1}}],[\"关于这些扩展\",{\"1\":{\"17\":1}}],[\"时都会创建一个\",{\"1\":{\"154\":1}}],[\"时间戳\",{\"1\":{\"111\":1,\"332\":1}}],[\"左右\",{\"1\":{\"154\":1}}],[\"官方示例\",{\"1\":{\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1}}],[\"官方包实现了几个常用的context\",{\"1\":{\"179\":1}}],[\"官方说大致能提升30\",{\"1\":{\"154\":1}}],[\"官方支持的数据库类型有\",{\"1\":{\"119\":1}}],[\"允许应用程序对查询结果进行修改\",{\"1\":{\"280\":1}}],[\"允许应用程序逐行处理查询结果\",{\"1\":{\"280\":1}}],[\"允许程序员在结果集中移动到特定的行或记录\",{\"1\":{\"280\":1}}],[\"允许改变\",{\"1\":{\"154\":1}}],[\"允许更新关联数据\",{\"1\":{\"154\":1}}],[\"允许不带条件的更新\",{\"1\":{\"154\":1}}],[\"允许通过\",{\"1\":{\"121\":1}}],[\"跳过钩子\",{\"1\":{\"154\":1}}],[\"新db\",{\"1\":{\"154\":1}}],[\"新建一个中间件非常简单\",{\"1\":{\"52\":1}}],[\"生成\",{\"1\":{\"154\":1}}],[\"有效期30分钟\",{\"1\":{\"345\":1}}],[\"有效时间\",{\"1\":{\"95\":1}}],[\"有什么作用\",{\"0\":{\"324\":1}}],[\"有组织\",{\"1\":{\"259\":1}}],[\"有一些配置\",{\"1\":{\"154\":1}}],[\"互不影响\",{\"1\":{\"154\":1}}],[\"作用\",{\"1\":{\"287\":1}}],[\"作用域允许你复用通用的逻辑\",{\"1\":{\"168\":1}}],[\"作为绑定参数\",{\"1\":{\"150\":1}}],[\"作者设置为\",{\"1\":{\"33\":1}}],[\"因竞争资源而造成的一种阻塞的现象\",{\"1\":{\"312\":1}}],[\"因为复制被定义为从src读取直到eof\",{\"1\":{\"227\":1}}],[\"因为周围的函数还没有扩展到接受context参数\",{\"1\":{\"185\":1}}],[\"因为前面没成功执行什么数据库更新操作\",{\"1\":{\"158\":1}}],[\"因为sql语句使用了一个问号\",{\"1\":{\"150\":1}}],[\"因此它不会将读取的eof视为要报告的错误\",{\"1\":{\"234\":1}}],[\"因此在此上下文中运行的操作完成后\",{\"1\":{\"188\":1,\"189\":1}}],[\"因此在事务完成之前该事务中所作的更改是不可见的\",{\"1\":{\"161\":1}}],[\"因此需要通过key查询数据\",{\"1\":{\"98\":1}}],[\"因此可以借助于\",{\"1\":{\"16\":1}}],[\"因此\",{\"1\":{\"13\":1}}],[\"但要在转储期间记录数据活动的日志\",{\"1\":{\"321\":1}}],[\"但它们不会影响运行时环境\",{\"1\":{\"248\":1}}],[\"但会重复收集\",{\"1\":{\"248\":1}}],[\"但在readat会报错\",{\"1\":{\"241\":1}}],[\"但将调用read时返回的错误改为err\",{\"1\":{\"224\":1}}],[\"但将调用write时返回的错误改为err\",{\"1\":{\"223\":1}}],[\"但将返回的数据量限制为n个字节\",{\"1\":{\"222\":1,\"230\":1}}],[\"但是在hbuilderx的内部浏览器运行起来是正常的\",{\"1\":{\"343\":1}}],[\"但是可以将信号发给指定用户\",{\"1\":{\"338\":1}}],[\"但是没有修改数据库\",{\"1\":{\"322\":1}}],[\"但是不能表达所有的查询\",{\"1\":{\"278\":1}}],[\"但是readerat读取内容是无视seeker偏移量的\",{\"1\":{\"241\":1}}],[\"但是里面的close就是个空函数\",{\"1\":{\"202\":1}}],[\"但是行为没有定义\",{\"1\":{\"199\":1}}],[\"但是这个结构体并没有绑定goods表\",{\"1\":{\"149\":1}}],[\"但提供的缓冲不够大\",{\"1\":{\"194\":1}}],[\"但不执行\",{\"1\":{\"154\":1}}],[\"但没有响应体\",{\"1\":{\"56\":1}}],[\"等价于\",{\"1\":{\"149\":1,\"158\":1}}],[\"等效于\",{\"1\":{\"118\":3}}],[\"定位和导航\",{\"1\":{\"280\":1}}],[\"定一个result结构体类型\",{\"1\":{\"149\":1}}],[\"定义触发器\",{\"1\":{\"287\":1}}],[\"定义完整性约束条件\",{\"1\":{\"273\":1}}],[\"定义视图\",{\"1\":{\"273\":1}}],[\"定义模式\",{\"1\":{\"273\":1}}],[\"定义数据的安全性要求和完整性约束条件\",{\"1\":{\"266\":1}}],[\"定义数据操作的方法有两种\",{\"1\":{\"262\":1}}],[\"定义一个\",{\"1\":{\"118\":1}}],[\"定义一个存放模板文件的templates文件夹\",{\"1\":{\"87\":1}}],[\"定义golang字段和表字段的关系\",{\"1\":{\"111\":1}}],[\"定义user模型\",{\"1\":{\"111\":1}}],[\"定义\",{\"1\":{\"60\":1,\"284\":1,\"285\":1}}],[\"统计每个商品分类下面有多少个商品\",{\"1\":{\"149\":1}}],[\"统一错误处理\",{\"1\":{\"103\":1}}],[\"排他锁\",{\"1\":{\"328\":1}}],[\"排它锁\",{\"1\":{\"311\":1}}],[\"排序\",{\"1\":{\"146\":1}}],[\"排除\",{\"1\":{\"138\":1}}],[\"则称k是r的外键\",{\"1\":{\"267\":1}}],[\"则直接调用其writestring方法\",{\"1\":{\"244\":1}}],[\"则readfull返回errunexpectedeof\",{\"1\":{\"236\":1}}],[\"则readatleast返回errshortbuffer\",{\"1\":{\"235\":1}}],[\"则readatleast返回errunexpectedeof\",{\"1\":{\"235\":1}}],[\"则read将返回该错误\",{\"1\":{\"231\":1}}],[\"则整个写操作将停止并返回错误\",{\"1\":{\"232\":1}}],[\"则使用该接口实现副本\",{\"1\":{\"229\":1}}],[\"则使用当前时间填充\",{\"1\":{\"118\":1}}],[\"则buf将不用于执行复制\",{\"1\":{\"228\":1}}],[\"则copybuffer会panic报错\",{\"1\":{\"228\":1}}],[\"则分配一个\",{\"1\":{\"228\":1}}],[\"则通过调用dst\",{\"1\":{\"227\":1}}],[\"则通过调用src\",{\"1\":{\"227\":1}}],[\"则该错误将作为err返回\",{\"1\":{\"224\":1}}],[\"则返回错误为err\",{\"1\":{\"223\":1}}],[\"则返回ok==false\",{\"1\":{\"183\":1}}],[\"则必须返回一个\",{\"1\":{\"213\":1}}],[\"则err\",{\"1\":{\"212\":2}}],[\"则需要返回一个\",{\"1\":{\"212\":1}}],[\"则应返回错误errunexpectedeof或者其它给出更多细节的错误\",{\"1\":{\"194\":1}}],[\"则释放资源\",{\"1\":{\"190\":1}}],[\"则修改将被回滚\",{\"1\":{\"161\":1}}],[\"则回滚事务\",{\"1\":{\"158\":1}}],[\"则db不在协程安全\",{\"1\":{\"154\":1}}],[\"则表示通过args参数绑定参数\",{\"1\":{\"144\":1}}],[\"错误才是eof\",{\"1\":{\"235\":1,\"236\":1}}],[\"错误或从随后的调用中返回错误\",{\"1\":{\"196\":1}}],[\"错误变量\",{\"0\":{\"194\":1}}],[\"错误了可以回滚事务\",{\"1\":{\"158\":1}}],[\"错误\",{\"1\":{\"143\":1,\"196\":1}}],[\"错误管理\",{\"1\":{\"52\":1}}],[\"当且仅当结果与某一次顺序串行执行的结果相同\",{\"1\":{\"314\":1}}],[\"当且仅当err\",{\"1\":{\"235\":1,\"236\":1}}],[\"当用户进行操作的时候会检查主码值是否唯一或者为空\",{\"1\":{\"284\":1}}],[\"当模式改变时只需要改变模式\",{\"1\":{\"265\":1}}],[\"当前堆内存\",{\"1\":{\"248\":1}}],[\"当前会话\",{\"1\":{\"154\":2}}],[\"当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时\",{\"1\":{\"248\":1}}],[\"当同时实现多个接口时\",{\"1\":{\"200\":1}}],[\"当从一个已关闭的pipe读取或者写入时\",{\"1\":{\"194\":1}}],[\"当截止日期到期\",{\"1\":{\"189\":1}}],[\"当返回的\",{\"1\":{\"188\":1}}],[\"当不清楚要使用哪个context或者它还不可用时\",{\"1\":{\"185\":1}}],[\"当cancel函数返回\",{\"1\":{\"183\":1}}],[\"当context关闭后\",{\"1\":{\"183\":1}}],[\"当\",{\"1\":{\"143\":1,\"196\":1}}],[\"当bind是必须的时候\",{\"1\":{\"66\":1}}],[\"同一个对象在不同地方有不同的身份\",{\"1\":{\"301\":1}}],[\"同样的bytes在read上即使设大了也会没事\",{\"1\":{\"241\":1}}],[\"同样的道理\",{\"1\":{\"141\":1}}],[\"同时也是恢复技术和并发控制的基本构建块\",{\"1\":{\"307\":1}}],[\"同时还能建立数据的外模式\",{\"1\":{\"296\":1}}],[\"同时调用\",{\"1\":{\"183\":1}}],[\"同时默认情况下\",{\"1\":{\"115\":1}}],[\"同时访问的时候\",{\"1\":{\"56\":1}}],[\"同时每个页面包含\",{\"1\":{\"10\":1}}],[\"毛巾\",{\"1\":{\"134\":1,\"135\":1}}],[\"just\",{\"1\":{\"188\":1}}],[\"join\",{\"1\":{\"172\":1}}],[\"joins\",{\"1\":{\"172\":1}}],[\"joinreferences\",{\"1\":{\"171\":1}}],[\"joinforeignkey\",{\"1\":{\"171\":1}}],[\"jinzhu\",{\"1\":{\"130\":2,\"131\":3,\"132\":1,\"138\":1}}],[\"jinzhu3\",{\"1\":{\"130\":1}}],[\"jinzhu2\",{\"1\":{\"130\":1}}],[\"jinzhu1\",{\"1\":{\"130\":1}}],[\"json方式\",{\"0\":{\"78\":1}}],[\"json参数\",{\"0\":{\"71\":1}}],[\"json\",{\"1\":{\"52\":3,\"53\":1,\"58\":7,\"59\":2,\"61\":4,\"66\":5,\"67\":3,\"68\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"78\":1,\"98\":1,\"99\":1,\"100\":1,\"111\":5,\"344\":2}}],[\"批量插入\",{\"0\":{\"130\":1}}],[\"返回当前系统的\",{\"1\":{\"252\":1}}],[\"返回时\",{\"1\":{\"229\":1,\"235\":1,\"236\":1}}],[\"返回写入的字节数和写入时遇到的错误\",{\"1\":{\"213\":1}}],[\"返回读取的字节数\",{\"1\":{\"212\":1}}],[\"返回值\",{\"1\":{\"209\":2,\"210\":2}}],[\"返回移动后的指针位置和移动过程中遇到的任何错误\",{\"1\":{\"198\":1}}],[\"返回的n\",{\"1\":{\"197\":1}}],[\"返回的\",{\"1\":{\"196\":1}}],[\"返回父上下文的一个副本\",{\"1\":{\"189\":1}}],[\"返回父对象的副本\",{\"1\":{\"186\":1}}],[\"返回上下文的done通道将被关闭\",{\"1\":{\"189\":1}}],[\"返回上下文的\",{\"1\":{\"188\":1}}],[\"返回带有新的\",{\"1\":{\"188\":1}}],[\"返回影响行数为0\",{\"1\":{\"158\":1}}],[\"返回任何错误都会回滚事务\",{\"1\":{\"156\":1}}],[\"返回查询匹配的行数\",{\"1\":{\"148\":1}}],[\"返回插入记录的条数\",{\"1\":{\"127\":1}}],[\"返回插入数据的主键\",{\"1\":{\"127\":1}}],[\"返回\",{\"1\":{\"127\":1,\"156\":1,\"190\":1,\"209\":1}}],[\"返回顶部按钮\",{\"1\":{\"4\":1,\"10\":1}}],[\"调度器会把go代码同时调度到8个os线程上\",{\"1\":{\"251\":1}}],[\"调用者应将这种情况视作空操作\",{\"1\":{\"196\":1}}],[\"调用者应当总在考虑到错误\",{\"1\":{\"196\":1}}],[\"调用返回的\",{\"1\":{\"189\":1}}],[\"调用下一个中间件\",{\"1\":{\"105\":1}}],[\"调试模式\",{\"0\":{\"122\":1}}],[\"详情参考\",{\"1\":{\"121\":1}}],[\"详情容器\",{\"1\":{\"19\":1}}],[\"驱动\",{\"1\":{\"121\":1}}],[\"驱动程序提供了\",{\"1\":{\"121\":1}}],[\"选项自定义\",{\"1\":{\"121\":1}}],[\"用references来指明这些外码参照哪些表的主码\",{\"1\":{\"285\":1}}],[\"用户也被赋予相应的许可证\",{\"1\":{\"289\":1}}],[\"用户访问的时候检查用户存取权限\",{\"1\":{\"289\":1}}],[\"用户表示和鉴别\",{\"1\":{\"288\":1}}],[\"用户自定义的完整性\",{\"0\":{\"286\":1}}],[\"用户通过指定存储过程的名字并给出参数\",{\"1\":{\"275\":1}}],[\"用户的应用程序和数据库的逻辑结构无关\",{\"1\":{\"265\":1}}],[\"用户的应用程序与数据库的物理存储结构无关\",{\"1\":{\"265\":1}}],[\"用法都是开启某某连接\",{\"1\":{\"199\":1}}],[\"用于快速查找和访问数据库表中的特定行\",{\"1\":{\"330\":1}}],[\"用于数据库恢复\",{\"1\":{\"324\":1}}],[\"用于数据建模\",{\"1\":{\"259\":1}}],[\"用于存放sql语句的执行结果\",{\"1\":{\"280\":1}}],[\"用于\",{\"1\":{\"181\":1}}],[\"用来分析\",{\"1\":{\"291\":1}}],[\"用来存放元数据\",{\"1\":{\"259\":1}}],[\"用来移动数据的读写指针\",{\"1\":{\"198\":1}}],[\"用来保存查询结果\",{\"1\":{\"149\":1}}],[\"用来描述数据库连接信息\",{\"1\":{\"120\":1}}],[\"用指定的字段创建\",{\"0\":{\"128\":1}}],[\"用\",{\"1\":{\"121\":1}}],[\"精度\",{\"1\":{\"121\":1}}],[\"获取pid\",{\"1\":{\"338\":1}}],[\"获取进程id后使用kill\",{\"1\":{\"338\":1}}],[\"获取当前时间的实现\",{\"1\":{\"154\":1}}],[\"获取详情\",{\"1\":{\"121\":1}}],[\"获取http的请求参数\",{\"1\":{\"60\":1}}],[\"参照完整性的定义和违约处理\",{\"0\":{\"285\":1}}],[\"参照完整性\",{\"1\":{\"268\":1}}],[\"参照完整性和用户定义的完整性约束\",{\"1\":{\"262\":1}}],[\"参考\",{\"1\":{\"121\":1,\"183\":1}}],[\"参数mysession\",{\"1\":{\"98\":1}}],[\"参数是用于加密的密钥\",{\"1\":{\"98\":1}}],[\"参数名\",{\"1\":{\"95\":1,\"144\":1}}],[\"参数说明\",{\"1\":{\"95\":1,\"100\":1,\"144\":1}}],[\"您的账号正在进行邮箱验证\",{\"1\":{\"345\":1}}],[\"您可以回滚较大事务内执行的一部分操作\",{\"1\":{\"157\":1}}],[\"您可以配置\",{\"1\":{\"118\":1}}],[\"您应该使用\",{\"1\":{\"156\":1,\"158\":1}}],[\"您需要将\",{\"1\":{\"120\":1}}],[\"编码\",{\"1\":{\"120\":1}}],[\"编辑此页链接\",{\"1\":{\"4\":1}}],[\"要么取参照表中某个元组的主码值\",{\"1\":{\"268\":1}}],[\"要么取空值\",{\"1\":{\"268\":1}}],[\"要比\",{\"1\":{\"212\":1}}],[\"要支持完整的\",{\"1\":{\"120\":1}}],[\"要使用不同名称的字段\",{\"1\":{\"118\":1}}],[\"写h5转app不支持在拦截器处设置请求头\",{\"1\":{\"343\":1}}],[\"写入时遇到的任何错误均报告为读取错误\",{\"1\":{\"243\":1}}],[\"写入必须在读取完成之前完成\",{\"1\":{\"243\":1}}],[\"写超时时间\",{\"1\":{\"120\":1}}],[\"写作日期为\",{\"1\":{\"33\":1}}],[\"写作指南\",{\"0\":{\"2\":1}}],[\"读未提交\",{\"1\":{\"309\":1}}],[\"读\",{\"1\":{\"309\":1}}],[\"读取将返回eof\",{\"1\":{\"231\":1}}],[\"读取单个utf\",{\"1\":{\"218\":1}}],[\"读取cookie\",{\"0\":{\"96\":1}}],[\"读超时时间\",{\"1\":{\"120\":1}}],[\"客户端字符集为utf8\",{\"1\":{\"120\":1}}],[\"后写数据库\",{\"0\":{\"322\":1}}],[\"后面k\",{\"1\":{\"120\":1}}],[\"后端代码\",{\"1\":{\"87\":1}}],[\"涉及参数\",{\"1\":{\"120\":1}}],[\"涉及到的数据库sql\",{\"1\":{\"111\":1}}],[\"一次转储所有的数据\",{\"1\":{\"321\":1}}],[\"一次封锁法\",{\"1\":{\"313\":1}}],[\"一级封锁协议可以保证不丢失修改\",{\"1\":{\"309\":1}}],[\"一致性\",{\"1\":{\"308\":1,\"331\":1}}],[\"一种是定义为列级约束条件\",{\"1\":{\"284\":1}}],[\"一些非数据库操作\",{\"1\":{\"278\":1}}],[\"一些高级配置\",{\"1\":{\"121\":1}}],[\"一组为了完成特定功能的sql语句集\",{\"1\":{\"275\":1}}],[\"一张二维表\",{\"1\":{\"267\":1}}],[\"一旦所有输入均返回eof\",{\"1\":{\"231\":1}}],[\"一般看这个\",{\"1\":{\"248\":1}}],[\"一般来说是io\",{\"1\":{\"194\":1}}],[\"一般携带一个截止日期\",{\"1\":{\"183\":1}}],[\"一般都包含数据库连接地址\",{\"1\":{\"120\":1}}],[\"一个事务的所有更新操作对应的日志记录写入存储器之前\",{\"1\":{\"323\":1}}],[\"一个事务内读到了两个不相同的数据\",{\"1\":{\"309\":1}}],[\"一个业务同时对多个表进行操作\",{\"1\":{\"275\":1}}],[\"一个属性集的值可唯一标识一个关系的元素\",{\"1\":{\"267\":1}}],[\"一个取消信号和其他跨越api边界的值\",{\"1\":{\"183\":1}}],[\"一个中间执行完再轮到下一个中间件执行\",{\"1\":{\"103\":1}}],[\"一个uri含\",{\"1\":{\"56\":1}}],[\"一个发生在\",{\"1\":{\"52\":1}}],[\"一个拥有\",{\"1\":{\"23\":1}}],[\"来转义\",{\"1\":{\"345\":1}}],[\"来查看进程id\",{\"1\":{\"338\":1}}],[\"来执行它\",{\"1\":{\"275\":1}}],[\"来提供保存点以及回滚至保存点功能\",{\"1\":{\"159\":1}}],[\"来为\",{\"1\":{\"118\":1}}],[\"来解析\",{\"1\":{\"16\":1}}],[\"修改\",{\"1\":{\"274\":1}}],[\"修改为\",{\"1\":{\"118\":1}}],[\"修改资源的一部分\",{\"1\":{\"57\":1}}],[\"只转储更新过的数据\",{\"1\":{\"321\":1}}],[\"只需要支持要做什么\",{\"1\":{\"272\":1}}],[\"只需简单地将\",{\"1\":{\"118\":1}}],[\"只有err\",{\"1\":{\"229\":1}}],[\"只有实现\",{\"1\":{\"199\":1}}],[\"只是简单的实现了\",{\"1\":{\"181\":1}}],[\"只想要关联表的数据\",{\"1\":{\"172\":1}}],[\"只要给userprofile添加上相应的tag即可\",{\"1\":{\"171\":1}}],[\"只要将session的存储引擎改成redis即可\",{\"1\":{\"100\":1}}],[\"秒时间戳\",{\"1\":{\"118\":1}}],[\"纳\",{\"1\":{\"118\":1}}],[\"毫无作用\",{\"1\":{\"202\":1}}],[\"毫\",{\"1\":{\"118\":1}}],[\"追踪创建\",{\"1\":{\"118\":1}}],[\"约定使用\",{\"1\":{\"118\":1}}],[\"其中a\",{\"1\":{\"196\":1,\"197\":1,\"198\":1}}],[\"其中与键关联的值为val\",{\"1\":{\"186\":1}}],[\"其截止日期调整为不迟于d\",{\"1\":{\"189\":1}}],[\"其将被映射到引用表\",{\"1\":{\"171\":1}}],[\"其将被映射到当前表\",{\"1\":{\"171\":1}}],[\"其将被映射为连接表外键\",{\"1\":{\"171\":1}}],[\"其包括字段\",{\"1\":{\"118\":1}}],[\"其他事务回滚导致使用的数据不对\",{\"1\":{\"309\":1}}],[\"其他的可以查看官方文档\",{\"1\":{\"116\":1}}],[\"其他类型参数注入xml\",{\"1\":{\"71\":1}}],[\"临时表名\",{\"1\":{\"117\":1}}],[\"实体转化成表\",{\"1\":{\"331\":1}}],[\"实体完整性的定义和违约处理\",{\"0\":{\"284\":1}}],[\"实体完整性\",{\"1\":{\"268\":1}}],[\"实体完整性与参照完整性的规则\",{\"0\":{\"268\":1}}],[\"实现数据库安全性控制的常用方法和技术\",{\"0\":{\"288\":1}}],[\"实现业务规则或约束\",{\"1\":{\"287\":1}}],[\"实现该副本\",{\"1\":{\"227\":2}}],[\"实现了接口seeker的seek方法\",{\"1\":{\"225\":1,\"237\":1,\"241\":1}}],[\"实现了接口readerat的readat方法\",{\"1\":{\"225\":1,\"237\":1,\"240\":1}}],[\"实现了接口reader的read方法\",{\"1\":{\"225\":1,\"237\":1,\"239\":1}}],[\"实现tabler接口\",{\"1\":{\"117\":1}}],[\"实例化一个长度为4的\",{\"1\":{\"196\":1}}],[\"实例演示\",{\"1\":{\"196\":1,\"197\":1,\"198\":1}}],[\"实际上只定义了接口\",{\"1\":{\"179\":1}}],[\"实际的文章内容\",{\"1\":{\"7\":1}}],[\"默认值是机器上的cpu核心数量\",{\"1\":{\"251\":1}}],[\"默认gogc=100\",{\"1\":{\"248\":1}}],[\"默认gorm对struct字段名使用snake\",{\"1\":{\"115\":1}}],[\"默认表名\",{\"1\":{\"171\":1}}],[\"默认更新时间字段\",{\"1\":{\"118\":1}}],[\"默认创建时间字段\",{\"1\":{\"118\":1}}],[\"默认的表名为users\",{\"1\":{\"117\":1}}],[\"复数表名\",{\"1\":{\"117\":1}}],[\"zh\",{\"1\":{\"116\":1}}],[\"zhangsan\",{\"1\":{\"71\":1,\"79\":1,\"111\":1,\"127\":1}}],[\"忽略数据的读写指针\",{\"1\":{\"212\":1,\"213\":1}}],[\"忽略字段\",{\"0\":{\"129\":1},\"1\":{\"116\":1}}],[\"忽略maxage属性\",{\"1\":{\"95\":1}}],[\"例子\",{\"1\":{\"116\":1,\"118\":1,\"168\":1}}],[\"例如一个8核心的机器上\",{\"1\":{\"251\":1}}],[\"例如在ioutil中的nopcloser方法返回的就是一个readcloser\",{\"1\":{\"202\":1}}],[\"例如检查所需值的存在\",{\"1\":{\"52\":1}}],[\"例如\",{\"1\":{\"52\":2,\"105\":1,\"111\":1,\"115\":1,\"118\":2,\"120\":1,\"121\":2,\"130\":1,\"157\":1,\"159\":1,\"171\":1,\"248\":1}}],[\"将数据库的当前状态保存到磁盘上\",{\"1\":{\"321\":1}}],[\"将事务的修改从数据库中撤销\",{\"1\":{\"318\":1}}],[\"将事务的修改永久保存到数据库中\",{\"1\":{\"318\":1}}],[\"将某个事务的所有操作单元全部锁定的操作\",{\"1\":{\"310\":1}}],[\"将概念结构转化为关系模型\",{\"1\":{\"300\":1}}],[\"将概念结构设计阶段设计好的基本e\",{\"1\":{\"300\":1}}],[\"将e\",{\"1\":{\"296\":1}}],[\"将sql嵌入到变成语言中\",{\"1\":{\"278\":1}}],[\"将其写入复制到所有提供的写入器中\",{\"1\":{\"232\":1}}],[\"将其嵌入\",{\"1\":{\"118\":1}}],[\"将副本从src复制到dst\",{\"1\":{\"227\":1}}],[\"将设置err\",{\"1\":{\"218\":1}}],[\"将返回\",{\"1\":{\"212\":2}}],[\"将等待所有数据可用之后\",{\"1\":{\"212\":1}}],[\"将对象的数据流写入到\",{\"1\":{\"210\":1}}],[\"将内容读到缓冲区内\",{\"1\":{\"198\":1}}],[\"将内容读至buf\",{\"1\":{\"196\":1}}],[\"将\",{\"1\":{\"196\":1,\"197\":1,\"213\":1}}],[\"将停止后续的操作并回滚事务\",{\"1\":{\"160\":1}}],[\"将db的操作分离\",{\"1\":{\"154\":1}}],[\"将上述表翻译为模型后\",{\"1\":{\"115\":1}}],[\"将结构体翻译为sql语句\",{\"1\":{\"114\":1}}],[\"商品创建时间\",{\"1\":{\"134\":1}}],[\"商品类型\",{\"1\":{\"134\":1}}],[\"商品类型id\",{\"1\":{\"115\":1}}],[\"商品库存\",{\"1\":{\"134\":1}}],[\"商品价格\",{\"1\":{\"115\":1,\"134\":1}}],[\"商品名\",{\"1\":{\"115\":1,\"134\":1}}],[\"商品id\",{\"1\":{\"115\":1,\"134\":1}}],[\"商品模块\",{\"1\":{\"61\":1}}],[\"利用反射原理\",{\"1\":{\"114\":1}}],[\"底层都是使用的golang的database标准库\",{\"1\":{\"114\":1}}],[\"删除表的结构和所有数据\",{\"1\":{\"333\":1}}],[\"删除满足条件的记录\",{\"1\":{\"333\":1}}],[\"删除异常\",{\"1\":{\"293\":1}}],[\"删除或插入数据\",{\"1\":{\"280\":1}}],[\"删除时可用的\",{\"1\":{\"163\":1}}],[\"删除时自动被调用\",{\"1\":{\"160\":1}}],[\"删除操作会默认运行在事务上\",{\"1\":{\"161\":1}}],[\"删除等操作之前\",{\"1\":{\"160\":1}}],[\"删除数据\",{\"0\":{\"141\":1}}],[\"删除\",{\"0\":{\"163\":1},\"1\":{\"111\":1,\"163\":1,\"274\":1}}],[\"删除cookie\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"测试\",{\"1\":{\"111\":1}}],[\"绑定mysql表名为users\",{\"1\":{\"111\":1}}],[\"绑定users表\",{\"1\":{\"111\":1}}],[\"插入异常\",{\"1\":{\"293\":1}}],[\"插入记录至\",{\"1\":{\"161\":1}}],[\"插入数据\",{\"0\":{\"127\":1},\"1\":{\"111\":1}}],[\"插件来实现\",{\"1\":{\"16\":1}}],[\"字符串写入方法writestring的包装\",{\"1\":{\"220\":1}}],[\"字符串方式\",{\"0\":{\"77\":1}}],[\"字段\",{\"1\":{\"154\":1,\"169\":1}}],[\"字段追踪创建\",{\"1\":{\"115\":1}}],[\"字段名\",{\"1\":{\"111\":1}}],[\"密码之类的信息\",{\"1\":{\"120\":1}}],[\"密码\",{\"1\":{\"111\":2}}],[\"密码加密的文章\",{\"0\":{\"7\":1}}],[\"账号\",{\"1\":{\"111\":2,\"120\":1}}],[\"自底向上\",{\"1\":{\"299\":1}}],[\"自顶向下\",{\"1\":{\"299\":1}}],[\"自主存取控制\",{\"1\":{\"289\":1}}],[\"自主存取控制和强制存取控制\",{\"0\":{\"289\":1}}],[\"自动的把数据库中所有或者关键数据复制一份保存在磁盘上\",{\"1\":{\"324\":1}}],[\"自动化任务\",{\"1\":{\"287\":1}}],[\"自动事务\",{\"0\":{\"156\":1}}],[\"自然连接是一种特殊的等值连接\",{\"1\":{\"269\":1}}],[\"自然连接和等值连接的异同\",{\"0\":{\"269\":1}}],[\"自增id\",{\"1\":{\"111\":1,\"115\":1}}],[\"自定义字段\",{\"1\":{\"118\":3}}],[\"自定义个日志中间件\",{\"1\":{\"105\":1}}],[\"自定义中间件\",{\"0\":{\"105\":1}}],[\"自定义模板函数\",{\"0\":{\"89\":1}}],[\"自定义对齐\",{\"0\":{\"22\":1}}],[\"自定义标题\",{\"1\":{\"19\":5}}],[\"入门\",{\"0\":{\"111\":1}}],[\"注册<\",{\"1\":{\"345\":1}}],[\"注册上面自定义的日志中间件\",{\"1\":{\"105\":1}}],[\"注意事项\",{\"1\":{\"345\":1}}],[\"注\",{\"1\":{\"224\":1}}],[\"注入的键值数据\",{\"1\":{\"105\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"31\":1}}],[\"查找该事务的更新操作\",{\"1\":{\"319\":1}}],[\"查看运行时的内存情况\",{\"1\":{\"248\":1}}],[\"查看详情\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1}}],[\"查询用户的时候需要将其的性别和年龄查询出来\",{\"1\":{\"171\":1}}],[\"查询时会自动选择\",{\"1\":{\"169\":1}}],[\"查询时可用的\",{\"1\":{\"164\":1}}],[\"查询一列值\",{\"1\":{\"143\":1}}],[\"查询一条记录\",{\"1\":{\"143\":1}}],[\"查询多条记录\",{\"1\":{\"143\":1}}],[\"查询最后一条记录\",{\"1\":{\"143\":1}}],[\"查询第一条数据\",{\"1\":{\"143\":1}}],[\"查询函数\",{\"0\":{\"143\":1}}],[\"查询数据\",{\"0\":{\"142\":1}}],[\"查询\",{\"0\":{\"164\":1,\"172\":1},\"1\":{\"111\":1,\"160\":2}}],[\"查询我们之前在日志中间件\",{\"1\":{\"105\":1}}],[\"查询请求状态吗\",{\"1\":{\"105\":1}}],[\"导出的上下文关键变量的静态类型应该是指针或接口\",{\"1\":{\"186\":1}}],[\"导入gin包\",{\"1\":{\"105\":1}}],[\"导航栏\",{\"1\":{\"4\":1,\"10\":1}}],[\"不可以使用带有\",{\"1\":{\"345\":1}}],[\"不可重复读\",{\"1\":{\"309\":1}}],[\"不会被记录在日志中\",{\"1\":{\"333\":1}}],[\"不会改变表的结构或索引所占空间\",{\"1\":{\"333\":1}}],[\"不能回滚\",{\"1\":{\"333\":1}}],[\"不能和其他命令一起使用\",{\"1\":{\"333\":1}}],[\"不能直接用sql表达\",{\"1\":{\"278\":1}}],[\"不能修改此切片的数据\",{\"1\":{\"197\":1}}],[\"不需要指出怎么做\",{\"1\":{\"272\":1}}],[\"不包含在任意候选码中的属性\",{\"1\":{\"267\":1}}],[\"不确定\",{\"1\":{\"212\":1}}],[\"不足以填满\",{\"1\":{\"212\":1}}],[\"不应该是string类型或任何其他内置类型\",{\"1\":{\"186\":1}}],[\"不要在结构类型中存储上下文\",{\"1\":{\"179\":1}}],[\"不是db\",{\"1\":{\"158\":1}}],[\"不带之前的条件\",{\"1\":{\"154\":1}}],[\"不带条件不能进行删除\",{\"1\":{\"141\":1}}],[\"不支持重命名列\",{\"1\":{\"121\":1}}],[\"不支持重命名索引\",{\"1\":{\"121\":1}}],[\"不支持动态变化\",{\"1\":{\"117\":1}}],[\"不至于导致进程崩掉\",{\"1\":{\"104\":1}}],[\"不同版本之间路径是一致的\",{\"1\":{\"61\":1}}],[\"不同的\",{\"1\":{\"52\":1}}],[\"针对分组路由设置中间件\",{\"1\":{\"103\":1}}],[\"权限校验\",{\"1\":{\"103\":1}}],[\"格式\",{\"1\":{\"100\":1,\"120\":1}}],[\"第二段只释放锁\",{\"1\":{\"315\":1}}],[\"第一阶段只加锁\",{\"1\":{\"315\":1}}],[\"第5个参数\",{\"1\":{\"100\":1}}],[\"第4个参数\",{\"1\":{\"100\":1}}],[\"第3个参数\",{\"1\":{\"100\":1}}],[\"第2个参数\",{\"1\":{\"100\":1}}],[\"第1个参数\",{\"1\":{\"100\":1}}],[\"初始化和测试使用\",{\"1\":{\"184\":1}}],[\"初始化新的db\",{\"1\":{\"154\":1}}],[\"初始化基于redis的存储引擎\",{\"1\":{\"100\":1}}],[\"初始化session对象\",{\"1\":{\"98\":1}}],[\"没有对代表go代码的\",{\"1\":{\"248\":1}}],[\"没有内部缓冲\",{\"1\":{\"233\":1,\"243\":1}}],[\"没有价值\",{\"1\":{\"184\":1}}],[\"没有反射\",{\"1\":{\"52\":1}}],[\"没读到\",{\"1\":{\"98\":1}}],[\"指示事务将进行的锁定\",{\"1\":{\"328\":1}}],[\"指定偏移量读写接口\",{\"0\":{\"211\":1}}],[\"指定读写器读写接口\",{\"0\":{\"208\":1}}],[\"指定连接表的外键列名\",{\"1\":{\"171\":2}}],[\"指定连接表表名\",{\"1\":{\"171\":1}}],[\"指定多态值\",{\"1\":{\"171\":1}}],[\"指定多态类型\",{\"1\":{\"171\":1}}],[\"指定引用表的列名\",{\"1\":{\"171\":1}}],[\"指定当前模型的列作为连接表的外键\",{\"1\":{\"171\":1}}],[\"指定返回的字段\",{\"1\":{\"145\":1}}],[\"指定主键\",{\"1\":{\"116\":1}}],[\"指定列名\",{\"1\":{\"116\":1}}],[\"指的是可以拦截http请求\",{\"1\":{\"103\":1}}],[\"指的是session的名字\",{\"1\":{\"98\":1}}],[\"指南\",{\"2\":{\"11\":1}}],[\"创建触发器的步骤\",{\"0\":{\"287\":1},\"1\":{\"287\":1}}],[\"创建时可用的\",{\"1\":{\"161\":1}}],[\"创建时间\",{\"1\":{\"111\":2,\"115\":1}}],[\"创建\",{\"0\":{\"161\":1}}],[\"创建session的时候\",{\"1\":{\"154\":1}}],[\"创建基于cookie的存储引擎\",{\"1\":{\"98\":1}}],[\"创建型模式\",{\"0\":{\"48\":1}}],[\"安全性\",{\"0\":{\"282\":1},\"1\":{\"282\":1}}],[\"安全的在\",{\"1\":{\"19\":1}}],[\"安装gin\",{\"1\":{\"111\":1}}],[\"安装gorm包\",{\"1\":{\"111\":1}}],[\"安装mysql驱动\",{\"1\":{\"111\":1}}],[\"安装session包\",{\"1\":{\"98\":1}}],[\"达到删除cookie的目的\",{\"1\":{\"97\":1}}],[\"根据主键倒序排序后\",{\"1\":{\"143\":1}}],[\"根据主键正序排序后\",{\"1\":{\"143\":1}}],[\"根据主键删除\",{\"1\":{\"141\":1}}],[\"根据当前\",{\"1\":{\"121\":1}}],[\"根据cookie名字读取cookie值\",{\"1\":{\"96\":1}}],[\"根据类型获取\",{\"1\":{\"66\":1}}],[\"多版本并发控制\",{\"1\":{\"332\":1}}],[\"多对多关系转化成连接表\",{\"1\":{\"331\":1}}],[\"多层存取控制\",{\"1\":{\"288\":1}}],[\"多条件多表联合查询\",{\"1\":{\"275\":1}}],[\"多个事务并发执行\",{\"1\":{\"314\":1}}],[\"多个标签定义可以使用分号\",{\"1\":{\"116\":1}}],[\"多个模板渲染\",{\"0\":{\"88\":1}}],[\"多session\",{\"0\":{\"99\":1}}],[\"多少秒后cookie失效\",{\"1\":{\"95\":1}}],[\"相关\",{\"0\":{\"337\":1}}],[\"相关子查询和不相关子查询\",{\"0\":{\"279\":1}}],[\"相关信息\",{\"1\":{\"15\":1}}],[\"相当于删除cookie\",{\"1\":{\"95\":1}}],[\"单个调用将按顺序执行\",{\"1\":{\"233\":1}}],[\"单个字节写入方法的接口\",{\"1\":{\"217\":1}}],[\"单个字节读写接口\",{\"0\":{\"214\":1}}],[\"单位是秒\",{\"1\":{\"95\":1}}],[\"单词\",{\"1\":{\"23\":1}}],[\"说明没有库存了\",{\"1\":{\"158\":1}}],[\"说明\",{\"1\":{\"95\":1,\"116\":1,\"144\":1}}],[\"类似于unix\",{\"1\":{\"232\":1}}],[\"类似于这样\",{\"1\":{\"65\":1}}],[\"类型原型\",{\"0\":{\"182\":1,\"183\":1}}],[\"类型字段的默认长度\",{\"1\":{\"121\":1}}],[\"类型\",{\"1\":{\"95\":1}}],[\"服务器收到请求后\",{\"1\":{\"94\":1}}],[\"服务器不能记录浏览器的访问状态\",{\"1\":{\"94\":1}}],[\"每一列都是不可分割的数据项\",{\"1\":{\"294\":1}}],[\"每一个变量的具体定义\",{\"1\":{\"248\":1}}],[\"每一行打印的日志格式如下\",{\"1\":{\"248\":1}}],[\"每次\",{\"1\":{\"248\":1}}],[\"每次对pipewriter的写入都将阻塞\",{\"1\":{\"233\":1}}],[\"每次读取更新n以标记剩余可以读取的字节数\",{\"1\":{\"222\":1,\"230\":1}}],[\"每次的读写操作都是从指针位置开始的\",{\"1\":{\"198\":1}}],[\"每次向服务器发送请求时都会同时将该信息发送给服务器\",{\"1\":{\"94\":1}}],[\"每个数据到达提交点之前不能更新数据库\",{\"1\":{\"323\":1}}],[\"每个对象申请在独立的页和地址\",{\"1\":{\"248\":1}}],[\"每个写入一次写入每个列出的写入器\",{\"1\":{\"232\":1}}],[\"每个中间件执行不同的功能\",{\"1\":{\"103\":1}}],[\"每个\",{\"1\":{\"35\":1}}],[\"浏览器有了cookie之后\",{\"1\":{\"94\":1}}],[\"也会通过进程名来杀死进程\",{\"1\":{\"338\":1}}],[\"也无法提交\",{\"1\":{\"323\":1}}],[\"也就是出现故障\",{\"1\":{\"308\":1}}],[\"也就是说\",{\"1\":{\"233\":1}}],[\"也就是说服务器不能区分两次请求是否由同一个客户端发出\",{\"1\":{\"94\":1}}],[\"也称为用户模式\",{\"1\":{\"263\":1}}],[\"也是可以解决的\",{\"1\":{\"345\":1}}],[\"也是执行时间\",{\"1\":{\"248\":1}}],[\"也是cookie的名字\",{\"1\":{\"98\":1}}],[\"也没有期限\",{\"1\":{\"184\":1}}],[\"也没什么数据需要回滚\",{\"1\":{\"158\":1}}],[\"也可以使用joins进行加载关联数据\",{\"1\":{\"172\":1}}],[\"也可以使用map\",{\"1\":{\"137\":1}}],[\"也可以写聚合函数\",{\"1\":{\"145\":1}}],[\"也可以组合使用\",{\"1\":{\"138\":1}}],[\"也可以自己开发中间件\",{\"1\":{\"105\":1}}],[\"也可以\",{\"1\":{\"66\":1}}],[\"加快检索速度\",{\"1\":{\"330\":1}}],[\"加载静态文件\",{\"1\":{\"90\":1}}],[\"加密\",{\"2\":{\"9\":1}}],[\"静态转储\",{\"1\":{\"321\":1}}],[\"静态文件处理\",{\"0\":{\"90\":1}}],[\"静态url\",{\"1\":{\"59\":1}}],[\"||\",{\"1\":{\"196\":1}}],[\"|\",{\"1\":{\"89\":1}}],[\"代替参数值\",{\"1\":{\"144\":1}}],[\"代表所有子目录下的所有文件\",{\"1\":{\"88\":1}}],[\"代码就应该调用cancel\",{\"1\":{\"190\":1}}],[\"代码应立即调用cancel\",{\"1\":{\"188\":1,\"189\":1}}],[\"代码应该使用上下文\",{\"1\":{\"185\":1}}],[\"代码示例\",{\"1\":{\"162\":1,\"163\":1,\"164\":1}}],[\"代码块\",{\"0\":{\"20\":1}}],[\"代码\",{\"1\":{\"19\":1}}],[\">基于深度学习的动物图片分类app<\",{\"1\":{\"345\":1}}],[\">基于深度学习的动物图片分类app\",{\"1\":{\"345\":1}}],[\">y\",{\"1\":{\"294\":1}}],[\">跳转到其他地方<\",{\"1\":{\"89\":1}}],[\">\",{\"1\":{\"87\":2,\"89\":2,\"90\":3,\"149\":2,\"150\":2,\"158\":2,\"168\":1,\"170\":2,\"196\":2,\"212\":1,\"248\":2,\"344\":1,\"345\":20}}],[\"800px\",{\"1\":{\"345\":1}}],[\"8080或者www\",{\"1\":{\"56\":1}}],[\"8080\",{\"1\":{\"53\":1,\"56\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"72\":1,\"98\":1,\"99\":1,\"100\":1,\"104\":1,\"105\":2}}],[\"8字符\",{\"1\":{\"219\":1}}],[\"8编码的unicode字符\",{\"1\":{\"218\":1}}],[\"8\",{\"0\":{\"150\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":2,\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1},\"1\":{\"87\":1,\"89\":1,\"90\":1,\"120\":1,\"121\":1,\"228\":1,\"248\":2,\"345\":2}}],[\"<br>\",{\"1\":{\"345\":1}}],[\"<body>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"<p>©\",{\"1\":{\"345\":1}}],[\"<p>此为系统邮件\",{\"1\":{\"345\":1}}],[\"<p>──zarttic<\",{\"1\":{\"345\":1}}],[\"<p>您好\",{\"1\":{\"345\":1}}],[\"<font\",{\"1\":{\"345\":4}}],[\"<td\",{\"1\":{\"345\":1}}],[\"<th\",{\"1\":{\"345\":1}}],[\"<tr>\",{\"1\":{\"345\":2}}],[\"<tbody>\",{\"1\":{\"345\":1}}],[\"<table\",{\"1\":{\"345\":1}}],[\"<title>gin\",{\"1\":{\"87\":1,\"89\":1,\"90\":1}}],[\"<div\",{\"1\":{\"345\":4}}],[\"<=\",{\"1\":{\"168\":1,\"189\":1,\"196\":2,\"197\":2,\"344\":1}}],[\"<link\",{\"1\":{\"90\":1}}],[\"<a\",{\"1\":{\"89\":1}}],[\"<meta\",{\"1\":{\"87\":2,\"89\":2,\"90\":2,\"345\":4}}],[\"<h2\",{\"1\":{\"345\":1}}],[\"<html\",{\"1\":{\"345\":1}}],[\"<html>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1}}],[\"<head>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"<\",{\"1\":{\"87\":4,\"89\":4,\"90\":4,\"181\":1,\"183\":2,\"188\":3,\"189\":2,\"190\":2,\"196\":1,\"197\":1,\"212\":1,\"213\":1,\"248\":1,\"249\":2,\"251\":2,\"345\":25}}],[\"基本表\",{\"0\":{\"276\":1},\"1\":{\"276\":1}}],[\"基本使用\",{\"0\":{\"87\":1}}],[\"基础接口\",{\"0\":{\"195\":1}}],[\"基于redis存储引擎的session\",{\"0\":{\"100\":1}}],[\"基于\",{\"1\":{\"52\":1}}],[\"模式映像\",{\"1\":{\"264\":1}}],[\"模式\",{\"1\":{\"138\":1,\"141\":1,\"263\":1,\"264\":1,\"274\":1}}],[\"模型标签\",{\"0\":{\"116\":1}}],[\"模型定义\",{\"0\":{\"114\":1,\"115\":1}}],[\"模板\",{\"1\":{\"87\":1}}],[\"模板的渲染\",{\"1\":{\"87\":1,\"89\":1}}],[\"模板解析\",{\"1\":{\"87\":1,\"88\":1,\"89\":1}}],[\"模板是golang语言的一个标准库\",{\"1\":{\"86\":1}}],[\"模板渲染\",{\"0\":{\"86\":1}}],[\"模糊匹配\",{\"1\":{\"59\":1}}],[\"yaml\",{\"1\":{\"83\":1}}],[\"yaml方式\",{\"0\":{\"83\":1}}],[\"yaml等和json道理一样\",{\"1\":{\"71\":1}}],[\"747474\",{\"1\":{\"345\":1}}],[\"7\",{\"0\":{\"83\":1,\"149\":1,\"207\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"233\":1},\"1\":{\"121\":1,\"248\":2}}],[\"重改造是修改数据库的模式和内模式\",{\"1\":{\"304\":1}}],[\"重新等带安排任务\",{\"1\":{\"249\":1}}],[\"重新等待安排任务\",{\"1\":{\"249\":2}}],[\"重命名列\",{\"1\":{\"121\":1}}],[\"重命名索引时采用删除并新建的方式\",{\"1\":{\"121\":1}}],[\"重定向\",{\"0\":{\"82\":1}}],[\"重要的内容\",{\"1\":{\"25\":1}}],[\"64\",{\"1\":{\"235\":2,\"236\":1}}],[\"6379\",{\"1\":{\"100\":1}}],[\"6\",{\"0\":{\"82\":1,\"133\":1,\"140\":1,\"148\":1,\"186\":1,\"206\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":2,\"232\":1,\"253\":1},\"1\":{\"121\":1,\"144\":1,\"240\":1,\"248\":2}}],[\"设立内模式\",{\"1\":{\"296\":1}}],[\"设置时间\",{\"1\":{\"313\":1}}],[\"设置为缺省值\",{\"1\":{\"285\":1}}],[\"设置为空值\",{\"1\":{\"285\":1}}],[\"设置go运行时\",{\"1\":{\"251\":2}}],[\"设置gogc=off\",{\"1\":{\"248\":1}}],[\"设置schedtrace为x并设置其为1\",{\"1\":{\"248\":1}}],[\"设置select子句\",{\"1\":{\"145\":1}}],[\"设置session数据\",{\"1\":{\"98\":1}}],[\"设置session中间件\",{\"1\":{\"98\":1}}],[\"设置其为x\",{\"1\":{\"248\":1}}],[\"设置其为2\",{\"1\":{\"248\":1}}],[\"设置其为1\",{\"1\":{\"248\":4}}],[\"设置缓冲区\",{\"1\":{\"198\":1}}],[\"设置下一次读写操作的指针位置\",{\"1\":{\"198\":1}}],[\"设置数据库连接池最大连接数\",{\"1\":{\"123\":1}}],[\"设置数据库连接池参数\",{\"1\":{\"123\":1}}],[\"设置读写超时时间\",{\"1\":{\"120\":1}}],[\"设置10秒后连接超时\",{\"1\":{\"120\":1}}],[\"设置mysql连接超时参数\",{\"1\":{\"120\":1}}],[\"设置一些依附在上下文对象里面的键\",{\"1\":{\"105\":1}}],[\"设置recovery中间件\",{\"1\":{\"104\":1}}],[\"设置日志中间件\",{\"1\":{\"104\":1}}],[\"设置全局中间件意思就是会拦截所有请求\",{\"1\":{\"103\":1}}],[\"设置httponly=true的cookie不能被js获取到\",{\"1\":{\"95\":1}}],[\"设置http响应头\",{\"0\":{\"81\":1}}],[\"设置cookie\",{\"0\":{\"95\":1},\"1\":{\"95\":1,\"97\":1}}],[\"设计原则\",{\"1\":{\"331\":1}}],[\"设计策略\",{\"1\":{\"299\":1}}],[\"设计概念系统结构\",{\"0\":{\"299\":1}}],[\"设计索引\",{\"1\":{\"296\":1}}],[\"设计模式\",{\"0\":{\"46\":1},\"2\":{\"47\":1,\"50\":1}}],[\"设计\",{\"0\":{\"43\":1}}],[\"响应生命周期中可以注册多个中间件\",{\"1\":{\"103\":1}}],[\"响应生命周期的特殊函数\",{\"1\":{\"103\":1}}],[\"响应\",{\"0\":{\"76\":1}}],[\"响应http请求等\",{\"1\":{\"60\":1}}],[\"表\",{\"1\":{\"274\":1}}],[\"表名就是关系名\",{\"1\":{\"267\":1}}],[\"表名映射\",{\"0\":{\"117\":1}}],[\"表达式\",{\"0\":{\"139\":1}}],[\"表字段名为\",{\"1\":{\"115\":5}}],[\"表单参数\",{\"0\":{\"70\":1}}],[\"表示非预期的存储介质故障所造成的故障\",{\"1\":{\"319\":1}}],[\"表示非预期的系统崩溃或断电所造成的故障\",{\"1\":{\"319\":1}}],[\"表示非预期的不正常程序结束所造成的故障\",{\"1\":{\"319\":1}}],[\"表示从数据的尾部开始移动指针\",{\"1\":{\"198\":1}}],[\"表示从数据的当前指针位置开始移动指针\",{\"1\":{\"198\":1}}],[\"表示从数据的开头开始移动指针\",{\"1\":{\"198\":1}}],[\"表示删除cookie\",{\"1\":{\"97\":1}}],[\"表示删除服务器上的资源\",{\"1\":{\"57\":1}}],[\"表示更新\",{\"1\":{\"57\":1}}],[\"表示更新或者替换服务器上的资源\",{\"1\":{\"57\":1}}],[\"表示在服务器上创建资源\",{\"1\":{\"57\":1}}],[\"表示读取服务器上的资源\",{\"1\":{\"57\":1}}],[\"会释放表占用的空间\",{\"1\":{\"333\":1}}],[\"会被记录在日志中\",{\"1\":{\"333\":1}}],[\"会有一个被覆盖掉\",{\"1\":{\"309\":1}}],[\"会打印所有现存go程包括运行时函数的堆栈踪迹\",{\"1\":{\"248\":2}}],[\"会采用默认行为\",{\"1\":{\"248\":1}}],[\"会完全忽略所有go程的堆栈踪迹\",{\"1\":{\"248\":1}}],[\"会完全关闭垃圾收集\",{\"1\":{\"248\":1}}],[\"会写入同样的概述\",{\"1\":{\"248\":1}}],[\"会导致调度程序每隔x毫秒输出详细的多行信息\",{\"1\":{\"248\":1}}],[\"会导致调度程序每隔x毫秒输出单行信息到标准错误输出\",{\"1\":{\"248\":1}}],[\"会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈\",{\"1\":{\"248\":1}}],[\"会导致每次垃圾回收器触发一行日志\",{\"1\":{\"248\":1}}],[\"会导致每次分配都会记录每一个对象的分配\",{\"1\":{\"248\":1}}],[\"会导致分配器运行模式为\",{\"1\":{\"248\":1}}],[\"会照例返回可用的东西\",{\"1\":{\"196\":1}}],[\"会产生两条sql\",{\"1\":{\"171\":1}}],[\"会返回错误\",{\"1\":{\"215\":1}}],[\"会返回errclosedpipe\",{\"1\":{\"194\":1}}],[\"会返回\",{\"1\":{\"143\":1}}],[\"会将\",{\"1\":{\"117\":1}}],[\"会将状态码改为400\",{\"1\":{\"66\":1}}],[\"会话模式\",{\"1\":{\"154\":1}}],[\"会话session\",{\"0\":{\"154\":1}}],[\"会话控制涉及到cookie和session的使用\",{\"1\":{\"93\":1}}],[\"会话\",{\"0\":{\"93\":1}}],[\"会使用\",{\"1\":{\"16\":1}}],[\"状态码不变\",{\"1\":{\"66\":1}}],[\"区别在于copybuffer逐步遍历提供的缓冲区\",{\"1\":{\"228\":1}}],[\"区别在于scan不会从传递进来的结构体变量提取表名\",{\"1\":{\"149\":1}}],[\"区别\",{\"1\":{\"66\":1,\"276\":1}}],[\"ececec\",{\"1\":{\"345\":1}}],[\"equiv=\",{\"1\":{\"345\":1}}],[\"ef|grep\",{\"1\":{\"338\":1}}],[\"efence\",{\"1\":{\"248\":1}}],[\"er图是一种用于描述实体之间关系的图形化工具\",{\"1\":{\"331\":1}}],[\"er图的设计原则是什么\",{\"0\":{\"331\":1}}],[\"er图向关系模型的转换规则是什么\",{\"0\":{\"331\":1}}],[\"errclosedpip\",{\"1\":{\"223\":1}}],[\"errclosedpipe\",{\"1\":{\"194\":1}}],[\"err2\",{\"1\":{\"196\":2}}],[\"errunexpectedeof表示在读取一个固定尺寸的块或者数据结构时\",{\"1\":{\"194\":1}}],[\"errunexpectedeof\",{\"1\":{\"194\":1}}],[\"errshortwrite表示写入操作写入的数据比提供的少\",{\"1\":{\"194\":1}}],[\"errshortwrite\",{\"1\":{\"194\":1}}],[\"errshortbuffer表示读取操作需要大缓冲\",{\"1\":{\"194\":1}}],[\"errshortbuffer\",{\"1\":{\"194\":1}}],[\"errnoprogress\",{\"1\":{\"194\":1}}],[\"err返回一个非nil错误\",{\"1\":{\"183\":1}}],[\"err返回nil\",{\"1\":{\"183\":1}}],[\"errrecordnotfound进行判断\",{\"1\":{\"143\":1}}],[\"errrecordnotfound\",{\"1\":{\"143\":1}}],[\"errmissingwhereclause\",{\"1\":{\"138\":1}}],[\"error=\",{\"1\":{\"111\":1}}],[\"error\",{\"1\":{\"104\":1,\"111\":2,\"127\":2,\"156\":3,\"157\":3,\"158\":1,\"160\":1,\"161\":3,\"162\":2,\"163\":1,\"164\":1,\"172\":2,\"181\":1,\"183\":1,\"190\":1,\"194\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"223\":4,\"224\":4,\"225\":3,\"227\":1,\"228\":1,\"229\":1,\"234\":1,\"235\":3,\"236\":2,\"237\":3,\"239\":1,\"240\":1,\"241\":1,\"244\":1}}],[\"errors\",{\"1\":{\"104\":1,\"157\":1,\"161\":2,\"162\":1,\"194\":6}}],[\"err\",{\"1\":{\"66\":6,\"67\":2,\"70\":2,\"71\":2,\"73\":3,\"96\":2,\"111\":18,\"121\":3,\"156\":6,\"158\":2,\"161\":4,\"162\":3,\"163\":1,\"164\":1,\"172\":6,\"181\":1,\"183\":1,\"189\":1,\"196\":8,\"197\":1,\"209\":3,\"210\":3,\"212\":2,\"213\":2,\"218\":1,\"220\":1,\"223\":2,\"224\":2,\"225\":2,\"227\":4,\"228\":7,\"229\":4,\"230\":3,\"231\":3,\"232\":3,\"233\":3,\"234\":3,\"235\":10,\"236\":7,\"237\":2,\"238\":3,\"239\":4,\"240\":4,\"241\":6,\"243\":3,\"244\":4}}],[\"everything\",{\"1\":{\"243\":1}}],[\"eof\",{\"1\":{\"194\":3,\"196\":5,\"209\":1,\"212\":2,\"224\":1,\"227\":1}}],[\"e\",{\"0\":{\"301\":1},\"1\":{\"181\":2,\"296\":1}}],[\"eager\",{\"1\":{\"164\":1}}],[\"extra\",{\"1\":{\"228\":1}}],[\"exit\",{\"1\":{\"188\":1}}],[\"exec\",{\"1\":{\"133\":1}}],[\"expr\",{\"1\":{\"132\":1,\"139\":2,\"158\":1}}],[\"example\",{\"1\":{\"105\":4,\"121\":1}}],[\"empty\",{\"1\":{\"181\":1}}],[\"emptyctx\",{\"1\":{\"181\":6,\"184\":1,\"185\":1}}],[\"email\",{\"1\":{\"118\":2,\"345\":2}}],[\"embeddedprefix\",{\"1\":{\"118\":2}}],[\"embedded\",{\"1\":{\"116\":1,\"118\":3}}],[\"engine\",{\"1\":{\"111\":1,\"171\":1}}],[\"engine=innodb\",{\"1\":{\"111\":1,\"115\":1,\"134\":1}}],[\"enhance\",{\"1\":{\"18\":1}}],[\"else\",{\"1\":{\"100\":1,\"158\":1}}],[\"`sex`\",{\"1\":{\"171\":1}}],[\"`stock`=100\",{\"1\":{\"135\":1}}],[\"`stock`\",{\"1\":{\"134\":1,\"158\":1}}],[\"`age`\",{\"1\":{\"170\":2,\"171\":1}}],[\"`=\",{\"1\":{\"135\":1}}],[\"`title`=\",{\"1\":{\"135\":1}}],[\"`title`\",{\"1\":{\"134\":1}}],[\"`type`=0\",{\"1\":{\"135\":1}}],[\"`type`\",{\"1\":{\"134\":1}}],[\"`type\",{\"1\":{\"115\":1}}],[\"`create\",{\"1\":{\"134\":1,\"135\":1}}],[\"`createtime`\",{\"1\":{\"111\":1,\"115\":1}}],[\"`change`\",{\"1\":{\"121\":1}}],[\"`profiles`\",{\"1\":{\"117\":1}}],[\"`price`=100\",{\"1\":{\"135\":1}}],[\"`price`\",{\"1\":{\"115\":1,\"134\":1}}],[\"`password`\",{\"1\":{\"111\":1}}],[\"`name`\",{\"1\":{\"115\":1,\"169\":2,\"170\":1}}],[\"`goods`\",{\"1\":{\"115\":1,\"134\":1,\"135\":1,\"149\":1,\"150\":1,\"158\":2}}],[\"`gorm`\",{\"1\":{\"171\":1}}],[\"`gorm\",{\"1\":{\"111\":7,\"115\":1,\"116\":1,\"118\":9,\"171\":7}}],[\"`user\",{\"1\":{\"171\":2}}],[\"`username`\",{\"1\":{\"111\":1}}],[\"`users`\",{\"1\":{\"111\":1,\"169\":1,\"170\":1}}],[\"`id`\",{\"1\":{\"111\":2,\"115\":2,\"134\":2,\"135\":1,\"158\":1,\"169\":2,\"171\":2}}],[\"`xml\",{\"1\":{\"79\":2}}],[\"`\",{\"1\":{\"66\":5,\"79\":2,\"111\":7,\"115\":1,\"116\":1,\"118\":9,\"131\":2,\"171\":7,\"344\":2}}],[\"`form\",{\"1\":{\"66\":5,\"344\":2}}],[\"of触发器\",{\"1\":{\"287\":1}}],[\"off\",{\"1\":{\"212\":3,\"213\":3,\"225\":2,\"237\":2,\"238\":1,\"240\":1}}],[\"offset\",{\"1\":{\"147\":1,\"168\":3,\"198\":2,\"225\":1,\"237\":1,\"241\":1,\"344\":3}}],[\"o\",{\"1\":{\"197\":2}}],[\"o错误\",{\"1\":{\"196\":1}}],[\"os\",{\"1\":{\"193\":1,\"196\":2,\"197\":3,\"198\":2,\"227\":3,\"228\":3,\"229\":2,\"230\":2,\"231\":2,\"233\":2,\"238\":2,\"241\":2,\"243\":2,\"244\":2,\"248\":3}}],[\"o原始操作的一系列接口\",{\"1\":{\"193\":1}}],[\"o标准库\",{\"0\":{\"193\":1}}],[\"otherid\",{\"1\":{\"171\":1}}],[\"orm映射\",{\"0\":{\"334\":1}}],[\"orm库操作数据库\",{\"1\":{\"111\":1}}],[\"orm库之一\",{\"1\":{\"110\":1}}],[\"or\",{\"1\":{\"188\":1,\"194\":1,\"225\":1}}],[\"org\",{\"1\":{\"183\":1,\"345\":1}}],[\"orders\",{\"1\":{\"170\":4}}],[\"order\",{\"0\":{\"146\":1},\"1\":{\"146\":1,\"147\":1}}],[\"omit\",{\"1\":{\"129\":1,\"138\":2}}],[\"opacity\",{\"1\":{\"345\":1}}],[\"openfile\",{\"1\":{\"197\":1}}],[\"open连接数据库\",{\"1\":{\"119\":1}}],[\"open\",{\"1\":{\"111\":2,\"121\":4,\"196\":1,\"198\":1}}],[\"options方法用于描述目标资源的通信选项\",{\"1\":{\"56\":1}}],[\"options\",{\"1\":{\"56\":1}}],[\"one\",{\"1\":{\"189\":1}}],[\"ondelete\",{\"1\":{\"171\":1}}],[\"onupdate\",{\"1\":{\"171\":1}}],[\"only\",{\"1\":{\"162\":1}}],[\"on\",{\"1\":{\"105\":1,\"194\":1}}],[\"ok\",{\"1\":{\"66\":2,\"67\":2,\"154\":1,\"181\":1,\"183\":1,\"189\":2}}],[\"判断参数是否存在\",{\"1\":{\"66\":1}}],[\"北京\",{\"1\":{\"66\":1}}],[\"就会触发垃圾收集\",{\"1\":{\"248\":1}}],[\"就会返回\",{\"1\":{\"223\":1,\"224\":1}}],[\"就会返回本错误\",{\"1\":{\"194\":1}}],[\"就是\",{\"1\":{\"196\":1,\"209\":1,\"210\":1}}],[\"就是各个单词之间用下划线\",{\"1\":{\"115\":1}}],[\"就可以根据该信息处理请求\",{\"1\":{\"94\":1}}],[\"就可以用到分组路由了\",{\"1\":{\"61\":1}}],[\"就给一个默认值\",{\"1\":{\"66\":1}}],[\"普通参数\",{\"0\":{\"66\":1}}],[\"如文件操作\",{\"1\":{\"278\":1}}],[\"如控制goroutine的函数\",{\"1\":{\"247\":1}}],[\"如\",{\"1\":{\"193\":1}}],[\"如何检索它\",{\"1\":{\"186\":1}}],[\"如何将值传递给上下文\",{\"1\":{\"186\":1}}],[\"如何获取呢\",{\"1\":{\"65\":1}}],[\"如下\",{\"1\":{\"115\":1}}],[\"如果先写了日志\",{\"1\":{\"322\":1}}],[\"如果先写了数据库修改\",{\"1\":{\"322\":1}}],[\"如果满足条件则拒绝\",{\"1\":{\"284\":1}}],[\"如果gotraceback为crash\",{\"1\":{\"248\":1}}],[\"如果gotraceback为2\",{\"1\":{\"248\":1}}],[\"如果gotraceback为1\",{\"1\":{\"248\":1}}],[\"如果gotraceback为0\",{\"1\":{\"248\":1}}],[\"如果w实现stringwriter\",{\"1\":{\"244\":1}}],[\"如果min大于buf的长度\",{\"1\":{\"235\":1}}],[\"如果读取的字节数少则返回错误\",{\"1\":{\"235\":1,\"236\":1}}],[\"如果列出的写程序返回错误\",{\"1\":{\"232\":1}}],[\"如果任何读取器返回非零\",{\"1\":{\"231\":1}}],[\"如果任何回调返回错误\",{\"1\":{\"160\":1}}],[\"如果长度为零\",{\"1\":{\"228\":1}}],[\"如果buf为nil\",{\"1\":{\"228\":1}}],[\"如果需要参数\",{\"1\":{\"275\":1}}],[\"如果需要\",{\"1\":{\"228\":1}}],[\"如果dst实现了readerfrom接口\",{\"1\":{\"227\":1,\"229\":1}}],[\"如果done被关闭\",{\"1\":{\"183\":1}}],[\"如果done未关闭\",{\"1\":{\"183\":1}}],[\"如果src实现writerto或dst实现readerfrom\",{\"1\":{\"228\":1}}],[\"如果src实现writerto接口\",{\"1\":{\"227\":1}}],[\"如果slowoperation在超时之前完成\",{\"1\":{\"190\":1}}],[\"如果有\",{\"1\":{\"227\":1}}],[\"如果有多个模板\",{\"1\":{\"88\":1}}],[\"如果以错误关闭读取端\",{\"1\":{\"224\":1}}],[\"如果用错误关闭写入端\",{\"1\":{\"223\":1}}],[\"如果对象的数据流只有部分可用\",{\"1\":{\"212\":1}}],[\"如果\",{\"1\":{\"198\":3,\"212\":3,\"213\":1}}],[\"如果在读取了一些但不是全部字节后发生eof\",{\"1\":{\"236\":1}}],[\"如果在读取少于最小字节后发生eof\",{\"1\":{\"235\":1}}],[\"如果在一个结构化数据流中eof在不期望的位置出现了\",{\"1\":{\"194\":1}}],[\"如果在模板中引入静态文件\",{\"1\":{\"90\":1}}],[\"如果父上下文的截止日期已经早于d\",{\"1\":{\"189\":1}}],[\"如果上下文未关闭\",{\"1\":{\"183\":1}}],[\"如果没有可用字符\",{\"1\":{\"218\":1}}],[\"如果没有字节可读取\",{\"1\":{\"215\":1}}],[\"如果没有value与key相关联\",{\"1\":{\"183\":1}}],[\"如果没有设置截止日期\",{\"1\":{\"183\":1}}],[\"如果没有sql任务需要执行的连接数大于20\",{\"1\":{\"123\":1}}],[\"如果不想要user的数据\",{\"1\":{\"172\":1}}],[\"如果将user\",{\"1\":{\"171\":1}}],[\"如果您的钩子返回了任何错误\",{\"1\":{\"161\":1}}],[\"如果您已经为模型定义了指定的方法\",{\"1\":{\"160\":1}}],[\"如果更新库存操作\",{\"1\":{\"158\":1}}],[\"如果使用初始化参数\",{\"1\":{\"154\":1}}],[\"如果该字段值为零值\",{\"1\":{\"118\":1}}],[\"如果想要保存\",{\"1\":{\"118\":1}}],[\"如果想要支持其中的几种\",{\"1\":{\"58\":1}}],[\"如果想要支持所有\",{\"1\":{\"58\":1}}],[\"如果定义了这种字段\",{\"1\":{\"118\":1}}],[\"如果我们想将session数据保存到redis中\",{\"1\":{\"100\":1}}],[\"如果目录为templates\",{\"1\":{\"88\":1}}],[\"如果参数不存在\",{\"1\":{\"66\":1}}],[\"如果你不了解它\",{\"1\":{\"15\":1}}],[\"如果你是一个新手\",{\"1\":{\"14\":1}}],[\"s锁\",{\"1\":{\"311\":1}}],[\"system\",{\"1\":{\"345\":1}}],[\"systems\",{\"1\":{\"234\":1}}],[\"sync\",{\"1\":{\"250\":2,\"251\":2}}],[\"smaller\",{\"1\":{\"235\":1}}],[\"src\",{\"1\":{\"227\":2,\"228\":1,\"229\":1}}],[\"slowoperation\",{\"1\":{\"190\":1}}],[\"slowoperationwithtimeout\",{\"1\":{\"190\":1}}],[\"sleep\",{\"1\":{\"188\":5}}],[\"solid\",{\"1\":{\"345\":2}}],[\"some\",{\"1\":{\"227\":1,\"229\":2,\"230\":2,\"232\":1,\"233\":2,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"sooner\",{\"1\":{\"189\":1}}],[\"source\",{\"1\":{\"119\":1,\"121\":4}}],[\"sub\",{\"1\":{\"188\":2,\"251\":1}}],[\"subquery2\",{\"1\":{\"170\":2}}],[\"subquery1\",{\"1\":{\"170\":2}}],[\"success\",{\"1\":{\"78\":1}}],[\"switch\",{\"1\":{\"168\":1,\"181\":1,\"344\":1}}],[\"span>\",{\"1\":{\"345\":1}}],[\"sp1\",{\"1\":{\"159\":2}}],[\"sprintf\",{\"1\":{\"111\":1}}],[\"skipdefaulttransaction\",{\"1\":{\"154\":2}}],[\"skiphooks\",{\"1\":{\"154\":1}}],[\"skipinitializewithversion\",{\"1\":{\"121\":1}}],[\"sql只能表达常见的查询\",{\"1\":{\"278\":1}}],[\"sql定义语言dd\",{\"0\":{\"274\":1}}],[\"sql的基本功能\",{\"0\":{\"273\":1}}],[\"sql的基本特点\",{\"0\":{\"272\":1}}],[\"sql语句的where子句\",{\"1\":{\"144\":1}}],[\"sql表达式\",{\"0\":{\"132\":1}}],[\"sqldb\",{\"1\":{\"123\":3}}],[\"sql\",{\"0\":{\"271\":1},\"1\":{\"119\":1,\"121\":2,\"132\":1,\"141\":1,\"150\":2,\"154\":7}}],[\"sqlite\",{\"1\":{\"119\":1}}],[\"scheddetail\",{\"1\":{\"248\":1}}],[\"schedtrace\",{\"1\":{\"248\":1}}],[\"scope\",{\"0\":{\"168\":1}}],[\"scopes\",{\"1\":{\"117\":1,\"168\":2}}],[\"scan类似find都是用于执行查询语句\",{\"1\":{\"149\":1}}],[\"scan\",{\"1\":{\"149\":1,\"150\":1}}],[\"scale=1\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"snake\",{\"1\":{\"115\":1}}],[\"six锁\",{\"0\":{\"326\":1},\"1\":{\"326\":1}}],[\"sig\",{\"1\":{\"248\":3}}],[\"signal\",{\"1\":{\"248\":3}}],[\"size=\",{\"1\":{\"345\":2}}],[\"size返回以字节为单位的片段大小\",{\"1\":{\"225\":1,\"237\":1,\"242\":1}}],[\"size\",{\"0\":{\"242\":1},\"1\":{\"168\":1,\"218\":1,\"225\":2,\"235\":2,\"236\":1,\"237\":1,\"242\":2,\"344\":2,\"345\":2}}],[\"since\",{\"1\":{\"105\":1}}],[\"site\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"safe\",{\"1\":{\"89\":2}}],[\"savepoint\",{\"1\":{\"159\":2}}],[\"savegoods\",{\"1\":{\"134\":2}}],[\"saveuser\",{\"1\":{\"111\":2}}],[\"saveuploadedfile\",{\"1\":{\"73\":1}}],[\"save\",{\"1\":{\"61\":4,\"65\":1,\"66\":6,\"67\":4,\"68\":3,\"70\":2,\"71\":1,\"72\":2,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"98\":1,\"99\":2,\"100\":1,\"111\":3,\"135\":1,\"161\":3,\"162\":2,\"171\":1}}],[\"seekstart\",{\"1\":{\"241\":1}}],[\"seek和readat\",{\"1\":{\"225\":1,\"237\":1}}],[\"seek\",{\"0\":{\"241\":1},\"1\":{\"198\":3,\"225\":1,\"237\":1,\"241\":2}}],[\"seeker\",{\"1\":{\"198\":2,\"205\":1,\"206\":1,\"207\":1}}],[\"seeker接口\",{\"0\":{\"198\":1}}],[\"sex\",{\"1\":{\"171\":2}}],[\"select\",{\"0\":{\"145\":1},\"1\":{\"128\":1,\"138\":2,\"140\":1,\"145\":2,\"149\":2,\"150\":1,\"154\":1,\"169\":1,\"170\":8,\"183\":1,\"188\":3,\"189\":1,\"190\":1}}],[\"server\",{\"1\":{\"119\":1}}],[\"serve\",{\"1\":{\"105\":1}}],[\"sectionreader在readerat的基础上实现了read\",{\"1\":{\"225\":1,\"237\":1}}],[\"sectionreader\",{\"0\":{\"225\":1,\"237\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1},\"1\":{\"225\":7,\"237\":5,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1}}],[\"second\",{\"1\":{\"154\":1,\"188\":5,\"189\":1,\"190\":1,\"228\":1,\"231\":2}}],[\"secret\",{\"1\":{\"98\":2,\"99\":1,\"100\":1}}],[\"secure=true\",{\"1\":{\"95\":1}}],[\"secure\",{\"1\":{\"95\":2}}],[\"session加密密钥\",{\"1\":{\"100\":1}}],[\"sessionb\",{\"1\":{\"99\":5}}],[\"sessiona\",{\"1\":{\"99\":5}}],[\"sessionnames\",{\"1\":{\"99\":2}}],[\"session是键值对格式数据\",{\"1\":{\"98\":1}}],[\"sessionsmany\",{\"1\":{\"99\":1}}],[\"sessions\",{\"1\":{\"98\":6,\"99\":5,\"100\":6}}],[\"sessions中间件处理session\",{\"1\":{\"98\":1}}],[\"session\",{\"0\":{\"98\":1},\"1\":{\"98\":5,\"100\":4,\"138\":2,\"141\":2,\"154\":10}}],[\"setmaxidleconns\",{\"1\":{\"123\":1}}],[\"setmaxopenconns\",{\"1\":{\"123\":1}}],[\"set\",{\"1\":{\"98\":1,\"99\":2,\"100\":1,\"105\":1,\"135\":1,\"158\":1,\"171\":1}}],[\"setcookie\",{\"1\":{\"95\":2,\"97\":1}}],[\"setfuncmap\",{\"1\":{\"89\":1}}],[\"sentry\",{\"1\":{\"52\":1}}],[\"s\",{\"1\":{\"77\":1,\"111\":4,\"188\":1,\"220\":1,\"225\":4,\"234\":1,\"235\":1,\"236\":1,\"237\":4,\"238\":2,\"239\":4,\"240\":4,\"241\":4,\"242\":3,\"244\":1,\"248\":1,\"249\":2}}],[\"style\",{\"1\":{\"345\":1}}],[\"style=\",{\"1\":{\"345\":12}}],[\"stylesheet\",{\"1\":{\"90\":1}}],[\"starttime\",{\"1\":{\"251\":2}}],[\"statements\",{\"1\":{\"154\":1}}],[\"statement\",{\"1\":{\"154\":1}}],[\"static\",{\"1\":{\"90\":2}}],[\"status\",{\"1\":{\"105\":3}}],[\"statusmovedpermanently\",{\"1\":{\"82\":1}}],[\"statusok\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"87\":1,\"89\":1}}],[\"stdout将内容输出到控制台\",{\"1\":{\"227\":1}}],[\"stdout\",{\"1\":{\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":1,\"233\":1,\"238\":1,\"241\":1,\"243\":2,\"244\":1}}],[\"stmt\",{\"1\":{\"154\":4}}],[\"stmts\",{\"1\":{\"154\":2}}],[\"stmtmanger\",{\"1\":{\"154\":5}}],[\"stop\",{\"1\":{\"188\":1}}],[\"stock\",{\"1\":{\"134\":2,\"137\":1,\"138\":2,\"139\":4,\"158\":5}}],[\"store是前面创建的存储引擎\",{\"1\":{\"98\":1}}],[\"store\",{\"1\":{\"98\":2,\"99\":2,\"100\":2}}],[\"stream\",{\"1\":{\"227\":1,\"229\":1,\"230\":1,\"232\":1,\"233\":2,\"235\":2,\"236\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"strconv\",{\"1\":{\"168\":2}}],[\"str\",{\"1\":{\"89\":2}}],[\"strings\",{\"1\":{\"227\":2,\"228\":3,\"229\":2,\"230\":2,\"231\":4,\"232\":2,\"234\":2,\"235\":2,\"236\":2,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2}}],[\"stringwriter\",{\"1\":{\"220\":1}}],[\"stringwriter接口\",{\"0\":{\"220\":1}}],[\"string\",{\"1\":{\"66\":3,\"77\":2,\"79\":1,\"89\":1,\"95\":6,\"96\":2,\"97\":1,\"99\":1,\"105\":1,\"111\":5,\"115\":1,\"117\":2,\"118\":8,\"121\":1,\"131\":3,\"132\":1,\"134\":2,\"139\":1,\"143\":1,\"154\":2,\"169\":3,\"171\":5,\"181\":2,\"186\":1,\"196\":1,\"198\":2,\"220\":1,\"232\":2,\"244\":1,\"249\":1}}],[\"struct字段和mysql表字段一一对应\",{\"1\":{\"111\":1}}],[\"struct\",{\"1\":{\"66\":2,\"79\":1,\"111\":2,\"115\":1,\"116\":1,\"118\":9,\"134\":1,\"149\":1,\"154\":1,\"169\":2,\"171\":3,\"181\":1,\"183\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"344\":1}}],[\"shadow\",{\"1\":{\"345\":1}}],[\"shanghai\",{\"1\":{\"71\":1}}],[\"shortbuf\",{\"1\":{\"235\":2}}],[\"short\",{\"1\":{\"194\":2}}],[\"shortduration\",{\"1\":{\"189\":2,\"190\":2}}],[\"shouldbindjson\",{\"1\":{\"71\":1}}],[\"shouldbind\",{\"1\":{\"70\":1}}],[\"shouldbindquery会报错\",{\"1\":{\"66\":1}}],[\"shouldbindquery\",{\"1\":{\"66\":1,\"67\":1}}],[\"以提高系统性能\",{\"1\":{\"304\":1}}],[\"以提高后续的效率\",{\"1\":{\"154\":1}}],[\"以上两个结构体pipewriter与pipereader是结合使用的需要用pipe\",{\"1\":{\"224\":1}}],[\"以读写模式打开文件\",{\"1\":{\"197\":1}}],[\"以及任何遇到的引起写入提前停止的错误\",{\"1\":{\"197\":1}}],[\"以及任何遇到的错误\",{\"1\":{\"196\":1}}],[\"以及允许的\",{\"1\":{\"196\":1}}],[\"以及如果值存在\",{\"1\":{\"186\":1}}],[\"以先发生的情况为准\",{\"1\":{\"189\":1}}],[\"以哪个先发生为准\",{\"1\":{\"188\":1}}],[\"以避免使用上下文的包之间的冲突\",{\"1\":{\"186\":1}}],[\"以包含这几个字段\",{\"1\":{\"118\":1}}],[\"以goods开头\",{\"1\":{\"61\":1}}],[\"以user开发\",{\"1\":{\"61\":1}}],[\"以便在应用程序中进行处理\",{\"1\":{\"280\":1}}],[\"以便\",{\"1\":{\"13\":1}}],[\"在发送请求的时候加上\",{\"1\":{\"343\":1}}],[\"在关系数据库和对象之间建立了一个映射\",{\"1\":{\"334\":1}}],[\"在日志中没有记录\",{\"1\":{\"322\":1}}],[\"在2nf的基础上\",{\"1\":{\"294\":1}}],[\"在1nf的基础上\",{\"1\":{\"294\":2}}],[\"在数据库中不合理的设计会导致数据冗余\",{\"1\":{\"293\":1}}],[\"在unix系统里\",{\"1\":{\"248\":1}}],[\"在这点上\",{\"1\":{\"212\":1}}],[\"在这里可以处理请求返回给用户之前的逻辑\",{\"1\":{\"105\":1}}],[\"在这里处理请求到达控制器函数之前的逻辑\",{\"1\":{\"105\":1}}],[\"在用完\",{\"1\":{\"199\":1}}],[\"在整个标准库内都没有对closer的引用\",{\"1\":{\"199\":1}}],[\"在输入流结束时会返回一个非零的字节数\",{\"1\":{\"196\":1}}],[\"在成功读取\",{\"1\":{\"196\":1}}],[\"在读取未完全时遇到了eof\",{\"1\":{\"194\":1}}],[\"在超时时间结束\",{\"1\":{\"190\":1}}],[\"在超时时间之后结束\",{\"1\":{\"190\":1}}],[\"在截止时间停止\",{\"1\":{\"189\":1}}],[\"在截止时间之后停止\",{\"1\":{\"189\":1}}],[\"在语义上等价于parent\",{\"1\":{\"189\":1}}],[\"在给接口\",{\"1\":{\"186\":1}}],[\"在第一次调用之后\",{\"1\":{\"182\":1}}],[\"在同一个事务中更新数据\",{\"1\":{\"162\":1,\"163\":1}}],[\"在\",{\"1\":{\"161\":1}}],[\"在事务中执行数据库操作\",{\"1\":{\"158\":1}}],[\"在事务中执行一些\",{\"1\":{\"156\":1,\"158\":1}}],[\"在执行任何\",{\"1\":{\"154\":1}}],[\"在创建一个表\",{\"1\":{\"134\":1}}],[\"在创建时该字段值为零值或者在更新时\",{\"1\":{\"118\":1}}],[\"在创建时\",{\"1\":{\"118\":1}}],[\"在创建\",{\"1\":{\"118\":1}}],[\"在gorm框架中\",{\"1\":{\"114\":1}}],[\"在gin框架中\",{\"1\":{\"98\":1,\"103\":1}}],[\"在请求\",{\"1\":{\"103\":1}}],[\"在进行开发的时候\",{\"1\":{\"61\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"4\":1}}],[\"分析和改造\",{\"1\":{\"303\":1}}],[\"分析或展示\",{\"1\":{\"280\":1}}],[\"分别可用于不同的场景\",{\"1\":{\"179\":1}}],[\"分组\",{\"0\":{\"149\":1}}],[\"分组路由\",{\"0\":{\"61\":1}}],[\"分页模板\",{\"1\":{\"344\":1}}],[\"分页\",{\"0\":{\"147\":1}}],[\"分批创建时\",{\"1\":{\"130\":1}}],[\"分隔\",{\"1\":{\"115\":1,\"116\":1}}],[\"分类为\",{\"1\":{\"33\":1}}],[\"5px\",{\"1\":{\"345\":8}}],[\"5之后默认使用全部的cpu逻辑核心数\",{\"1\":{\"251\":1}}],[\"5版本之前默认使用的是单核心执行\",{\"1\":{\"251\":1}}],[\"5\",{\"0\":{\"61\":1,\"81\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"132\":1,\"139\":1,\"147\":1,\"185\":1,\"205\":1,\"211\":1,\"212\":1,\"213\":1,\"219\":1,\"231\":1,\"242\":1,\"252\":1},\"1\":{\"121\":2,\"144\":1,\"188\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"248\":2,\"345\":2}}],[\"404\",{\"1\":{\"348\":1}}],[\"40px\",{\"1\":{\"345\":1}}],[\"40vh\",{\"1\":{\"345\":1}}],[\"4nf\",{\"1\":{\"294\":1}}],[\"48\",{\"1\":{\"135\":1}}],[\"4\",{\"0\":{\"60\":1,\"73\":1,\"80\":1,\"90\":1,\"118\":1,\"123\":1,\"131\":1,\"138\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":2,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"159\":1,\"164\":1,\"171\":1,\"172\":1,\"184\":1,\"199\":1,\"204\":1,\"208\":1,\"209\":1,\"210\":1,\"218\":1,\"225\":1,\"230\":1,\"241\":1,\"251\":1},\"1\":{\"171\":1,\"229\":1,\"230\":1,\"235\":2,\"236\":1,\"248\":2,\"251\":1,\"345\":1}}],[\"numcpu\",{\"0\":{\"252\":1},\"1\":{\"252\":1}}],[\"null\",{\"1\":{\"111\":4,\"115\":5,\"134\":4,\"171\":7}}],[\"n>\",{\"1\":{\"235\":1}}],[\"n\",{\"1\":{\"196\":11,\"197\":2,\"198\":5,\"209\":2,\"210\":2,\"212\":5,\"213\":2,\"220\":1,\"222\":2,\"223\":1,\"224\":1,\"225\":3,\"227\":1,\"228\":2,\"229\":2,\"230\":2,\"231\":1,\"232\":1,\"233\":1,\"235\":3,\"236\":4,\"237\":3,\"238\":2,\"239\":3,\"240\":3,\"241\":1,\"242\":1,\"243\":1,\"244\":1}}],[\"nano\",{\"1\":{\"118\":1}}],[\"name=\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":2}}],[\"name=zhangsan\",{\"1\":{\"65\":1,\"66\":1}}],[\"name\",{\"1\":{\"58\":2,\"66\":12,\"70\":4,\"71\":1,\"79\":3,\"83\":1,\"95\":2,\"115\":2,\"118\":4,\"119\":1,\"121\":4,\"131\":3,\"138\":1,\"156\":2,\"169\":2,\"170\":3,\"338\":2}}],[\"no\",{\"1\":{\"194\":1,\"228\":1}}],[\"nowfunc\",{\"1\":{\"154\":1}}],[\"now\",{\"1\":{\"105\":1,\"111\":1,\"127\":1,\"134\":1,\"171\":1,\"189\":1,\"190\":1,\"251\":2}}],[\"note\",{\"2\":{\"335\":1,\"339\":1,\"346\":1}}],[\"notify\",{\"1\":{\"248\":1}}],[\"not\",{\"1\":{\"96\":1,\"111\":4,\"115\":5,\"134\":3,\"171\":1,\"186\":1,\"188\":1,\"345\":1,\"348\":1}}],[\"need\",{\"1\":{\"228\":1}}],[\"next\",{\"1\":{\"105\":1}}],[\"net\",{\"1\":{\"87\":1}}],[\"newreader\",{\"1\":{\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":3,\"232\":1,\"234\":1,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"newsectionreader返回一个sectionreader\",{\"1\":{\"225\":1,\"237\":1,\"238\":1}}],[\"newsectionreader\",{\"0\":{\"238\":1},\"1\":{\"225\":1,\"237\":1,\"238\":2,\"239\":1,\"240\":1,\"241\":1,\"242\":1}}],[\"newstore\",{\"1\":{\"98\":1,\"99\":1,\"100\":1}}],[\"newcancelctx\",{\"1\":{\"188\":1,\"189\":1}}],[\"newdb\",{\"1\":{\"154\":1}}],[\"new\",{\"1\":{\"53\":1,\"104\":2,\"105\":1,\"121\":2,\"157\":1,\"161\":3,\"162\":1,\"184\":1,\"185\":1,\"189\":1,\"194\":6}}],[\"nil时\",{\"1\":{\"229\":1,\"235\":1,\"236\":1}}],[\"nil而不是err\",{\"1\":{\"227\":1}}],[\"nil\",{\"1\":{\"66\":2,\"73\":1,\"96\":1,\"100\":1,\"111\":6,\"156\":4,\"157\":2,\"158\":1,\"161\":1,\"181\":3,\"186\":1,\"188\":2,\"189\":3,\"196\":3,\"212\":2,\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"236\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"243\":1,\"244\":1}}],[\"left\",{\"1\":{\"345\":5}}],[\"len个字节从\",{\"1\":{\"197\":1}}],[\"len个字节读取到\",{\"1\":{\"196\":1}}],[\"len\",{\"1\":{\"196\":3,\"197\":2,\"212\":3,\"213\":1,\"236\":1}}],[\"l包括\",{\"0\":{\"274\":1}}],[\"lr\",{\"1\":{\"230\":2}}],[\"line\",{\"1\":{\"345\":5}}],[\"linux\",{\"0\":{\"337\":1},\"2\":{\"340\":1}}],[\"lion\",{\"1\":{\"156\":1}}],[\"limitreader\",{\"0\":{\"230\":1},\"1\":{\"222\":1,\"230\":2}}],[\"limitedreader从r读取\",{\"1\":{\"222\":1,\"230\":1}}],[\"limitedreader\",{\"0\":{\"222\":1},\"1\":{\"222\":1}}],[\"limit\",{\"1\":{\"143\":1,\"147\":1,\"168\":1,\"169\":2,\"344\":1}}],[\"lisi\",{\"1\":{\"111\":1}}],[\"listen\",{\"1\":{\"105\":1}}],[\"list\",{\"1\":{\"58\":2}}],[\"language\",{\"1\":{\"234\":1}}],[\"last\",{\"1\":{\"143\":3}}],[\"latency\",{\"1\":{\"105\":2}}],[\"longbuf\",{\"1\":{\"235\":2,\"236\":2}}],[\"loading\",{\"1\":{\"164\":1}}],[\"loadhtmlglob\",{\"1\":{\"88\":2,\"89\":1}}],[\"loadhtmlfiles\",{\"1\":{\"87\":1}}],[\"lock\",{\"1\":{\"189\":1}}],[\"loc=local\",{\"1\":{\"111\":1,\"120\":5,\"121\":3}}],[\"localhost\",{\"1\":{\"56\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"72\":1,\"95\":1,\"97\":1,\"100\":1,\"120\":4,\"121\":1}}],[\"logmode\",{\"1\":{\"111\":1}}],[\"log\",{\"1\":{\"66\":2,\"73\":1,\"105\":4,\"111\":6,\"227\":3,\"228\":3,\"229\":2,\"230\":2,\"231\":2,\"232\":2,\"233\":2,\"234\":2,\"235\":2,\"236\":2,\"238\":2,\"239\":2,\"240\":2,\"241\":3,\"243\":2,\"244\":2}}],[\"logger\",{\"1\":{\"52\":1,\"104\":1,\"105\":2,\"111\":3,\"154\":2}}],[\"数量为\",{\"1\":{\"130\":1}}],[\"数据\",{\"1\":{\"309\":2}}],[\"数据存储和处理过程\",{\"1\":{\"298\":1}}],[\"数据流\",{\"1\":{\"298\":1}}],[\"数据对象被授予密级\",{\"1\":{\"289\":1}}],[\"数据加密\",{\"1\":{\"288\":1}}],[\"数据更新\",{\"1\":{\"280\":1}}],[\"数据检索\",{\"1\":{\"280\":1}}],[\"数据由dbms统一管理和控制\",{\"1\":{\"261\":1}}],[\"数据标准化\",{\"1\":{\"261\":1}}],[\"数据具有独立性\",{\"1\":{\"261\":1}}],[\"数据可以充分共享\",{\"1\":{\"261\":1}}],[\"数据事务管理和运行管理\",{\"1\":{\"260\":1}}],[\"数据操纵\",{\"1\":{\"260\":1}}],[\"数据操作\",{\"1\":{\"259\":1,\"262\":1}}],[\"数据组织\",{\"1\":{\"260\":1}}],[\"数据定义\",{\"1\":{\"260\":1}}],[\"数据字典是关于数据库中数据的描述\",{\"1\":{\"298\":1}}],[\"数据字典是dbms维护的一系列内部表\",{\"1\":{\"259\":1}}],[\"数据字典通常包括数据项\",{\"1\":{\"298\":1}}],[\"数据字典的内容及其作用\",{\"0\":{\"298\":1}}],[\"数据字典\",{\"1\":{\"259\":1,\"296\":1}}],[\"数据完整性约束\",{\"1\":{\"259\":1}}],[\"数据结构\",{\"1\":{\"259\":1,\"262\":1,\"298\":1}}],[\"数据模型的三个基本要素是\",{\"0\":{\"262\":1}}],[\"数据模型\",{\"1\":{\"259\":1}}],[\"数据直接从write复制到相应的read\",{\"1\":{\"233\":1}}],[\"数据成功保存\",{\"1\":{\"111\":1}}],[\"数据库转储\",{\"0\":{\"321\":1}}],[\"数据库恢复技术\",{\"0\":{\"316\":1}}],[\"数据库运行和维护\",{\"1\":{\"296\":1}}],[\"数据库实施\",{\"1\":{\"296\":1}}],[\"数据库设计的基本步骤\",{\"0\":{\"296\":1}}],[\"数据库设计\",{\"0\":{\"295\":1}}],[\"数据库的锁机制\",{\"0\":{\"328\":1}}],[\"数据库的再组织和重改造\",{\"1\":{\"303\":1}}],[\"数据库的性能监督\",{\"1\":{\"303\":1}}],[\"数据库的安全性\",{\"1\":{\"303\":1}}],[\"数据库的转储和恢复\",{\"1\":{\"303\":1}}],[\"数据库的运行与维护\",{\"0\":{\"303\":1}}],[\"数据库的完整性是指数据的正确性和相容性\",{\"1\":{\"282\":1}}],[\"数据库的日常维护\",{\"1\":{\"266\":1}}],[\"数据库的建立和维护\",{\"1\":{\"260\":1}}],[\"数据库中各种对象允许的操作和操作规则\",{\"1\":{\"262\":1}}],[\"数据库中的数据按照一定的数据模型组织\",{\"1\":{\"259\":1}}],[\"数据库整体结构化\",{\"1\":{\"261\":1}}],[\"数据库模式由一组关系模式构成\",{\"1\":{\"259\":1}}],[\"数据库模式\",{\"1\":{\"259\":1}}],[\"数据库系统中的封锁是指数据库并发执行过程中\",{\"1\":{\"310\":1}}],[\"数据库系统解决这些问题的主要方法是采用封锁技术\",{\"1\":{\"309\":1}}],[\"数据库系统的三级模式结构\",{\"0\":{\"263\":1}}],[\"数据库系统\",{\"1\":{\"259\":1}}],[\"数据库\",{\"0\":{\"257\":1},\"1\":{\"259\":1}}],[\"数据库密码\",{\"1\":{\"120\":1}}],[\"数据库账号\",{\"1\":{\"120\":1}}],[\"数据库连接地址\",{\"1\":{\"120\":1}}],[\"数据库连接\",{\"0\":{\"119\":1}}],[\"数据库名\",{\"1\":{\"111\":1,\"120\":1}}],[\"数据库端口\",{\"1\":{\"111\":1,\"120\":1}}],[\"数据库地址\",{\"1\":{\"111\":1}}],[\"数据库以目前使用最多的mysql为例\",{\"1\":{\"111\":1}}],[\"数据库并通过网络发送\",{\"1\":{\"52\":1}}],[\"数通信协议tcp或者udp\",{\"1\":{\"100\":1}}],[\"数组参数\",{\"0\":{\"67\":1}}],[\"数组\",{\"1\":{\"58\":2}}],[\"通道将被关闭\",{\"1\":{\"188\":1}}],[\"通道被关闭时\",{\"1\":{\"188\":1,\"189\":1}}],[\"通道的父进程的副本\",{\"1\":{\"188\":1}}],[\"通常命名为ctx\",{\"1\":{\"179\":1}}],[\"通常可以设置\",{\"1\":{\"95\":1}}],[\"通常会导致在服务器上的状态变化\",{\"1\":{\"56\":1}}],[\"通过游标\",{\"1\":{\"280\":1}}],[\"通过r执行的所有r读取均与对w的相应写入匹配\",{\"1\":{\"243\":1}}],[\"通过新建session的形式\",{\"1\":{\"154\":1}}],[\"通过limit和offset实现\",{\"1\":{\"147\":1}}],[\"通过db\",{\"1\":{\"144\":1}}],[\"通过在字段后面的标签说明\",{\"1\":{\"111\":1}}],[\"通过use设置全局中间件\",{\"1\":{\"104\":1}}],[\"通过session\",{\"1\":{\"98\":1}}],[\"通过将cookie的maxage设置为\",{\"1\":{\"97\":1}}],[\"通过上下文的参数\",{\"1\":{\"60\":1}}],[\"通过\",{\"1\":{\"15\":1,\"18\":1}}],[\"还有\",{\"1\":{\"154\":1}}],[\"还需要指明http\",{\"1\":{\"56\":1}}],[\"还不会编写\",{\"1\":{\"14\":1}}],[\"比如x\",{\"1\":{\"294\":1}}],[\"比如在编写存储过程或批处理作业时\",{\"1\":{\"280\":1}}],[\"比如模型名\",{\"1\":{\"171\":1}}],[\"比如有一个用户属性表\",{\"1\":{\"171\":1}}],[\"比如context\",{\"1\":{\"154\":1}}],[\"比如使用preparedstmt\",{\"1\":{\"154\":1}}],[\"比如说可以禁用默认的事务\",{\"1\":{\"154\":1}}],[\"比如结构体user\",{\"1\":{\"117\":1}}],[\"比如样式文件\",{\"1\":{\"90\":1}}],[\"比如用户模块\",{\"1\":{\"61\":1}}],[\"比如\",{\"1\":{\"56\":3,\"57\":1,\"58\":1,\"59\":3,\"61\":1,\"118\":1,\"144\":1,\"158\":1,\"212\":1}}],[\"比如127\",{\"1\":{\"56\":1}}],[\"比如http\",{\"1\":{\"56\":1}}],[\"协议规定\",{\"1\":{\"315\":1}}],[\"协议\",{\"1\":{\"56\":1}}],[\"0px\",{\"1\":{\"345\":6}}],[\"0775\",{\"1\":{\"197\":1}}],[\"06\",{\"1\":{\"150\":1}}],[\"03\",{\"1\":{\"135\":1}}],[\"000000\",{\"1\":{\"135\":1}}],[\"00\",{\"1\":{\"134\":1,\"150\":3}}],[\"0代表不限制\",{\"1\":{\"120\":2}}],[\"0\",{\"1\":{\"53\":4,\"56\":2,\"100\":1,\"105\":4,\"111\":3,\"115\":1,\"121\":4,\"134\":4,\"148\":1,\"149\":2,\"150\":1,\"158\":3,\"168\":2,\"171\":1,\"189\":1,\"196\":6,\"197\":1,\"198\":2,\"223\":1,\"224\":1,\"248\":3,\"249\":1,\"251\":2,\"344\":2,\"345\":6}}],[\"监听并在\",{\"1\":{\"53\":1}}],[\"ua\",{\"1\":{\"345\":1}}],[\"using\",{\"1\":{\"171\":1}}],[\"used\",{\"1\":{\"228\":1}}],[\"userid\",{\"1\":{\"171\":1}}],[\"userprofile\",{\"1\":{\"171\":8,\"172\":7}}],[\"user3\",{\"1\":{\"157\":2}}],[\"user2\",{\"1\":{\"157\":3,\"159\":2}}],[\"user1\",{\"1\":{\"157\":2,\"159\":2}}],[\"usertable\",{\"1\":{\"117\":2}}],[\"user结构体\",{\"1\":{\"114\":1}}],[\"users表和user\",{\"1\":{\"171\":1}}],[\"users\",{\"1\":{\"111\":7,\"117\":3,\"130\":5,\"133\":1,\"141\":1,\"154\":2,\"168\":1,\"172\":6}}],[\"username\",{\"1\":{\"111\":9,\"120\":4,\"127\":1,\"128\":1,\"129\":1,\"130\":5,\"132\":1,\"133\":2,\"140\":1,\"171\":5}}],[\"user\",{\"1\":{\"56\":1,\"59\":6,\"61\":3,\"65\":1,\"66\":16,\"67\":8,\"68\":3,\"70\":7,\"71\":5,\"72\":2,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"88\":1,\"111\":28,\"117\":7,\"118\":3,\"121\":1,\"127\":4,\"128\":1,\"129\":1,\"130\":4,\"131\":2,\"132\":1,\"133\":3,\"138\":1,\"140\":1,\"141\":1,\"143\":1,\"154\":6,\"161\":4,\"162\":4,\"163\":2,\"164\":2,\"169\":2,\"170\":4,\"171\":6,\"172\":6}}],[\"use\",{\"1\":{\"53\":1,\"98\":1,\"99\":1,\"100\":1,\"104\":2,\"105\":1}}],[\"uuid\",{\"1\":{\"161\":2}}],[\"upvotes\",{\"1\":{\"118\":4}}],[\"updates\",{\"1\":{\"137\":1,\"138\":2}}],[\"updated\",{\"1\":{\"118\":2}}],[\"updatedat\",{\"1\":{\"115\":1,\"118\":5}}],[\"updateuser\",{\"1\":{\"111\":1}}],[\"update\",{\"1\":{\"111\":2,\"135\":1,\"136\":1,\"138\":1,\"139\":2,\"140\":1,\"154\":3,\"158\":2,\"161\":1,\"162\":1,\"163\":1}}],[\"updatebyid\",{\"1\":{\"111\":2}}],[\"uint\",{\"1\":{\"118\":2,\"169\":2}}],[\"uniapp\",{\"0\":{\"343\":1},\"1\":{\"343\":1}}],[\"unix\",{\"1\":{\"118\":1,\"127\":1}}],[\"unixmilli\",{\"1\":{\"111\":1,\"171\":1}}],[\"undo撤销\",{\"1\":{\"318\":1}}],[\"underlying\",{\"1\":{\"222\":1}}],[\"unexported\",{\"1\":{\"225\":1}}],[\"unexpected\",{\"1\":{\"194\":1}}],[\"unreadrune方法让下一次调用readrune时返回之前调用readrune时返回的同一个utf\",{\"1\":{\"219\":1}}],[\"unreadrune\",{\"1\":{\"219\":1}}],[\"unreadbyte方法让下一次调用readbyte时返回之前调用readbyte时返回的同一个字节\",{\"1\":{\"216\":1}}],[\"unreadbyte\",{\"1\":{\"216\":1}}],[\"unlock\",{\"1\":{\"189\":1}}],[\"until\",{\"1\":{\"189\":1}}],[\"unknown\",{\"1\":{\"181\":1}}],[\"unsigned\",{\"1\":{\"111\":1,\"115\":3}}],[\"utf8mb4\",{\"1\":{\"171\":1}}],[\"utf\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"120\":1,\"345\":1}}],[\"url\",{\"1\":{\"66\":1,\"168\":1}}],[\"uri书写的时候\",{\"1\":{\"59\":1}}],[\"uri\",{\"0\":{\"59\":1}}],[\"ug\",{\"1\":{\"61\":3}}],[\"u\",{\"1\":{\"53\":1,\"79\":2,\"111\":4,\"161\":8,\"162\":5,\"163\":3,\"164\":3,\"170\":3,\"171\":1}}],[\"下面是一块存在内存泄露的代码段\",{\"1\":{\"248\":1}}],[\"下面是完成的例子\",{\"1\":{\"120\":1}}],[\"下一个\",{\"1\":{\"196\":1}}],[\"下一篇\",{\"1\":{\"4\":1}}],[\"下载并安装gin\",{\"1\":{\"53\":1}}],[\"打印输出err\",{\"1\":{\"227\":1}}],[\"打印按钮\",{\"1\":{\"10\":1}}],[\"打开文件后\",{\"1\":{\"198\":1}}],[\"打开\",{\"1\":{\"53\":1}}],[\"weight\",{\"1\":{\"345\":1}}],[\"wait\",{\"1\":{\"250\":1,\"251\":1}}],[\"waitgroup\",{\"1\":{\"250\":1,\"251\":1}}],[\"wg\",{\"1\":{\"250\":4,\"251\":8}}],[\"w接受字节片\",{\"1\":{\"244\":1}}],[\"writte\",{\"1\":{\"229\":1}}],[\"written\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"write只调用一次\",{\"1\":{\"244\":1}}],[\"write实现了标准的写接口\",{\"1\":{\"224\":1}}],[\"writestring将字符串s的内容写入w\",{\"1\":{\"244\":1}}],[\"writestring\",{\"0\":{\"244\":1},\"1\":{\"220\":1,\"244\":2}}],[\"writeseeker\",{\"1\":{\"206\":1}}],[\"writeseeker接口聚合了基本的写入和移位操作\",{\"1\":{\"206\":1}}],[\"writeseeker接口\",{\"0\":{\"206\":1}}],[\"writebyte\",{\"1\":{\"217\":2}}],[\"writeat\",{\"1\":{\"213\":2}}],[\"writeto\",{\"1\":{\"210\":1,\"227\":1}}],[\"writetimeout=60s\",{\"1\":{\"120\":1}}],[\"writetimeout\",{\"1\":{\"120\":1}}],[\"writecloser\",{\"1\":{\"203\":1}}],[\"writecloser接口聚合了基本的写入和关闭操作\",{\"1\":{\"203\":1}}],[\"writecloser接口\",{\"0\":{\"203\":1}}],[\"write\",{\"1\":{\"194\":2,\"197\":5,\"224\":1}}],[\"writedatabase\",{\"1\":{\"188\":4}}],[\"writer的代码\",{\"1\":{\"233\":1}}],[\"writers\",{\"1\":{\"232\":1}}],[\"writerat\",{\"1\":{\"213\":1}}],[\"writerat接口\",{\"0\":{\"213\":1}}],[\"writerto\",{\"1\":{\"210\":2}}],[\"writerto接口\",{\"0\":{\"210\":1}}],[\"writerinterface\",{\"1\":{\"197\":1}}],[\"writer接口\",{\"0\":{\"197\":1}}],[\"writeredis\",{\"1\":{\"188\":4}}],[\"writer\",{\"1\":{\"105\":1,\"201\":1,\"203\":1,\"204\":1,\"206\":1,\"207\":1,\"210\":1,\"227\":1,\"228\":1,\"229\":1,\"232\":2,\"243\":1,\"244\":1}}],[\"w\",{\"1\":{\"210\":3,\"224\":3,\"232\":2,\"233\":3,\"243\":1,\"244\":2}}],[\"whence\",{\"1\":{\"198\":5,\"225\":1,\"237\":1,\"241\":1}}],[\"whether\",{\"1\":{\"188\":1}}],[\"where子句绑定的参数\",{\"1\":{\"144\":1}}],[\"where子句中使用问号\",{\"1\":{\"144\":1}}],[\"where函数设置条件\",{\"1\":{\"144\":1}}],[\"where\",{\"0\":{\"144\":1},\"1\":{\"111\":3,\"135\":2,\"136\":1,\"137\":1,\"138\":2,\"140\":2,\"141\":1,\"144\":2,\"150\":1,\"158\":2,\"162\":1,\"163\":1,\"170\":4,\"172\":1}}],[\"would\",{\"1\":{\"105\":1}}],[\"word\",{\"1\":{\"345\":1}}],[\"world\",{\"1\":{\"58\":2,\"98\":2,\"99\":4,\"196\":1,\"197\":2,\"198\":1,\"244\":1,\"249\":1}}],[\"work\",{\"1\":{\"53\":2}}],[\"www\",{\"1\":{\"82\":1,\"345\":1}}],[\"with\",{\"1\":{\"234\":1}}],[\"withdeadline\",{\"0\":{\"189\":1},\"1\":{\"189\":4,\"190\":1}}],[\"withcancel\",{\"0\":{\"188\":1},\"1\":{\"188\":3,\"189\":1}}],[\"withvalue\",{\"0\":{\"186\":1},\"1\":{\"186\":4}}],[\"withtimeout函数\",{\"1\":{\"190\":1}}],[\"withtimeout\",{\"0\":{\"190\":1},\"1\":{\"154\":1,\"190\":3}}],[\"width\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":4}}],[\"width=device\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"windows\",{\"1\":{\"53\":1}}],[\"will\",{\"1\":{\"32\":1,\"243\":1}}],[\"div>\",{\"1\":{\"345\":4}}],[\"disablenestedtransaction\",{\"1\":{\"154\":1}}],[\"disabledatetimeprecision\",{\"1\":{\"121\":1}}],[\"dto\",{\"1\":{\"344\":1}}],[\"ddl触发器\",{\"1\":{\"287\":1}}],[\"dml触发器\",{\"1\":{\"287\":1}}],[\"dst\",{\"1\":{\"227\":2,\"228\":1,\"229\":1}}],[\"dsn格式\",{\"1\":{\"120\":1}}],[\"dsn翻译过来就叫数据源名称\",{\"1\":{\"120\":1}}],[\"dsn\",{\"0\":{\"120\":1},\"1\":{\"111\":2,\"121\":7}}],[\"duration\",{\"1\":{\"190\":1}}],[\"dur\",{\"1\":{\"189\":3}}],[\"drop\",{\"1\":{\"333\":1}}],[\"dryrun\",{\"1\":{\"154\":1}}],[\"drivername\",{\"1\":{\"121\":2}}],[\"driver\",{\"1\":{\"111\":2,\"121\":6}}],[\"datetime\",{\"1\":{\"121\":1,\"134\":1}}],[\"database\",{\"2\":{\"336\":1}}],[\"data\",{\"1\":{\"96\":2,\"119\":1,\"121\":4,\"161\":1,\"194\":1,\"223\":1,\"224\":1}}],[\"dao\",{\"1\":{\"111\":11,\"134\":2}}],[\"do\",{\"1\":{\"345\":1}}],[\"done通道的关闭可能会异步发生\",{\"1\":{\"183\":1}}],[\"done返回一个被关闭的通道\",{\"1\":{\"183\":1}}],[\"done返回一个channel通道\",{\"1\":{\"183\":1}}],[\"done返回nil\",{\"1\":{\"183\":1}}],[\"done\",{\"1\":{\"181\":1,\"183\":2,\"188\":9,\"189\":2,\"190\":1,\"250\":1,\"251\":2}}],[\"dontsupportrenamecolumn\",{\"1\":{\"121\":1}}],[\"dontsupportrenameindex\",{\"1\":{\"121\":1}}],[\"docs\",{\"1\":{\"116\":1}}],[\"doctype\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"domain\",{\"1\":{\"95\":2}}],[\"designed\",{\"1\":{\"234\":1}}],[\"description\",{\"1\":{\"345\":1}}],[\"desc\",{\"1\":{\"146\":1,\"147\":1}}],[\"define\",{\"0\":{\"274\":1}}],[\"defer\",{\"1\":{\"189\":2,\"190\":2,\"196\":1,\"250\":7,\"251\":2}}],[\"defaultstringsize\",{\"1\":{\"121\":1}}],[\"defaultmany\",{\"1\":{\"99\":2}}],[\"defaultquery\",{\"1\":{\"66\":1}}],[\"default\",{\"1\":{\"53\":1,\"87\":1,\"98\":2,\"99\":1,\"100\":2,\"111\":3,\"115\":2,\"134\":4,\"171\":3,\"188\":3}}],[\"deadlineexceeded\",{\"1\":{\"189\":2}}],[\"deadline返回的时间是代表该上下文所做的工作应该被取消的时间\",{\"1\":{\"183\":1}}],[\"deadline\",{\"1\":{\"181\":2,\"183\":2,\"189\":4}}],[\"debug包的setgcpercent函数允许在运行时修改该百分比\",{\"1\":{\"248\":1}}],[\"debug\",{\"1\":{\"122\":1}}],[\"decimal\",{\"1\":{\"115\":1,\"134\":1}}],[\"del\",{\"1\":{\"97\":1}}],[\"delete和drop的区别\",{\"0\":{\"333\":1}}],[\"deletedat\",{\"1\":{\"118\":5}}],[\"deleted\",{\"1\":{\"117\":1}}],[\"deleteuser\",{\"1\":{\"111\":1}}],[\"deletebyid\",{\"1\":{\"111\":2}}],[\"delete方法删除指定的资源\",{\"1\":{\"56\":1}}],[\"delete\",{\"1\":{\"56\":1,\"57\":1,\"58\":3,\"111\":2,\"141\":4,\"333\":1}}],[\"d\",{\"1\":{\"53\":10,\"111\":1,\"189\":7}}],[\"dba的主要职责\",{\"0\":{\"266\":1}}],[\"dbms的主要功能\",{\"0\":{\"260\":1}}],[\"dbms\",{\"1\":{\"259\":2}}],[\"dbname\",{\"1\":{\"111\":2,\"120\":4,\"121\":1}}],[\"db\",{\"1\":{\"52\":1,\"111\":10,\"117\":6,\"118\":1,\"121\":3,\"122\":1,\"123\":2,\"127\":1,\"128\":1,\"129\":1,\"130\":2,\"131\":2,\"132\":1,\"133\":1,\"134\":1,\"135\":2,\"136\":2,\"137\":2,\"138\":5,\"139\":2,\"140\":3,\"141\":4,\"143\":6,\"144\":2,\"145\":2,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"154\":4,\"156\":4,\"157\":4,\"158\":4,\"159\":1,\"160\":1,\"161\":4,\"162\":3,\"163\":2,\"164\":2,\"168\":11,\"169\":1,\"170\":7,\"171\":1,\"172\":4,\"344\":7}}],[\"环境变量goarch\",{\"1\":{\"248\":1}}],[\"环境变量gotraceback控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出\",{\"1\":{\"248\":1}}],[\"环境变量gomaxprocs限制可以同时运行用户层次的go代码的操作系统进程数\",{\"1\":{\"248\":1}}],[\"环境变量godebug控制运行时的debug输出\",{\"1\":{\"248\":1}}],[\"环境变量gogc设置最初的垃圾收集目标百分比\",{\"1\":{\"248\":1}}],[\"环境变量\",{\"0\":{\"248\":1}}],[\"环境\",{\"1\":{\"53\":1}}],[\"3em\",{\"1\":{\"345\":1}}],[\"333333\",{\"1\":{\"345\":1}}],[\"3306\",{\"1\":{\"111\":1,\"120\":4,\"121\":2}}],[\"35px\",{\"1\":{\"345\":3}}],[\"3nf到4nf消除了主属性对码的部分函数依赖和传递函数依赖\",{\"1\":{\"294\":1}}],[\"3nf\",{\"1\":{\"294\":1}}],[\"30\",{\"1\":{\"111\":1,\"115\":1}}],[\"3600\",{\"1\":{\"95\":1}}],[\"3\",{\"0\":{\"53\":1,\"59\":1,\"68\":1,\"72\":1,\"79\":1,\"89\":1,\"97\":1,\"117\":1,\"122\":1,\"130\":1,\"137\":1,\"141\":1,\"145\":1,\"158\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":2,\"164\":1,\"170\":1,\"183\":1,\"190\":1,\"198\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":2,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"217\":1,\"224\":1,\"229\":1,\"240\":1,\"250\":1},\"1\":{\"130\":1,\"198\":1,\"235\":1,\"248\":2}}],[\"渲染提供了易于使用的\",{\"1\":{\"52\":1}}],[\"内模式改变后只需要对模式\",{\"1\":{\"265\":1}}],[\"内模式映像进行修改\",{\"1\":{\"265\":1}}],[\"内模式映像\",{\"1\":{\"264\":1}}],[\"内模式\",{\"1\":{\"263\":1}}],[\"内含隐藏或非导出字段\",{\"1\":{\"223\":1,\"224\":1}}],[\"内置渲染\",{\"1\":{\"52\":1}}],[\"内容\",{\"1\":{\"16\":1}}],[\"最终由浏览器保存\",{\"1\":{\"94\":1}}],[\"最终\",{\"1\":{\"52\":1}}],[\"最终操作\",{\"1\":{\"52\":1}}],[\"此外\",{\"1\":{\"52\":1}}],[\"此文字有脚注\",{\"1\":{\"24\":1}}],[\"版本自动配置\",{\"1\":{\"121\":1}}],[\"版本\",{\"1\":{\"52\":1}}],[\"更改\",{\"1\":{\"282\":1}}],[\"更改为\",{\"1\":{\"120\":1}}],[\"更严格\",{\"1\":{\"212\":1}}],[\"更多的示例\",{\"1\":{\"183\":1}}],[\"更新异常\",{\"1\":{\"293\":1}}],[\"更新选定的字段\",{\"0\":{\"138\":1}}],[\"更新非零值的字段\",{\"1\":{\"137\":1}}],[\"更新多列\",{\"0\":{\"137\":1}}],[\"更新单个列\",{\"0\":{\"136\":1}}],[\"更新数据\",{\"0\":{\"134\":1}}],[\"更新时可用的\",{\"1\":{\"162\":1}}],[\"更新时会自动填充当前时间\",{\"1\":{\"118\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"10\":1}}],[\"更新时间\",{\"1\":{\"4\":1,\"115\":1,\"118\":1}}],[\"更新\",{\"0\":{\"162\":1},\"1\":{\"111\":1,\"160\":2,\"162\":1}}],[\"更好地组织路由\",{\"1\":{\"52\":1}}],[\"路径参数\",{\"0\":{\"72\":1},\"1\":{\"59\":1}}],[\"路径导航\",{\"1\":{\"4\":1,\"10\":1}}],[\"路由是uri到函数的映射\",{\"1\":{\"56\":1}}],[\"路由\",{\"0\":{\"56\":1}}],[\"路由组\",{\"1\":{\"52\":1}}],[\"验证码为\",{\"1\":{\"345\":1}}],[\"验证\",{\"1\":{\"52\":1}}],[\"这对于需要逐行处理数据的情况非常有用\",{\"1\":{\"280\":1}}],[\"这是一个很明显的内存泄露场景\",{\"1\":{\"248\":1}}],[\"这是因为默认的外键是结构体名字+下划线+id\",{\"1\":{\"171\":1}}],[\"这些事务的最新一个日志记录地址\",{\"1\":{\"320\":1}}],[\"这些读取会完全消耗已写入的数据\",{\"1\":{\"233\":1}}],[\"这些组可以无限制地嵌套而不会降低性能\",{\"1\":{\"52\":1}}],[\"这个例子传递了一个带有超时的上下文\",{\"1\":{\"190\":1}}],[\"这个例子传递了一个带有任意截止日期的上下文\",{\"1\":{\"189\":1}}],[\"这个例子演示了使用\",{\"1\":{\"186\":1}}],[\"这种一般情况的一个例子就是\",{\"1\":{\"196\":1}}],[\"这种共享逻辑需要定义为类型func\",{\"1\":{\"168\":1}}],[\"这种时候\",{\"1\":{\"61\":1}}],[\"这里就是举个例子\",{\"1\":{\"158\":1}}],[\"这里回滚作用不大\",{\"1\":{\"158\":1}}],[\"这里因为我们重新定义了一个结构体用于保存结果\",{\"1\":{\"149\":1}}],[\"这样在恢复时只不过多执行一次undo操作\",{\"1\":{\"322\":1}}],[\"这样就没有办法恢复这个修改了\",{\"1\":{\"322\":1}}],[\"这样做可以在读取一些字节\",{\"1\":{\"196\":1}}],[\"这样\",{\"1\":{\"52\":1}}],[\"这意味着你可以在\",{\"1\":{\"35\":1}}],[\"它确保数据库操作的一致性和完整性\",{\"1\":{\"307\":1}}],[\"它要求两个关系中进行比较的分量必须是相同的属性组\",{\"1\":{\"269\":1}}],[\"它们将无法推进下去\",{\"1\":{\"312\":1}}],[\"它们影响go程序的构建\",{\"1\":{\"248\":1}}],[\"它们被顺序读取\",{\"1\":{\"231\":1}}],[\"它也包括用于reflect包的低层次类型信息\",{\"1\":{\"247\":1}}],[\"它也会在调用过程中使用\",{\"1\":{\"196\":1}}],[\"它不会在列表中继续下去\",{\"1\":{\"232\":1}}],[\"它是所提供的输入阅读器的逻辑串联\",{\"1\":{\"231\":1}}],[\"它从r开始读取偏移量off\",{\"1\":{\"238\":1}}],[\"它从r开始读取\",{\"1\":{\"225\":1,\"237\":1}}],[\"它从管道中读取数据\",{\"1\":{\"223\":1}}],[\"它将数据写入管道\",{\"1\":{\"224\":1}}],[\"它就必须返回一个非nil的错误\",{\"1\":{\"197\":1}}],[\"它就会返回读取的字节数\",{\"1\":{\"196\":1}}],[\"它返回复制的字节数\",{\"1\":{\"236\":1}}],[\"它返回复制的字节数n\",{\"1\":{\"235\":1}}],[\"它返回复制的字节数以及复制时遇到的最早错误\",{\"1\":{\"229\":1}}],[\"它返回复制的字节数和复制时遇到的第一个错误\",{\"1\":{\"227\":1}}],[\"它返回从\",{\"1\":{\"197\":1}}],[\"它返回读取的字节数\",{\"1\":{\"196\":1}}],[\"它主要包装了一些已有的实现\",{\"1\":{\"193\":1}}],[\"它通常由主函数\",{\"1\":{\"184\":1}}],[\"它永远不会被取消\",{\"1\":{\"184\":1}}],[\"它可以对\",{\"1\":{\"179\":1}}],[\"它会从相同的调用中返回\",{\"1\":{\"196\":1}}],[\"它会在创建\",{\"1\":{\"160\":1}}],[\"它会被缓存下来以便后续使用\",{\"1\":{\"117\":1}}],[\"它\",{\"1\":{\"52\":1}}],[\"并不会影响数据库的正确性\",{\"1\":{\"322\":1}}],[\"并不是用了某一个框架就不能用别的框架\",{\"1\":{\"51\":1}}],[\"并执行恢复\",{\"1\":{\"319\":1}}],[\"并对那些操作进行逆操作\",{\"1\":{\"319\":1}}],[\"并发控制的主要技术\",{\"0\":{\"332\":1}}],[\"并发控制能保证事务的acid性质\",{\"1\":{\"306\":1}}],[\"并发送给浏览器\",{\"1\":{\"94\":1}}],[\"并且在结果中把重复的属性列去掉\",{\"1\":{\"269\":1}}],[\"并且在写操作时将数据附加到文件尾部\",{\"1\":{\"197\":1}}],[\"并且易于拓展\",{\"1\":{\"259\":1}}],[\"并且如果可能会采用操作系统特定的方式崩溃\",{\"1\":{\"248\":1}}],[\"并返回其读取的数据\",{\"1\":{\"234\":1}}],[\"并返回rune及其字节大小\",{\"1\":{\"218\":1}}],[\"并在n个字节后以eof停止\",{\"1\":{\"225\":1,\"237\":1,\"238\":1}}],[\"并作为传入请求的顶级上下文\",{\"1\":{\"184\":1}}],[\"并将这些抽象成为实用性的功能和一些其他相关的接口\",{\"1\":{\"193\":1}}],[\"并将其缓存\",{\"1\":{\"154\":1}}],[\"并将结果转化为对应的模型\",{\"1\":{\"114\":1}}],[\"并获取到id\",{\"1\":{\"111\":1}}],[\"并\",{\"1\":{\"52\":1}}],[\"ccc\",{\"1\":{\"345\":1}}],[\"center\",{\"1\":{\"345\":1}}],[\"cellpadding=\",{\"1\":{\"345\":1}}],[\"cpus\",{\"1\":{\"252\":1}}],[\"cpu\",{\"1\":{\"248\":4,\"252\":1}}],[\"current\",{\"1\":{\"189\":1}}],[\"cur\",{\"1\":{\"189\":2}}],[\"chan\",{\"1\":{\"181\":1,\"183\":1,\"248\":1}}],[\"character\",{\"1\":{\"171\":1}}],[\"charset=utf8\",{\"1\":{\"111\":1,\"120\":6,\"121\":2}}],[\"charset=utf8mb4\",{\"1\":{\"111\":1,\"115\":1,\"120\":1,\"121\":1,\"134\":1}}],[\"charset=\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"clock\",{\"1\":{\"248\":3}}],[\"close关闭写入器\",{\"1\":{\"224\":1}}],[\"close关闭读取器\",{\"1\":{\"223\":1}}],[\"closewitherror类似close方法\",{\"1\":{\"223\":1,\"224\":1}}],[\"closewitherror\",{\"1\":{\"223\":1,\"224\":1}}],[\"closer关闭的接口\",{\"1\":{\"199\":1}}],[\"closer\",{\"1\":{\"199\":1,\"202\":1,\"203\":1,\"204\":1}}],[\"closer接口\",{\"0\":{\"199\":1}}],[\"closed\",{\"1\":{\"194\":1}}],[\"close\",{\"1\":{\"154\":2,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"223\":1,\"224\":1,\"233\":1}}],[\"clause\",{\"1\":{\"132\":1}}],[\"cn\",{\"1\":{\"116\":1}}],[\"calls\",{\"1\":{\"194\":1}}],[\"cannot\",{\"1\":{\"188\":1,\"189\":1}}],[\"cancelctx\",{\"1\":{\"189\":1}}],[\"canceled\",{\"1\":{\"188\":1,\"189\":2}}],[\"cancel\",{\"1\":{\"188\":5,\"189\":7,\"190\":4}}],[\"cancelfunc可以被多个goroutine同时调用\",{\"1\":{\"182\":1}}],[\"cancelfunc不会等待工作停止\",{\"1\":{\"182\":1}}],[\"cancelfunc类型是一个停止工作的方法\",{\"1\":{\"182\":1}}],[\"cancelfunc\",{\"0\":{\"182\":1},\"1\":{\"182\":1,\"188\":1,\"189\":1,\"190\":1}}],[\"can\",{\"1\":{\"161\":1}}],[\"case\",{\"1\":{\"168\":2,\"181\":2,\"183\":2,\"188\":3,\"189\":2,\"190\":2,\"344\":2}}],[\"case风格的复数形式做为表名\",{\"1\":{\"115\":1}}],[\"case风格命名为create\",{\"1\":{\"115\":1}}],[\"case命名风格\",{\"1\":{\"115\":1}}],[\"case命名风格转换成mysql表字段名\",{\"1\":{\"115\":1}}],[\"catch\",{\"1\":{\"52\":1}}],[\"css\",{\"1\":{\"90\":5}}],[\"ctx\",{\"1\":{\"58\":14,\"59\":7,\"61\":8,\"66\":19,\"67\":9,\"68\":6,\"70\":10,\"71\":3,\"72\":3,\"73\":4,\"77\":2,\"78\":2,\"79\":2,\"80\":3,\"81\":2,\"82\":2,\"83\":2,\"104\":1,\"186\":5,\"188\":11,\"189\":2,\"190\":6}}],[\"c\",{\"1\":{\"53\":2,\"87\":2,\"89\":2,\"95\":3,\"96\":4,\"97\":3,\"98\":3,\"99\":4,\"100\":3,\"105\":6,\"111\":10,\"188\":4,\"189\":12,\"217\":1,\"250\":1}}],[\"cd\",{\"1\":{\"53\":1}}],[\"crud\",{\"1\":{\"273\":1}}],[\"createbatchsize\",{\"1\":{\"154\":1}}],[\"createinbatches\",{\"1\":{\"130\":2}}],[\"created\",{\"1\":{\"118\":1}}],[\"createdat\",{\"1\":{\"115\":1,\"118\":5}}],[\"createtime的snake\",{\"1\":{\"115\":1}}],[\"createtime\",{\"1\":{\"111\":5,\"115\":3,\"116\":1,\"127\":1,\"133\":2,\"134\":2,\"171\":5}}],[\"create\",{\"1\":{\"111\":2,\"115\":1,\"117\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":2,\"132\":1,\"134\":2,\"147\":1,\"150\":1,\"156\":2,\"157\":3,\"158\":2,\"159\":2,\"171\":1,\"188\":1,\"189\":1}}],[\"creating\",{\"1\":{\"53\":1}}],[\"crash\",{\"1\":{\"52\":1}}],[\"code\",{\"1\":{\"345\":1}}],[\"copied\",{\"1\":{\"243\":1}}],[\"copyn将n个字节\",{\"1\":{\"229\":1}}],[\"copyn\",{\"0\":{\"229\":1},\"1\":{\"229\":2}}],[\"copybuffer与copy相同\",{\"1\":{\"228\":1}}],[\"copybuffer\",{\"0\":{\"228\":1},\"1\":{\"228\":3}}],[\"copy\",{\"0\":{\"227\":1},\"1\":{\"227\":2,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"238\":1,\"241\":1}}],[\"collapse\",{\"1\":{\"345\":2}}],[\"column\",{\"1\":{\"111\":7,\"115\":1,\"116\":3,\"171\":6}}],[\"color=\",{\"1\":{\"345\":2}}],[\"color\",{\"1\":{\"90\":1,\"345\":6}}],[\"count++\",{\"1\":{\"100\":1}}],[\"count\",{\"0\":{\"148\":1},\"1\":{\"100\":8,\"145\":1,\"148\":1,\"149\":2,\"150\":1}}],[\"cookievalue\",{\"1\":{\"95\":1,\"97\":1}}],[\"cookie作用域\",{\"1\":{\"95\":1}}],[\"cookie路径\",{\"1\":{\"95\":1}}],[\"cookie值\",{\"1\":{\"95\":1}}],[\"cookie名字\",{\"1\":{\"95\":1}}],[\"cookie由服务器创建\",{\"1\":{\"94\":1}}],[\"cookie实际上就是服务器保存在浏览器上的一段信息\",{\"1\":{\"94\":1}}],[\"cookie就是解决http协议无状态的方案之一\",{\"1\":{\"94\":1}}],[\"cookie\",{\"0\":{\"94\":1},\"1\":{\"95\":2,\"96\":2,\"97\":1,\"98\":2,\"99\":2}}],[\"confirmed\",{\"1\":{\"162\":1,\"163\":1}}],[\"config\",{\"1\":{\"111\":1,\"121\":5}}],[\"connpool\",{\"1\":{\"154\":1}}],[\"connect方法建立一个到由目标资源标识的服务器的隧道\",{\"1\":{\"56\":1}}],[\"connect\",{\"1\":{\"56\":1}}],[\"contains\",{\"1\":{\"225\":1}}],[\"contrib\",{\"1\":{\"98\":4,\"99\":2,\"100\":3}}],[\"content=\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":3}}],[\"context函数\",{\"0\":{\"187\":1}}],[\"context包中定义了一个空的context\",{\"1\":{\"181\":1}}],[\"context类型\",{\"0\":{\"180\":1}}],[\"context标准库\",{\"0\":{\"179\":1}}],[\"context\",{\"0\":{\"181\":1,\"183\":1},\"1\":{\"53\":1,\"58\":7,\"59\":3,\"60\":1,\"61\":4,\"66\":5,\"67\":3,\"68\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"87\":1,\"89\":1,\"95\":2,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"104\":1,\"105\":2,\"111\":5,\"154\":8,\"179\":4,\"181\":7,\"183\":4,\"184\":1,\"185\":1,\"186\":8,\"188\":12,\"189\":6,\"190\":8}}],[\"constraint\",{\"1\":{\"171\":1}}],[\"const\",{\"1\":{\"19\":1,\"189\":1,\"190\":1}}],[\"compatible\",{\"1\":{\"345\":1}}],[\"company\",{\"1\":{\"68\":1}}],[\"commit提交\",{\"1\":{\"318\":1}}],[\"commit\",{\"1\":{\"157\":1,\"158\":2,\"159\":2}}],[\"comment\",{\"1\":{\"111\":4,\"115\":5,\"134\":6}}],[\"com\",{\"1\":{\"53\":4,\"56\":1,\"82\":1,\"87\":1,\"89\":1,\"98\":4,\"99\":3,\"100\":4,\"105\":1,\"110\":1,\"111\":4,\"121\":3}}],[\"coverview\",{\"1\":{\"44\":1}}],[\"支持的name如下\",{\"1\":{\"248\":1}}],[\"支持嵌套事务\",{\"1\":{\"157\":1}}],[\"支持把数据库datetime和date类型转换为golang的time\",{\"1\":{\"120\":1}}],[\"支持中间件\",{\"1\":{\"52\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"27\":1}}],[\"性能\",{\"1\":{\"52\":1}}],[\"可串行化调度是并行调度正确的唯一准则\",{\"1\":{\"314\":1}}],[\"可共享的大量数据的集合\",{\"1\":{\"259\":1}}],[\"可用于连接期望io\",{\"1\":{\"233\":1}}],[\"可能会导致错误\",{\"1\":{\"216\":1,\"219\":1}}],[\"可能的返回不是\",{\"1\":{\"196\":1}}],[\"可扩展性\",{\"1\":{\"52\":1,\"331\":1}}],[\"可预测的\",{\"1\":{\"52\":1}}],[\"可以回滚\",{\"1\":{\"333\":1}}],[\"可以和where子句一起使用\",{\"1\":{\"333\":1}}],[\"可以和别人共享\",{\"1\":{\"328\":1}}],[\"可以让用户从多种角度来看同一组数据\",{\"1\":{\"277\":1}}],[\"可以考虑使用存储过程\",{\"1\":{\"275\":1}}],[\"可以被各种用户共享\",{\"1\":{\"259\":1}}],[\"可以看到程序在运行过程中\",{\"1\":{\"248\":1}}],[\"可以看的出来sectionreader是根据readerat实现的\",{\"1\":{\"241\":1}}],[\"可以在结果集中检索数据\",{\"1\":{\"280\":1}}],[\"可以在系统调用中阻塞的go程数的限制\",{\"1\":{\"248\":1}}],[\"可以在初始化过程中使用\",{\"1\":{\"121\":1}}],[\"可以使用组合接口进行传递\",{\"1\":{\"200\":1}}],[\"可以使用标签\",{\"1\":{\"118\":1}}],[\"可以特定行为来实现\",{\"1\":{\"199\":1}}],[\"可以这么做\",{\"1\":{\"172\":1}}],[\"可以绑定多个参数\",{\"1\":{\"144\":1}}],[\"可以通过对比gorm\",{\"1\":{\"143\":1}}],[\"可以通过上下文对象\",{\"1\":{\"105\":1}}],[\"可以将它嵌入到您的结构体中\",{\"1\":{\"118\":1}}],[\"可以忽略struct字段\",{\"1\":{\"116\":1}}],[\"可以是ip或者域名\",{\"1\":{\"111\":1,\"120\":1}}],[\"可以统一进行渲染\",{\"1\":{\"88\":1}}],[\"可以解析并验证请求的\",{\"1\":{\"52\":1}}],[\"可以\",{\"1\":{\"52\":1,\"88\":1}}],[\"可以选择性的使用各个库中的优秀组件\",{\"1\":{\"51\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"13\":1}}],[\"小内存占用\",{\"1\":{\"52\":1}}],[\"树的路由\",{\"1\":{\"52\":1}}],[\"rgb\",{\"1\":{\"345\":4}}],[\"right\",{\"1\":{\"345\":5}}],[\"r模式合并时发生的三种冲突\",{\"0\":{\"301\":1}}],[\"r图转化为关系数据模型\",{\"1\":{\"300\":1}}],[\"r图转化为数据模型\",{\"1\":{\"296\":1}}],[\"r图\",{\"1\":{\"296\":1}}],[\"r3\",{\"1\":{\"231\":2}}],[\"r2\",{\"1\":{\"228\":2,\"231\":2}}],[\"r1\",{\"1\":{\"228\":2,\"231\":2}}],[\"rdwr|os\",{\"1\":{\"197\":1}}],[\"rollback回滚\",{\"1\":{\"318\":1}}],[\"rollbackto\",{\"1\":{\"159\":2}}],[\"rollback\",{\"1\":{\"157\":2,\"158\":3,\"159\":1,\"161\":1}}],[\"role\",{\"1\":{\"154\":1,\"161\":1}}],[\"rowsaffected用于返回sql执行后影响的行数\",{\"1\":{\"158\":1}}],[\"rowsaffected\",{\"1\":{\"127\":1,\"158\":3}}],[\"root\",{\"1\":{\"111\":2,\"120\":4}}],[\"router\",{\"1\":{\"88\":1}}],[\"radius\",{\"1\":{\"345\":8}}],[\"radix\",{\"1\":{\"52\":1}}],[\"raw\",{\"1\":{\"150\":1}}],[\"raw函数支持绑定多个参数\",{\"1\":{\"150\":1}}],[\"raw第二个参数\",{\"1\":{\"150\":1}}],[\"range\",{\"1\":{\"73\":2,\"130\":1,\"154\":1}}],[\"runtime\",{\"0\":{\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1},\"1\":{\"248\":1,\"249\":3,\"250\":2,\"251\":6,\"252\":2,\"253\":2}}],[\"runtime包提供和go运行时环境的互操作\",{\"1\":{\"247\":1}}],[\"runtime标准库\",{\"0\":{\"247\":1}}],[\"runescanner\",{\"1\":{\"219\":1}}],[\"runescanner接口在基本的readrune方法之外还添加了unreadrune方法\",{\"1\":{\"219\":1}}],[\"runescanner接口\",{\"0\":{\"219\":1}}],[\"rune\",{\"1\":{\"218\":1}}],[\"runereader\",{\"1\":{\"218\":1,\"219\":1}}],[\"runereader接口\",{\"0\":{\"218\":1}}],[\"running\",{\"1\":{\"188\":3}}],[\"run\",{\"1\":{\"53\":1,\"87\":1,\"98\":1,\"99\":1,\"100\":1,\"104\":1,\"105\":1,\"248\":1}}],[\"r\",{\"1\":{\"53\":3,\"58\":7,\"59\":3,\"61\":2,\"66\":5,\"67\":3,\"68\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"87\":4,\"88\":1,\"89\":3,\"90\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":4,\"99\":4,\"100\":4,\"104\":5,\"105\":4,\"111\":2,\"168\":4,\"209\":5,\"218\":1,\"222\":2,\"223\":3,\"225\":1,\"227\":2,\"229\":2,\"230\":3,\"231\":2,\"232\":2,\"233\":2,\"234\":3,\"235\":5,\"236\":4,\"237\":1,\"238\":3,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":6}}],[\"reply\",{\"1\":{\"345\":1}}],[\"repeat\",{\"1\":{\"345\":1}}],[\"relative\",{\"1\":{\"345\":1}}],[\"rel=\",{\"1\":{\"90\":1}}],[\"req\",{\"1\":{\"344\":3}}],[\"required\",{\"1\":{\"66\":1}}],[\"request\",{\"1\":{\"66\":1,\"168\":1}}],[\"redo重做\",{\"1\":{\"318\":1}}],[\"redis密码\",{\"1\":{\"100\":1}}],[\"redis地址\",{\"1\":{\"100\":1}}],[\"redis最大的空闲连接数\",{\"1\":{\"100\":1}}],[\"redis\",{\"1\":{\"100\":3}}],[\"redirect\",{\"1\":{\"82\":1}}],[\"reused\",{\"1\":{\"228\":1}}],[\"remaining\",{\"1\":{\"222\":1}}],[\"references\",{\"1\":{\"171\":1}}],[\"registerrouter\",{\"1\":{\"111\":1}}],[\"regarded\",{\"1\":{\"32\":1}}],[\"readfull将r中的len\",{\"1\":{\"236\":1}}],[\"readfull\",{\"0\":{\"236\":1},\"1\":{\"236\":3}}],[\"readfrom\",{\"1\":{\"209\":2,\"227\":1}}],[\"readall从r读取\",{\"1\":{\"234\":1}}],[\"readall\",{\"0\":{\"234\":1},\"1\":{\"234\":2,\"243\":1}}],[\"readatleast从r读取到buf\",{\"1\":{\"235\":1}}],[\"readatleast\",{\"0\":{\"235\":1},\"1\":{\"235\":4}}],[\"readat\",{\"0\":{\"240\":1},\"1\":{\"212\":4,\"225\":1,\"237\":1,\"240\":2}}],[\"read实现了标准的读取接口\",{\"1\":{\"223\":1}}],[\"read在n<=0时或基础r返回eof时返回eof\",{\"1\":{\"222\":1,\"230\":1}}],[\"readrune\",{\"1\":{\"218\":2}}],[\"readbyte读取输入中的单个字节并返回\",{\"1\":{\"215\":1}}],[\"readbyte\",{\"1\":{\"215\":1}}],[\"readseeker\",{\"1\":{\"205\":1}}],[\"readseeker接口聚合了基本的读取和移位操作\",{\"1\":{\"205\":1}}],[\"readseeker接口\",{\"0\":{\"205\":1}}],[\"readwriteseeker\",{\"1\":{\"207\":1}}],[\"readwriteseeker接口聚合了基本的读写和移位操作\",{\"1\":{\"207\":1}}],[\"readwriteseeker接口\",{\"0\":{\"207\":1}}],[\"readwritecloser\",{\"1\":{\"204\":1}}],[\"readwritecloser接口聚合了基本的读写和关闭操作\",{\"1\":{\"204\":1}}],[\"readwritecloser接口\",{\"0\":{\"204\":1}}],[\"readwriter\",{\"1\":{\"201\":1}}],[\"readwriter接口聚合了基本的读写操作\",{\"1\":{\"201\":1}}],[\"readwriter接口\",{\"0\":{\"201\":1}}],[\"readcloser就是reader+closer\",{\"1\":{\"202\":1}}],[\"readcloser\",{\"1\":{\"202\":1}}],[\"readcloser接口\",{\"0\":{\"202\":1}}],[\"reader的代码和期望io\",{\"1\":{\"233\":1}}],[\"reader的实现有问题的标志\",{\"1\":{\"194\":1}}],[\"readers\",{\"1\":{\"231\":1}}],[\"readerat\",{\"1\":{\"212\":1,\"225\":1,\"237\":1,\"238\":1}}],[\"readerat接口\",{\"0\":{\"212\":1}}],[\"readerfrom\",{\"1\":{\"209\":1}}],[\"readerfrom接口\",{\"0\":{\"209\":1}}],[\"reader\",{\"1\":{\"196\":2,\"201\":1,\"202\":1,\"204\":1,\"205\":1,\"207\":1,\"209\":1,\"222\":4,\"227\":2,\"228\":3,\"229\":2,\"230\":3,\"231\":8,\"232\":1,\"233\":2,\"234\":1,\"235\":3,\"236\":3,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":4}}],[\"reader接口\",{\"0\":{\"196\":1}}],[\"reader接口的客户端如果多次调用read都不返回数据也不返回错误时\",{\"1\":{\"194\":1}}],[\"readonly\",{\"1\":{\"162\":1}}],[\"readtimeout=30s\",{\"1\":{\"120\":1}}],[\"readtimeout\",{\"1\":{\"120\":1}}],[\"read\",{\"0\":{\"239\":1},\"1\":{\"96\":1,\"162\":1,\"194\":2,\"196\":8,\"198\":1,\"212\":1,\"223\":1,\"225\":1,\"227\":1,\"229\":1,\"230\":1,\"232\":1,\"233\":2,\"235\":3,\"236\":2,\"237\":1,\"238\":1,\"239\":3,\"240\":1,\"241\":1,\"242\":1,\"243\":2}}],[\"returns\",{\"1\":{\"154\":1}}],[\"return\",{\"1\":{\"89\":1,\"96\":1,\"105\":1,\"111\":3,\"117\":4,\"134\":1,\"156\":3,\"157\":3,\"158\":1,\"161\":4,\"162\":2,\"163\":1,\"164\":1,\"168\":2,\"171\":1,\"181\":7,\"184\":1,\"185\":1,\"186\":1,\"188\":4,\"189\":3,\"190\":1,\"194\":1,\"196\":1,\"344\":2}}],[\"results\",{\"1\":{\"149\":2,\"150\":2}}],[\"result\",{\"1\":{\"127\":2,\"149\":2,\"190\":1}}],[\"response\",{\"1\":{\"77\":1}}],[\"restful\",{\"0\":{\"57\":1},\"1\":{\"57\":1}}],[\"resource\",{\"2\":{\"45\":1}}],[\"recovery\",{\"1\":{\"104\":1}}],[\"recover\",{\"1\":{\"52\":1}}],[\"快速入门\",{\"0\":{\"53\":1,\"110\":1}}],[\"快速\",{\"1\":{\"52\":1}}],[\"认识gin\",{\"0\":{\"51\":1}}],[\"bcnf到4nf消除了非平凡且非函数依赖的多值依赖\",{\"1\":{\"294\":1}}],[\"bcnf\",{\"1\":{\"294\":1}}],[\"break\",{\"1\":{\"196\":1,\"345\":2}}],[\"buf2\",{\"1\":{\"232\":3}}],[\"buf1\",{\"1\":{\"232\":3}}],[\"buf\",{\"1\":{\"196\":3,\"198\":4,\"228\":5,\"235\":4,\"236\":6,\"239\":3,\"240\":3}}],[\"buffer\",{\"1\":{\"194\":1,\"228\":1,\"232\":1,\"235\":1}}],[\"btree\",{\"1\":{\"171\":1}}],[\"blog\",{\"1\":{\"118\":4,\"183\":1}}],[\"by\",{\"1\":{\"111\":1,\"149\":1,\"150\":1}}],[\"bytes\",{\"1\":{\"222\":1,\"232\":2}}],[\"bytescanner\",{\"1\":{\"216\":1}}],[\"bytescanner接口在基本的readbyte方法之外还添加了unreadbyte方法\",{\"1\":{\"216\":1}}],[\"bytescanner接口\",{\"0\":{\"216\":1}}],[\"bytewriter\",{\"1\":{\"217\":1}}],[\"bytewriter接口\",{\"0\":{\"217\":1}}],[\"bytereader是基本的readbyte方法的包装\",{\"1\":{\"215\":1}}],[\"bytereader\",{\"1\":{\"215\":1,\"216\":1}}],[\"bytereader接口\",{\"0\":{\"215\":1}}],[\"byte\",{\"1\":{\"98\":1,\"99\":1,\"100\":1,\"196\":3,\"197\":2,\"198\":1,\"212\":1,\"213\":1,\"215\":1,\"217\":1,\"223\":1,\"224\":1,\"225\":2,\"228\":2,\"234\":1,\"235\":4,\"236\":3,\"237\":2,\"239\":2,\"240\":2}}],[\"bigger\",{\"1\":{\"235\":1,\"236\":1}}],[\"bigint\",{\"1\":{\"111\":1}}],[\"bind并没有支持\",{\"1\":{\"68\":1}}],[\"binding\",{\"1\":{\"66\":1}}],[\"bindquery则报错的同时\",{\"1\":{\"66\":1}}],[\"bindquery\",{\"1\":{\"66\":1}}],[\"b\",{\"1\":{\"99\":3,\"234\":2,\"250\":2,\"251\":4}}],[\"bold\",{\"1\":{\"345\":1}}],[\"box\",{\"1\":{\"345\":1}}],[\"bottom\",{\"1\":{\"345\":8}}],[\"border\",{\"1\":{\"345\":13}}],[\"bool\",{\"1\":{\"95\":3,\"154\":10,\"181\":1,\"183\":1}}],[\"body\",{\"1\":{\"90\":1}}],[\"body>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"batch\",{\"1\":{\"131\":1}}],[\"background\",{\"0\":{\"184\":1},\"1\":{\"90\":1,\"154\":1,\"181\":2,\"184\":4,\"186\":1,\"188\":1,\"189\":1,\"190\":1,\"345\":6}}],[\"baidu\",{\"1\":{\"82\":1,\"89\":1}}],[\"badget\",{\"1\":{\"44\":1}}],[\"before\",{\"1\":{\"189\":1}}],[\"beforedelete\",{\"1\":{\"163\":1}}],[\"beforeupdate\",{\"1\":{\"162\":2}}],[\"beforecreate\",{\"1\":{\"161\":2}}],[\"beforesave\",{\"1\":{\"161\":1,\"162\":1}}],[\"begin\",{\"1\":{\"158\":2,\"159\":1}}],[\"beijing\",{\"1\":{\"71\":2}}],[\"be\",{\"1\":{\"32\":1,\"227\":1,\"229\":1,\"230\":1,\"232\":1,\"233\":2,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":2}}],[\"gc\",{\"1\":{\"248\":7}}],[\"gcdead\",{\"1\":{\"248\":1}}],[\"gctrace\",{\"1\":{\"248\":2}}],[\"general\",{\"1\":{\"234\":1}}],[\"gender\",{\"1\":{\"169\":1}}],[\"getall\",{\"1\":{\"111\":2}}],[\"getuser\",{\"1\":{\"111\":2}}],[\"getbyid\",{\"1\":{\"111\":4}}],[\"get读取session值\",{\"1\":{\"98\":1}}],[\"getpostformmap\",{\"1\":{\"70\":1}}],[\"getquerymap\",{\"1\":{\"68\":1}}],[\"getqueryarray\",{\"1\":{\"67\":1}}],[\"getquery\",{\"1\":{\"66\":2}}],[\"get请求参数\",{\"0\":{\"65\":1}}],[\"get方法请求一个指定资源的表示形式\",{\"1\":{\"56\":1}}],[\"get\",{\"1\":{\"53\":2,\"56\":1,\"57\":1,\"58\":4,\"61\":2,\"66\":5,\"67\":3,\"68\":2,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"87\":1,\"89\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":4,\"99\":5,\"100\":3,\"104\":1,\"105\":1,\"111\":6,\"168\":2}}],[\"gg\",{\"1\":{\"61\":3}}],[\"group函数必须搭配select函数一起使用\",{\"1\":{\"149\":1}}],[\"group\",{\"1\":{\"61\":2,\"149\":2,\"150\":1}}],[\"gzip\",{\"1\":{\"52\":1}}],[\"giraffe\",{\"1\":{\"156\":1}}],[\"gin支持设置全局中间件和针对路由分组设置中间件\",{\"1\":{\"103\":1}}],[\"gin框架给模板添加自定义函数\",{\"1\":{\"89\":1}}],[\"gin框架同样支持模板\",{\"1\":{\"86\":1}}],[\"ginlearn>\",{\"1\":{\"53\":1}}],[\"ginlearn>cd\",{\"1\":{\"53\":1}}],[\"ginlearn>mkdir\",{\"1\":{\"53\":1}}],[\"ginlearn>go\",{\"1\":{\"53\":2}}],[\"ginlearn\",{\"1\":{\"53\":5}}],[\"gin\",{\"0\":{\"108\":1},\"1\":{\"52\":4,\"53\":7,\"58\":9,\"59\":3,\"61\":4,\"66\":8,\"67\":3,\"68\":2,\"70\":3,\"71\":1,\"72\":1,\"73\":1,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":2,\"87\":5,\"89\":2,\"95\":1,\"96\":1,\"97\":1,\"98\":8,\"99\":7,\"100\":8,\"104\":4,\"105\":6,\"111\":12},\"2\":{\"55\":1,\"63\":1,\"75\":1,\"85\":1,\"92\":1,\"102\":1,\"107\":1,\"109\":1}}],[\"gin介绍\",{\"0\":{\"52\":1}}],[\"github\",{\"1\":{\"53\":2,\"87\":1,\"98\":4,\"99\":3,\"100\":4,\"105\":1,\"110\":1,\"111\":3,\"121\":2}}],[\"git\",{\"1\":{\"44\":1}}],[\"go语言中可以通过runtime\",{\"1\":{\"251\":1}}],[\"go运行时调度器使用runtime\",{\"1\":{\"251\":1}}],[\"gomaxprocs设置为1os线程数时执行时间要比4os线程数用时更长\",{\"1\":{\"251\":1}}],[\"gomaxprocs参数来确定需要使用多少个os线程来同时执行go代码\",{\"1\":{\"251\":1}}],[\"gomaxprocs\",{\"0\":{\"251\":1},\"1\":{\"251\":3}}],[\"goexit\",{\"0\":{\"250\":1},\"1\":{\"250\":1}}],[\"gosched\",{\"0\":{\"249\":1},\"1\":{\"249\":2}}],[\"godebug=gctrace=1\",{\"1\":{\"248\":1}}],[\"godebug的值是逗号分隔的name=val对\",{\"1\":{\"248\":1}}],[\"goal\",{\"1\":{\"248\":1}}],[\"goarch\",{\"1\":{\"248\":1}}],[\"gopath和goroot构成完整的go环境变量集合\",{\"1\":{\"248\":1}}],[\"goos和goroot在编译时被记录并可用本包的常量和函数获取\",{\"1\":{\"248\":1}}],[\"goos\",{\"0\":{\"253\":1},\"1\":{\"248\":1,\"253\":1}}],[\"good\",{\"1\":{\"115\":1}}],[\"goods\",{\"1\":{\"61\":3,\"134\":9,\"135\":5,\"136\":4,\"137\":5,\"138\":10,\"139\":2,\"140\":4,\"141\":5,\"143\":5,\"144\":1,\"145\":4,\"146\":3,\"147\":3,\"148\":1,\"149\":1,\"158\":1}}],[\"goroutines\",{\"1\":{\"188\":2}}],[\"goroutine\",{\"1\":{\"183\":1}}],[\"goroutine可以接收到关闭请求\",{\"1\":{\"183\":1}}],[\"gorm的db默认是协程安全的\",{\"1\":{\"154\":1}}],[\"gorm提供了会话模式\",{\"1\":{\"154\":1}}],[\"gorm更新必须带条件进行更新\",{\"1\":{\"138\":1}}],[\"gorm是通过dsn的timeout参数配置\",{\"1\":{\"120\":1}}],[\"gorm库使用dsn作为连接数据库的参数\",{\"1\":{\"120\":1}}],[\"gorm常用标签如下\",{\"1\":{\"116\":1}}],[\"gormtest\",{\"1\":{\"111\":1}}],[\"gorm\",{\"0\":{\"175\":1,\"344\":1},\"1\":{\"110\":2,\"111\":10,\"116\":4,\"117\":4,\"118\":8,\"119\":1,\"120\":5,\"121\":19,\"138\":1,\"139\":2,\"141\":1,\"143\":1,\"154\":2,\"156\":1,\"157\":4,\"158\":1,\"159\":1,\"160\":2,\"161\":4,\"162\":2,\"163\":1,\"164\":1,\"168\":6,\"344\":4},\"2\":{\"113\":1,\"125\":1,\"152\":1,\"166\":1,\"174\":1,\"176\":1}}],[\"gorm地址\",{\"1\":{\"110\":1}}],[\"gonic\",{\"1\":{\"53\":2,\"87\":1,\"98\":1,\"99\":1,\"100\":1,\"105\":1,\"111\":3}}],[\"go\",{\"0\":{\"345\":1},\"1\":{\"53\":13,\"98\":1,\"100\":1,\"110\":1,\"111\":3,\"121\":2,\"188\":3,\"233\":1,\"234\":1,\"248\":3,\"249\":1,\"250\":1,\"251\":4}}],[\"go1\",{\"1\":{\"53\":1,\"251\":1}}],[\"go版本需求\",{\"1\":{\"53\":1}}],[\"go的框架其实是可以理解为库\",{\"1\":{\"51\":1}}],[\"golang\",{\"0\":{\"0\":1},\"1\":{\"179\":1,\"183\":1,\"186\":1,\"197\":2},\"2\":{\"1\":1,\"49\":1,\"50\":1,\"54\":1,\"55\":1,\"62\":1,\"63\":1,\"74\":1,\"75\":1,\"84\":1,\"85\":1,\"91\":1,\"92\":1,\"101\":1,\"102\":1,\"106\":1,\"107\":1,\"112\":1,\"113\":1,\"124\":1,\"125\":1,\"151\":1,\"152\":1,\"165\":1,\"166\":1,\"173\":1,\"174\":1,\"191\":1,\"192\":1,\"245\":1,\"246\":1,\"254\":1,\"255\":1}}],[\"9910\",{\"1\":{\"121\":1}}],[\"9090\",{\"1\":{\"87\":1}}],[\"9\",{\"0\":{\"235\":1},\"1\":{\"44\":1,\"239\":1,\"248\":2,\"338\":3}}],[\"图标库\",{\"0\":{\"42\":1}}],[\"图标\",{\"0\":{\"41\":1}}],[\"图片引入\",{\"1\":{\"34\":1}}],[\"图片增强\",{\"0\":{\"27\":1}}],[\"资源链接\",{\"0\":{\"40\":1}}],[\"杂记\",{\"0\":{\"38\":1}}],[\"+v\",{\"1\":{\"73\":1}}],[\"+\",{\"1\":{\"35\":1,\"111\":1,\"139\":2,\"248\":4}}],[\"日\",{\"1\":{\"33\":1}}],[\"月\",{\"1\":{\"33\":1}}],[\"年\",{\"1\":{\"33\":1}}],[\"please\",{\"1\":{\"345\":1}}],[\"pluck\",{\"1\":{\"143\":2,\"145\":1}}],[\"plugin\",{\"1\":{\"18\":1}}],[\"p>\",{\"1\":{\"345\":3}}],[\"p><br>\",{\"1\":{\"345\":1}}],[\"pkill\",{\"1\":{\"338\":1}}],[\"p则\",{\"1\":{\"212\":1}}],[\"p的全部作为暂存空间\",{\"1\":{\"196\":1}}],[\"pipe创建一个同步的内存管道\",{\"1\":{\"233\":1}}],[\"pipewriter是一个管道的写入端\",{\"1\":{\"224\":1}}],[\"pipewriter\",{\"0\":{\"224\":1},\"1\":{\"224\":4,\"233\":1}}],[\"pipereader是一个管道的读取端\",{\"1\":{\"223\":1}}],[\"pipereader\",{\"0\":{\"223\":1},\"1\":{\"223\":4,\"233\":1}}],[\"pipe\",{\"0\":{\"233\":1},\"1\":{\"194\":1,\"233\":2}}],[\"pipelines\",{\"1\":{\"183\":1}}],[\"ping\",{\"1\":{\"53\":1}}],[\"p\",{\"1\":{\"170\":1,\"196\":2,\"197\":3,\"212\":5,\"213\":3,\"225\":2,\"237\":2,\"239\":1,\"240\":1,\"248\":1}}],[\"pet\",{\"1\":{\"170\":1}}],[\"png\",{\"1\":{\"80\":3}}],[\"png制作\",{\"1\":{\"44\":1}}],[\"preload预加载\",{\"1\":{\"172\":1}}],[\"preload\",{\"1\":{\"172\":1}}],[\"preloading\",{\"1\":{\"164\":1}}],[\"preparedsql\",{\"1\":{\"154\":1}}],[\"preparedstmtdb\",{\"1\":{\"154\":1}}],[\"prepared\",{\"1\":{\"154\":2}}],[\"preparestmt\",{\"1\":{\"154\":2}}],[\"process\",{\"1\":{\"338\":2}}],[\"programming\",{\"1\":{\"234\":1}}],[\"propagatecancel\",{\"1\":{\"188\":1,\"189\":1}}],[\"protocol\",{\"1\":{\"120\":1}}],[\"profiles表中的user\",{\"1\":{\"171\":1}}],[\"profiles表都有数据\",{\"1\":{\"171\":1}}],[\"profiles`\",{\"1\":{\"171\":1}}],[\"profiles\",{\"1\":{\"117\":1,\"171\":1}}],[\"project\",{\"1\":{\"53\":8}}],[\"project>cd\",{\"1\":{\"53\":1}}],[\"project>mkdir\",{\"1\":{\"53\":1}}],[\"price\",{\"1\":{\"115\":2,\"134\":2,\"135\":1}}],[\"primarykey\",{\"1\":{\"116\":1,\"118\":2}}],[\"primary\",{\"1\":{\"111\":1,\"115\":1,\"116\":1,\"134\":1,\"171\":1}}],[\"printf\",{\"1\":{\"196\":1,\"198\":2,\"234\":1,\"235\":1,\"236\":1,\"239\":1,\"240\":1}}],[\"print\",{\"1\":{\"105\":2,\"232\":2}}],[\"println\",{\"1\":{\"66\":2,\"67\":2,\"70\":1,\"71\":1,\"73\":1,\"98\":1,\"105\":2,\"111\":5,\"145\":1,\"148\":1,\"150\":1,\"172\":6,\"186\":2,\"188\":7,\"189\":2,\"190\":2,\"196\":2,\"235\":2,\"236\":1,\"242\":1,\"249\":2,\"250\":5,\"251\":3,\"252\":1,\"253\":1}}],[\"purpose\",{\"1\":{\"234\":1}}],[\"put方法用请求有效载荷替换目标资源的所有当前表示\",{\"1\":{\"56\":1}}],[\"put\",{\"1\":{\"56\":1,\"57\":1,\"58\":3}}],[\"public\",{\"1\":{\"34\":1}}],[\"position\",{\"1\":{\"345\":2}}],[\"postgresql\",{\"1\":{\"119\":1}}],[\"postformmap\",{\"1\":{\"70\":1}}],[\"postformarray\",{\"1\":{\"70\":1}}],[\"postform\",{\"1\":{\"70\":2}}],[\"post请求一般是表单参数和json参数\",{\"1\":{\"69\":1}}],[\"post请求参数\",{\"0\":{\"69\":1}}],[\"post方法用于将实体提交到指定的资源\",{\"1\":{\"56\":1}}],[\"post\",{\"1\":{\"56\":1,\"57\":1,\"58\":4,\"59\":3,\"61\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"88\":1}}],[\"postman进行测试\",{\"1\":{\"53\":1}}],[\"polymorphicvalue\",{\"1\":{\"171\":1}}],[\"polymorphic\",{\"1\":{\"171\":1}}],[\"port\",{\"1\":{\"100\":1,\"111\":2,\"120\":3}}],[\"pong\",{\"1\":{\"53\":1}}],[\"ps\",{\"1\":{\"53\":2}}],[\"padding\",{\"1\":{\"345\":4}}],[\"paginate\",{\"1\":{\"168\":3,\"344\":1}}],[\"pagedto\",{\"1\":{\"344\":2}}],[\"pagesize\",{\"1\":{\"168\":7,\"344\":9}}],[\"page\",{\"1\":{\"32\":1,\"168\":6,\"344\":10}}],[\"passed\",{\"1\":{\"189\":1}}],[\"pass\",{\"1\":{\"121\":1}}],[\"password\",{\"1\":{\"111\":7,\"120\":4,\"127\":1,\"128\":1,\"132\":1,\"133\":2,\"171\":5}}],[\"parent\",{\"1\":{\"186\":1,\"188\":5,\"189\":8,\"190\":2}}],[\"parsetime=true\",{\"1\":{\"111\":1,\"120\":5,\"121\":3}}],[\"paramn=valuen\",{\"1\":{\"120\":1}}],[\"param1=value1\",{\"1\":{\"120\":1}}],[\"param\",{\"1\":{\"59\":6,\"72\":1}}],[\"patch方法用于对资源应用部分修改\",{\"1\":{\"56\":1}}],[\"patch\",{\"1\":{\"56\":1,\"57\":1}}],[\"path\",{\"1\":{\"56\":2,\"59\":3,\"95\":2}}],[\"package\",{\"1\":{\"53\":1,\"87\":1,\"98\":1,\"99\":1,\"100\":1,\"105\":1,\"111\":4,\"134\":2,\"186\":1,\"188\":1,\"189\":1,\"190\":1,\"196\":1,\"197\":1,\"198\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"236\":1,\"238\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1}}],[\"panic\",{\"1\":{\"52\":2,\"104\":1,\"111\":1,\"188\":1,\"189\":1}}],[\"h2>\",{\"1\":{\"345\":1}}],[\"h2o\",{\"1\":{\"21\":1}}],[\"has\",{\"1\":{\"189\":1}}],[\"handelrequest\",{\"1\":{\"188\":4}}],[\"handlerfunc\",{\"1\":{\"60\":1,\"105\":1}}],[\"having\",{\"1\":{\"149\":2,\"150\":1}}],[\"href=\",{\"1\":{\"89\":1,\"90\":1}}],[\"hook\",{\"0\":{\"160\":1},\"1\":{\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1}}],[\"host\",{\"1\":{\"100\":1,\"111\":2,\"120\":3}}],[\"home\",{\"1\":{\"68\":1,\"71\":1}}],[\"hope\",{\"1\":{\"33\":1}}],[\"height\",{\"1\":{\"345\":7}}],[\"here\",{\"1\":{\"228\":2}}],[\"hello\",{\"1\":{\"58\":4,\"59\":1,\"87\":1,\"98\":5,\"99\":7,\"136\":1,\"137\":1,\"138\":2,\"196\":1,\"197\":4,\"198\":1,\"244\":1,\"249\":1}}],[\"helloworld>\",{\"1\":{\"53\":1}}],[\"helloworld>cd\",{\"1\":{\"53\":1}}],[\"helloworld>go\",{\"1\":{\"53\":1}}],[\"helloworld\",{\"1\":{\"53\":6}}],[\"head>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"headertest\",{\"1\":{\"81\":1}}],[\"header\",{\"1\":{\"81\":1}}],[\"head方法请求一个与get请求的响应相同的响应\",{\"1\":{\"56\":1}}],[\"head\",{\"1\":{\"56\":1}}],[\"h\",{\"1\":{\"53\":1,\"58\":2,\"66\":3,\"70\":1,\"78\":1,\"83\":1,\"87\":1,\"89\":1,\"98\":1,\"99\":1,\"100\":1}}],[\"html请求\",{\"1\":{\"87\":1,\"89\":1}}],[\"html>\",{\"1\":{\"87\":2,\"89\":2,\"90\":2,\"345\":2}}],[\"html\",{\"1\":{\"52\":1,\"87\":1,\"89\":3,\"116\":1}}],[\"https\",{\"1\":{\"110\":1,\"116\":1,\"121\":2,\"183\":1}}],[\"https等\",{\"1\":{\"56\":1}}],[\"httponly\",{\"1\":{\"95\":2}}],[\"http是无状态协议\",{\"1\":{\"94\":1}}],[\"http\",{\"1\":{\"52\":3,\"56\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":2,\"87\":2,\"89\":2,\"168\":1,\"345\":2}}],[\"h1\",{\"1\":{\"32\":2}}],[\"ff8c00\",{\"1\":{\"345\":1}}],[\"fff\",{\"1\":{\"345\":2}}],[\"fprint\",{\"1\":{\"233\":1}}],[\"f\",{\"1\":{\"186\":3,\"196\":3,\"197\":3,\"198\":4}}],[\"fullsaveassociations\",{\"1\":{\"154\":1}}],[\"funcmap\",{\"1\":{\"89\":1}}],[\"func\",{\"1\":{\"53\":2,\"58\":7,\"59\":3,\"60\":1,\"61\":4,\"66\":5,\"67\":3,\"68\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"87\":2,\"89\":2,\"95\":2,\"96\":1,\"97\":1,\"98\":2,\"99\":2,\"100\":2,\"104\":1,\"105\":4,\"111\":13,\"117\":4,\"121\":1,\"134\":3,\"154\":1,\"156\":1,\"157\":3,\"160\":1,\"161\":3,\"162\":2,\"163\":1,\"164\":1,\"168\":3,\"171\":1,\"181\":5,\"182\":1,\"184\":1,\"185\":1,\"186\":3,\"188\":6,\"189\":5,\"190\":3,\"196\":1,\"197\":1,\"198\":1,\"222\":1,\"223\":3,\"224\":3,\"225\":6,\"227\":2,\"228\":2,\"229\":2,\"230\":2,\"231\":2,\"232\":2,\"233\":3,\"234\":2,\"235\":2,\"236\":2,\"237\":5,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"244\":2,\"248\":2,\"249\":2,\"250\":3,\"251\":3,\"252\":1,\"253\":1,\"344\":3}}],[\"from子查询\",{\"1\":{\"170\":1}}],[\"from\",{\"1\":{\"131\":1,\"141\":1,\"149\":1,\"150\":1,\"169\":1,\"170\":4,\"188\":1,\"189\":1,\"243\":1}}],[\"frontmatter\",{\"1\":{\"4\":1,\"10\":1,\"15\":3,\"32\":1,\"33\":1}}],[\"float64\",{\"1\":{\"115\":1,\"134\":1}}],[\"face=\",{\"1\":{\"345\":1}}],[\"family\",{\"1\":{\"345\":1}}],[\"fatal函数完成\",{\"1\":{\"227\":1}}],[\"fatal\",{\"1\":{\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"243\":1,\"244\":1}}],[\"favcontextkey\",{\"1\":{\"186\":4}}],[\"fail\",{\"1\":{\"111\":5}}],[\"false\",{\"1\":{\"95\":1,\"97\":1,\"121\":1,\"163\":1,\"189\":1}}],[\"font>\",{\"1\":{\"345\":4}}],[\"font\",{\"1\":{\"345\":4}}],[\"fontawesome\",{\"1\":{\"42\":1}}],[\"found\",{\"1\":{\"96\":1,\"186\":2,\"348\":1}}],[\"foreignkey\",{\"1\":{\"171\":2}}],[\"for\",{\"1\":{\"73\":2,\"130\":1,\"154\":1,\"183\":1,\"188\":4,\"196\":1,\"248\":1,\"249\":2,\"251\":2}}],[\"form\",{\"1\":{\"73\":3}}],[\"fmt\",{\"1\":{\"67\":2,\"70\":1,\"71\":1,\"98\":2,\"111\":2,\"145\":1,\"148\":1,\"150\":1,\"172\":6,\"186\":3,\"188\":8,\"189\":3,\"190\":3,\"196\":4,\"198\":3,\"232\":3,\"233\":2,\"234\":2,\"235\":4,\"236\":3,\"239\":2,\"240\":2,\"242\":2,\"249\":3,\"250\":6,\"251\":4,\"252\":2,\"253\":2}}],[\"fields\",{\"1\":{\"225\":1}}],[\"filtered\",{\"1\":{\"225\":1}}],[\"fileattachment\",{\"1\":{\"80\":1}}],[\"filearray\",{\"1\":{\"73\":2}}],[\"filename\",{\"1\":{\"73\":1}}],[\"file\",{\"1\":{\"73\":1,\"80\":1}}],[\"files\",{\"1\":{\"73\":2}}],[\"find\",{\"1\":{\"56\":1,\"59\":4,\"61\":4,\"111\":1,\"143\":3,\"145\":1,\"146\":1,\"147\":1,\"154\":2,\"168\":2,\"169\":1,\"170\":3,\"172\":3}}],[\"first\",{\"1\":{\"32\":1,\"111\":1,\"143\":3,\"154\":3,\"228\":1,\"231\":2}}],[\"tbody>\",{\"1\":{\"345\":1}}],[\"td>\",{\"1\":{\"345\":1}}],[\"top\",{\"1\":{\"345\":5}}],[\"to\",{\"1\":{\"188\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"232\":1,\"233\":2,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":2,\"345\":1}}],[\"todo\",{\"0\":{\"185\":1},\"1\":{\"181\":2,\"185\":4}}],[\"total\",{\"1\":{\"145\":5,\"148\":3,\"149\":5,\"150\":2}}],[\"toc\",{\"1\":{\"10\":1}}],[\"take\",{\"1\":{\"135\":1,\"136\":1,\"137\":1,\"138\":2,\"140\":1,\"141\":1,\"143\":3,\"144\":1,\"172\":1}}],[\"table>\",{\"1\":{\"345\":1}}],[\"tabler\",{\"1\":{\"117\":1}}],[\"tablename\",{\"1\":{\"111\":1,\"117\":4,\"134\":1,\"171\":1}}],[\"table\",{\"1\":{\"111\":1,\"115\":1,\"117\":3,\"134\":1,\"170\":3,\"171\":1}}],[\"txt初始内容为\",{\"1\":{\"197\":1}}],[\"txt内容更新为\",{\"1\":{\"197\":1}}],[\"txt内容为\",{\"1\":{\"196\":1,\"198\":1}}],[\"txt\",{\"1\":{\"196\":1,\"197\":1,\"198\":1}}],[\"tx2\",{\"1\":{\"157\":4}}],[\"tx\",{\"1\":{\"117\":4,\"154\":13,\"156\":4,\"157\":4,\"158\":11,\"159\":6,\"161\":4,\"162\":3,\"163\":2,\"164\":1}}],[\"t\",{\"1\":{\"105\":2,\"134\":2,\"161\":1}}],[\"tips\",{\"1\":{\"179\":1,\"193\":1,\"247\":1}}],[\"tinyint\",{\"1\":{\"171\":1}}],[\"timer\",{\"1\":{\"189\":1}}],[\"timerctx\",{\"1\":{\"189\":1}}],[\"timeout\",{\"1\":{\"190\":2}}],[\"timeoutctx\",{\"1\":{\"154\":4}}],[\"timeout=10s\",{\"1\":{\"120\":3}}],[\"time`\",{\"1\":{\"134\":1}}],[\"time类型\",{\"1\":{\"120\":1}}],[\"time\",{\"1\":{\"105\":3,\"111\":2,\"115\":1,\"118\":13,\"127\":1,\"134\":5,\"135\":1,\"147\":1,\"150\":1,\"154\":3,\"171\":1,\"181\":2,\"183\":2,\"188\":12,\"189\":9,\"190\":7,\"251\":3}}],[\"titles\",{\"1\":{\"143\":2}}],[\"title>\",{\"1\":{\"87\":1,\"89\":1,\"90\":1}}],[\"title\",{\"1\":{\"32\":3,\"87\":2,\"89\":2,\"90\":1,\"134\":2,\"136\":1,\"137\":1,\"138\":5,\"140\":1,\"143\":1,\"145\":1}}],[\"tcp\",{\"1\":{\"100\":1,\"111\":1,\"120\":4,\"121\":3}}],[\"tmpl这种\",{\"1\":{\"88\":1}}],[\"tmpl和templates\",{\"1\":{\"88\":1}}],[\"tmpl\",{\"1\":{\"87\":2,\"89\":1}}],[\"text\",{\"1\":{\"345\":2}}],[\"teereader返回一个reader\",{\"1\":{\"243\":1}}],[\"teereader\",{\"0\":{\"243\":1},\"1\":{\"243\":2}}],[\"tee\",{\"1\":{\"232\":1}}],[\"template\",{\"1\":{\"89\":3}}],[\"templates\",{\"1\":{\"87\":1,\"88\":2,\"89\":1}}],[\"templates<\",{\"1\":{\"87\":1,\"89\":1,\"90\":1}}],[\"testsavegoods\",{\"1\":{\"134\":1}}],[\"testing\",{\"1\":{\"134\":2}}],[\"test\",{\"1\":{\"53\":2,\"56\":1,\"81\":1,\"104\":2,\"105\":1,\"111\":1,\"188\":1}}],[\"tr>\",{\"1\":{\"345\":2}}],[\"transaction\",{\"1\":{\"156\":1,\"157\":3}}],[\"trace方法沿着到目标资源的路径执行一个消息环回测试\",{\"1\":{\"56\":1}}],[\"trace\",{\"1\":{\"56\":1}}],[\"true\",{\"1\":{\"78\":1,\"95\":1,\"97\":1,\"121\":3,\"138\":1,\"141\":1,\"154\":3,\"162\":1,\"188\":1,\"189\":3}}],[\"th>\",{\"1\":{\"345\":1}}],[\"thymeleaf\",{\"1\":{\"345\":1}}],[\"th=\",{\"1\":{\"345\":1}}],[\"third\",{\"1\":{\"231\":2}}],[\"this\",{\"1\":{\"77\":1,\"345\":1}}],[\"than\",{\"1\":{\"189\":1,\"235\":2,\"236\":1}}],[\"the\",{\"1\":{\"32\":1,\"189\":2}}],[\"typeid\",{\"1\":{\"115\":1}}],[\"type\",{\"1\":{\"60\":1,\"66\":2,\"79\":1,\"111\":2,\"115\":2,\"117\":1,\"118\":9,\"134\":3,\"149\":6,\"150\":2,\"154\":1,\"169\":2,\"171\":3,\"181\":1,\"182\":1,\"183\":1,\"186\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"344\":1}}],[\"x锁\",{\"1\":{\"311\":1}}],[\"xmlns\",{\"1\":{\"345\":1}}],[\"xmluser\",{\"1\":{\"79\":2}}],[\"xml方式\",{\"0\":{\"79\":1}}],[\"xml\",{\"1\":{\"52\":1,\"79\":1}}],[\"x\",{\"1\":{\"26\":1,\"345\":1}}],[\"任务列表\",{\"0\":{\"26\":1}}],[\"标准库\",{\"0\":{\"177\":1},\"2\":{\"178\":1,\"192\":1,\"246\":1,\"255\":1}}],[\"标签\",{\"1\":{\"116\":1,\"118\":1,\"171\":1}}],[\"标签内容\",{\"1\":{\"116\":1}}],[\"标签定义部分\",{\"1\":{\"116\":1}}],[\"标签定义\",{\"1\":{\"116\":1}}],[\"标签说明含义是\",{\"1\":{\"111\":1}}],[\"标签为\",{\"1\":{\"33\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"32\":1}}],[\"标题和页面信息\",{\"1\":{\"10\":1}}],[\"标记\",{\"0\":{\"25\":1}}],[\"脚注\",{\"0\":{\"24\":1}}],[\"的样式\",{\"1\":{\"345\":1}}],[\"的os线程数\",{\"1\":{\"251\":2}}],[\"的返回值\",{\"1\":{\"209\":1,\"210\":1}}],[\"的含义\",{\"1\":{\"198\":1}}],[\"的实现会阻止返回零字节的计数和一个\",{\"1\":{\"196\":1}}],[\"的字节\",{\"1\":{\"196\":1}}],[\"的父节点\",{\"1\":{\"181\":1}}],[\"的根节点\",{\"1\":{\"181\":1}}],[\"的意思\",{\"1\":{\"179\":1}}],[\"的更新操作\",{\"1\":{\"154\":1}}],[\"的查询操作\",{\"1\":{\"154\":1}}],[\"的预编译模式\",{\"1\":{\"154\":1}}],[\"的定义\",{\"1\":{\"118\":1}}],[\"的表名重写为\",{\"1\":{\"117\":1}}],[\"的规范建议我们使用特定的http方法来对服务器上的资源进行操作\",{\"1\":{\"57\":1}}],[\"的\",{\"1\":{\"23\":1,\"32\":1,\"33\":1}}],[\"ie=edge\",{\"1\":{\"345\":1}}],[\"ix锁\",{\"1\":{\"326\":1}}],[\"ix\",{\"0\":{\"326\":1}}],[\"i++\",{\"1\":{\"248\":1,\"249\":2,\"251\":2}}],[\"io包中提供i\",{\"1\":{\"193\":1}}],[\"io\",{\"1\":{\"111\":4,\"116\":1,\"121\":4,\"194\":1,\"196\":2,\"227\":3,\"228\":3,\"229\":3,\"230\":4,\"231\":3,\"232\":4,\"233\":5,\"234\":2,\"235\":6,\"236\":5,\"238\":4,\"239\":3,\"240\":3,\"241\":5,\"242\":3,\"243\":5,\"244\":2}}],[\"is锁\",{\"1\":{\"326\":1}}],[\"isvalid\",{\"1\":{\"161\":2}}],[\"is\",{\"0\":{\"326\":1},\"1\":{\"77\":1,\"189\":1,\"228\":1,\"234\":1}}],[\"image\",{\"1\":{\"70\":1}}],[\"import\",{\"1\":{\"53\":1,\"87\":1,\"98\":1,\"99\":1,\"100\":1,\"105\":1,\"111\":4,\"121\":2,\"134\":2,\"186\":1,\"188\":1,\"189\":1,\"190\":1,\"196\":1,\"197\":1,\"198\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1}}],[\"if\",{\"1\":{\"66\":2,\"73\":1,\"96\":1,\"98\":1,\"99\":2,\"100\":1,\"111\":6,\"117\":1,\"156\":2,\"158\":2,\"161\":3,\"162\":2,\"163\":1,\"164\":1,\"168\":1,\"186\":1,\"188\":1,\"189\":4,\"196\":2,\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"236\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"243\":1,\"244\":1,\"344\":1}}],[\"ip端口或者域名\",{\"1\":{\"56\":1}}],[\"i\",{\"0\":{\"193\":1},\"1\":{\"35\":1,\"248\":3,\"249\":4,\"251\":6,\"338\":1}}],[\"instead\",{\"1\":{\"287\":1}}],[\"insert\",{\"1\":{\"111\":1,\"131\":1,\"133\":1}}],[\"innodb\",{\"1\":{\"171\":1}}],[\"invalid\",{\"1\":{\"161\":2,\"163\":1}}],[\"info\",{\"1\":{\"111\":1}}],[\"increment\",{\"1\":{\"111\":1,\"115\":1,\"134\":1,\"171\":1}}],[\"incr\",{\"1\":{\"100\":1}}],[\"into\",{\"1\":{\"133\":1}}],[\"int32\",{\"1\":{\"118\":4}}],[\"interface\",{\"1\":{\"117\":1,\"131\":3,\"132\":2,\"139\":1,\"144\":2,\"154\":1,\"183\":1,\"196\":1,\"198\":1,\"199\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1}}],[\"int\",{\"1\":{\"95\":2,\"100\":2,\"111\":1,\"115\":5,\"118\":4,\"134\":6,\"144\":1,\"145\":1,\"149\":2,\"154\":1,\"169\":1,\"171\":5,\"181\":1,\"196\":1,\"197\":1,\"198\":1,\"212\":1,\"213\":1,\"218\":1,\"220\":1,\"223\":1,\"224\":1,\"225\":3,\"235\":2,\"236\":1,\"237\":3,\"239\":1,\"240\":1,\"241\":1,\"244\":1,\"248\":2,\"344\":2}}],[\"int64\",{\"1\":{\"66\":2,\"79\":1,\"111\":7,\"115\":1,\"118\":5,\"148\":1,\"171\":6,\"198\":2,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"222\":2,\"225\":6,\"227\":1,\"228\":1,\"229\":2,\"230\":1,\"237\":6,\"238\":2,\"240\":1,\"241\":2,\"242\":1}}],[\"index\",{\"1\":{\"87\":3,\"88\":2,\"89\":2,\"90\":2,\"118\":2}}],[\"initialized\",{\"1\":{\"154\":2}}],[\"initial\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":5}}],[\"init\",{\"1\":{\"53\":2,\"111\":1}}],[\"in\",{\"1\":{\"32\":1,\"144\":1,\"234\":1}}],[\"id来强制关闭应用\",{\"1\":{\"338\":1}}],[\"id就会失败\",{\"1\":{\"171\":1}}],[\"id改为other\",{\"1\":{\"171\":1}}],[\"id`\",{\"1\":{\"115\":1,\"171\":1}}],[\"id=\",{\"1\":{\"111\":3,\"140\":1,\"172\":1}}],[\"id=11\",{\"1\":{\"56\":1,\"65\":1,\"66\":1}}],[\"id是数值类型\",{\"1\":{\"66\":1}}],[\"idok\",{\"1\":{\"66\":1}}],[\"id\",{\"1\":{\"23\":1,\"59\":3,\"66\":16,\"70\":4,\"71\":1,\"72\":2,\"79\":3,\"111\":9,\"115\":3,\"116\":1,\"118\":7,\"127\":1,\"130\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":2,\"140\":1,\"141\":1,\"144\":1,\"145\":1,\"146\":1,\"161\":1,\"162\":2,\"163\":2,\"169\":2,\"171\":4}}],[\"it\",{\"1\":{\"16\":2,\"105\":1,\"188\":1}}],[\"我们称之为数据模型\",{\"1\":{\"114\":1}}],[\"我们定义了user结构体用来和数据表users做映射\",{\"1\":{\"114\":1}}],[\"我们可以通过将任务分配到不同的cpu逻辑核心上\",{\"1\":{\"251\":1}}],[\"我们可以替换成其他存储引擎\",{\"1\":{\"98\":1}}],[\"我们可以依赖gin\",{\"1\":{\"98\":1}}],[\"我们往往要进行模块的划分\",{\"1\":{\"61\":1}}],[\"我们主要通过path和query两部分的书写来进行资源的定位\",{\"1\":{\"59\":1}}],[\"我们不需要关心scheme和authority这两部分\",{\"1\":{\"59\":1}}],[\"我在右对齐\",{\"1\":{\"22\":1}}],[\"我是居中的\",{\"1\":{\"22\":1}}],[\"上下文键通常有具体的类型struct\",{\"1\":{\"186\":1}}],[\"上下文值只用于传递进程和api的请求范围内的数据\",{\"1\":{\"186\":1}}],[\"上下文值仅用于传输进程和api的请求范围数据\",{\"1\":{\"179\":1}}],[\"上下文的方法可以被多个\",{\"1\":{\"183\":1}}],[\"上下文应该是第一个参数\",{\"1\":{\"179\":1}}],[\"上下文\",{\"1\":{\"179\":1}}],[\"上下角标\",{\"0\":{\"21\":1}}],[\"上述获取的都是string类型\",{\"1\":{\"66\":1}}],[\"上启动服务\",{\"1\":{\"53\":1}}],[\"上一篇\",{\"1\":{\"4\":1}}],[\"危险容器\",{\"1\":{\"19\":1}}],[\"警告容器\",{\"1\":{\"19\":1}}],[\"=0\",{\"1\":{\"249\":1}}],[\"=>\",{\"1\":{\"154\":1}}],[\"==\",{\"1\":{\"100\":1,\"158\":1,\"161\":1,\"164\":1,\"168\":1,\"188\":1,\"189\":2,\"196\":5,\"227\":2,\"229\":2,\"235\":1,\"236\":2,\"344\":1}}],[\"=shanghai\",{\"1\":{\"68\":1}}],[\"=beijing\",{\"1\":{\"68\":1}}],[\"=\",{\"1\":{\"19\":1,\"53\":1,\"59\":2,\"61\":2,\"66\":11,\"67\":3,\"68\":2,\"70\":7,\"71\":1,\"73\":5,\"79\":1,\"87\":1,\"96\":2,\"98\":4,\"99\":7,\"100\":6,\"104\":1,\"105\":5,\"111\":24,\"120\":5,\"121\":4,\"123\":1,\"127\":1,\"130\":3,\"134\":1,\"135\":4,\"136\":2,\"137\":2,\"138\":4,\"140\":2,\"141\":2,\"148\":1,\"150\":1,\"154\":7,\"156\":4,\"158\":7,\"159\":1,\"161\":2,\"162\":2,\"163\":1,\"164\":1,\"168\":7,\"170\":4,\"171\":3,\"172\":3,\"184\":1,\"185\":1,\"186\":5,\"188\":2,\"189\":7,\"190\":3,\"194\":6,\"196\":4,\"197\":1,\"198\":3,\"212\":1,\"227\":3,\"228\":7,\"229\":3,\"230\":4,\"231\":6,\"232\":4,\"233\":3,\"234\":3,\"235\":11,\"236\":7,\"238\":4,\"239\":5,\"240\":5,\"241\":6,\"242\":2,\"243\":4,\"244\":2,\"248\":4,\"249\":1,\"251\":3,\"344\":6}}],[\"append\",{\"1\":{\"197\":1}}],[\"apiuser\",{\"1\":{\"169\":2}}],[\"api接口签名处理\",{\"1\":{\"103\":1}}],[\"api规范\",{\"0\":{\"57\":1}}],[\"api\",{\"1\":{\"52\":3,\"57\":1,\"111\":2,\"179\":1}}],[\"align\",{\"1\":{\"345\":2}}],[\"align=\",{\"1\":{\"345\":1}}],[\"also\",{\"1\":{\"228\":1}}],[\"already\",{\"1\":{\"189\":2}}],[\"allocfreetrace\",{\"1\":{\"248\":1}}],[\"allocate\",{\"1\":{\"228\":1}}],[\"allowglobalupdate\",{\"1\":{\"138\":2,\"141\":2,\"154\":1}}],[\"all\",{\"1\":{\"188\":1,\"345\":1}}],[\"avg\",{\"1\":{\"170\":2}}],[\"amount\",{\"1\":{\"170\":4}}],[\"archive\",{\"1\":{\"253\":1}}],[\"articles\",{\"1\":{\"168\":1}}],[\"args\",{\"1\":{\"144\":2}}],[\"atoi\",{\"1\":{\"168\":2}}],[\"attrs\",{\"0\":{\"23\":1}}],[\"after\",{\"1\":{\"189\":1,\"190\":1}}],[\"afterfunc\",{\"1\":{\"189\":1}}],[\"afterfind\",{\"1\":{\"164\":2}}],[\"afterdelete\",{\"1\":{\"163\":2}}],[\"afterupdate\",{\"1\":{\"162\":2}}],[\"aftersave\",{\"1\":{\"161\":1,\"162\":1}}],[\"aftercreate\",{\"1\":{\"161\":3}}],[\"add\",{\"1\":{\"189\":1,\"190\":1,\"250\":1,\"251\":4}}],[\"addressmap\",{\"1\":{\"68\":8,\"70\":8,\"71\":1}}],[\"address=shanghai\",{\"1\":{\"67\":1}}],[\"address=beijing\",{\"1\":{\"67\":1}}],[\"address\",{\"1\":{\"66\":10,\"67\":6,\"70\":4,\"71\":1,\"120\":1,\"162\":1,\"163\":1}}],[\"admin\",{\"1\":{\"117\":2,\"154\":1,\"161\":1}}],[\"authoremail\",{\"1\":{\"118\":1}}],[\"authorname\",{\"1\":{\"118\":1}}],[\"author\",{\"1\":{\"118\":6}}],[\"authorization\",{\"1\":{\"52\":1}}],[\"autoupdatetime\",{\"1\":{\"118\":3}}],[\"autocreatetime\",{\"1\":{\"118\":2}}],[\"auto\",{\"1\":{\"111\":1,\"115\":1,\"134\":1,\"171\":1,\"345\":2}}],[\"an\",{\"1\":{\"228\":1}}],[\"animal\",{\"1\":{\"156\":2}}],[\"and\",{\"1\":{\"105\":1,\"158\":1}}],[\"any\",{\"1\":{\"58\":3,\"181\":2,\"183\":2,\"186\":1}}],[\"aqua\",{\"1\":{\"90\":1}}],[\"a>\",{\"1\":{\"89\":1}}],[\"age\",{\"1\":{\"83\":1,\"131\":3,\"154\":2,\"169\":1,\"170\":2,\"171\":2}}],[\"aok\",{\"1\":{\"66\":3}}],[\"association\",{\"1\":{\"172\":1}}],[\"as\",{\"1\":{\"32\":1,\"145\":1,\"149\":2,\"150\":1,\"170\":4}}],[\"a\",{\"1\":{\"19\":1,\"77\":1,\"99\":3,\"196\":1,\"197\":2,\"198\":1,\"234\":1,\"250\":2,\"251\":4}}],[\"与\",{\"1\":{\"19\":1}}],[\"信息容器\",{\"1\":{\"19\":1}}],[\"verfied\",{\"1\":{\"162\":1}}],[\"v键值对参数含义为\",{\"1\":{\"120\":1}}],[\"viewport\",{\"1\":{\"87\":1,\"89\":1,\"90\":1,\"345\":1}}],[\"valign=\",{\"1\":{\"345\":1}}],[\"val\",{\"1\":{\"186\":1}}],[\"value返回与此上下文关联的value\",{\"1\":{\"183\":1}}],[\"values\",{\"1\":{\"133\":1}}],[\"value\",{\"1\":{\"73\":1,\"95\":2,\"181\":1,\"183\":2,\"186\":2}}],[\"vars\",{\"1\":{\"132\":1}}],[\"varchar\",{\"1\":{\"111\":2,\"115\":1,\"134\":1}}],[\"var\",{\"1\":{\"66\":2,\"67\":1,\"70\":1,\"71\":1,\"100\":1,\"111\":3,\"130\":2,\"143\":1,\"145\":2,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"171\":1,\"172\":4,\"184\":1,\"185\":1,\"194\":6,\"232\":1,\"243\":1,\"250\":1,\"251\":1}}],[\"variable\",{\"1\":{\"19\":1}}],[\"v\",{\"1\":{\"73\":2,\"100\":3,\"134\":1,\"186\":3,\"196\":1,\"198\":2,\"345\":1}}],[\"vscode\",{\"1\":{\"53\":1}}],[\"vue\",{\"1\":{\"35\":2}}],[\"vuepress\",{\"0\":{\"17\":1},\"1\":{\"13\":2,\"15\":2,\"16\":1,\"17\":2,\"18\":1,\"34\":1}}],[\"提高吞吐量和资源的利用率\",{\"1\":{\"306\":1}}],[\"提高数据库的可用性\",{\"1\":{\"324\":1}}],[\"提高数据库的安全性和完整性\",{\"1\":{\"270\":1}}],[\"提高数据的安全性\",{\"1\":{\"277\":1}}],[\"提示\",{\"1\":{\"179\":1}}],[\"提示容器\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"提交的事务\",{\"1\":{\"319\":1}}],[\"提交或回滚事务\",{\"1\":{\"161\":1,\"162\":1,\"163\":1}}],[\"提交事务\",{\"1\":{\"156\":1,\"158\":1}}],[\"提供定义完整性约束条件的机制\",{\"1\":{\"283\":1}}],[\"提供的键必须具有可比性\",{\"1\":{\"186\":1}}],[\"提供了一定程度的逻辑独立性\",{\"1\":{\"277\":1}}],[\"提供了一种方便的方法来收集\",{\"1\":{\"52\":1}}],[\"提供了\",{\"1\":{\"159\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"18\":1}}],[\"mvcc\",{\"1\":{\"332\":1}}],[\"m\",{\"1\":{\"248\":2}}],[\"mb\",{\"1\":{\"248\":2}}],[\"my\",{\"1\":{\"121\":2}}],[\"mysql的dsn的一些例子\",{\"1\":{\"120\":1}}],[\"mysql表的列名\",{\"1\":{\"111\":1}}],[\"mysql\",{\"1\":{\"111\":3,\"119\":1,\"120\":1,\"121\":17}}],[\"mysession\",{\"1\":{\"98\":1,\"100\":1}}],[\"middle\",{\"1\":{\"345\":1}}],[\"middleware\",{\"1\":{\"103\":1}}],[\"minimal\",{\"1\":{\"235\":2,\"236\":1}}],[\"min\",{\"1\":{\"235\":2}}],[\"mind\",{\"1\":{\"234\":1}}],[\"millisecond\",{\"1\":{\"189\":1,\"190\":2}}],[\"milli\",{\"1\":{\"118\":1}}],[\"multiwriter创建一个writers\",{\"1\":{\"232\":1}}],[\"multiwriter\",{\"0\":{\"232\":1},\"1\":{\"232\":2}}],[\"multireader返回一个reader\",{\"1\":{\"231\":1}}],[\"multireader\",{\"0\":{\"231\":1},\"1\":{\"231\":2}}],[\"multiple\",{\"1\":{\"194\":1}}],[\"multipartform\",{\"1\":{\"73\":1}}],[\"mu\",{\"1\":{\"189\":2}}],[\"mustget\",{\"1\":{\"105\":1}}],[\"mess\",{\"2\":{\"347\":1}}],[\"message\",{\"1\":{\"53\":1}}],[\"membership\",{\"1\":{\"164\":2}}],[\"method\",{\"1\":{\"56\":1}}],[\"max\",{\"1\":{\"222\":1}}],[\"maxage设置为\",{\"1\":{\"97\":1}}],[\"maxage>0\",{\"1\":{\"95\":1}}],[\"maxage<0\",{\"1\":{\"95\":1}}],[\"maxage=0\",{\"1\":{\"95\":1}}],[\"maxage\",{\"1\":{\"95\":2}}],[\"make\",{\"1\":{\"196\":1,\"198\":1,\"228\":1,\"235\":3,\"236\":2,\"239\":1,\"240\":1,\"248\":2}}],[\"many2many\",{\"1\":{\"171\":1}}],[\"manager\",{\"1\":{\"154\":1}}],[\"margin\",{\"1\":{\"345\":4}}],[\"mariadb\",{\"1\":{\"121\":2}}],[\"markdown\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1},\"1\":{\"13\":2,\"14\":3,\"15\":1,\"16\":3,\"17\":2,\"18\":1,\"19\":1,\"32\":3,\"33\":1,\"34\":2,\"35\":2},\"2\":{\"30\":1}}],[\"map创建注意\",{\"1\":{\"131\":1}}],[\"map参数\",{\"0\":{\"68\":1},\"1\":{\"68\":1}}],[\"map\",{\"1\":{\"58\":2,\"131\":3,\"132\":1,\"139\":1,\"154\":1,\"248\":1}}],[\"main\",{\"1\":{\"53\":2,\"87\":2,\"98\":2,\"99\":2,\"100\":2,\"105\":2,\"121\":1,\"186\":2,\"188\":2,\"189\":2,\"190\":2,\"196\":2,\"197\":2,\"198\":2,\"227\":2,\"228\":2,\"229\":2,\"230\":2,\"231\":2,\"232\":2,\"233\":2,\"234\":2,\"235\":1,\"236\":2,\"238\":2,\"239\":1,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"244\":2,\"248\":3,\"249\":2,\"250\":2,\"251\":2,\"252\":2,\"253\":2}}],[\"models\",{\"1\":{\"116\":1}}],[\"model\",{\"0\":{\"118\":1},\"1\":{\"111\":1,\"118\":4,\"131\":2,\"132\":1,\"136\":1,\"137\":1,\"138\":3,\"139\":2,\"140\":2,\"143\":1,\"145\":1,\"148\":1,\"149\":1,\"154\":3,\"158\":1,\"161\":1,\"162\":1,\"163\":1,\"169\":1,\"170\":3,\"172\":1}}],[\"module\",{\"1\":{\"53\":1}}],[\"mod\",{\"1\":{\"53\":2}}],[\"more\",{\"1\":{\"31\":1}}],[\"ms\",{\"1\":{\"33\":1,\"77\":1,\"83\":1,\"171\":2,\"248\":2}}],[\"md5\",{\"1\":{\"132\":1}}],[\"md\",{\"1\":{\"18\":1}}],[\"请勿回复<br>\",{\"1\":{\"345\":1}}],[\"请尽快填写验证码完成验证\",{\"1\":{\"345\":1}}],[\"请求限速\",{\"1\":{\"103\":1}}],[\"请求url\",{\"1\":{\"67\":1,\"68\":1,\"72\":1}}],[\"请求参数\",{\"0\":{\"64\":1}}],[\"请求方法\",{\"0\":{\"58\":1}}],[\"请求期间发生的所有错误\",{\"1\":{\"52\":1}}],[\"请求中的\",{\"1\":{\"52\":1}}],[\"请求可以由一系列中间件和最终操作来处理\",{\"1\":{\"52\":1}}],[\"请使用绝对链接\",{\"1\":{\"34\":1}}],[\"请阅读\",{\"1\":{\"17\":1}}],[\"请先阅读\",{\"1\":{\"14\":1}}],[\"对象关系映射\",{\"1\":{\"334\":1}}],[\"对一个数据对象加ix锁代表其后裔节点加x锁\",{\"1\":{\"326\":1}}],[\"对一个数据对象加is锁代表其后裔节点加s锁\",{\"1\":{\"326\":1}}],[\"对任意节点加锁时\",{\"1\":{\"325\":1}}],[\"对任何数据读写之前\",{\"1\":{\"315\":1}}],[\"对每个undo事务执行回滚操作\",{\"1\":{\"318\":1}}],[\"对每个redo事务重新执行日志文件的登记操作\",{\"1\":{\"318\":1}}],[\"对所设计的物理结构进行评价\",{\"1\":{\"302\":1}}],[\"对数据模型优化\",{\"1\":{\"300\":1}}],[\"对数据的索引方式\",{\"1\":{\"263\":1}}],[\"对不同的用户定义视图\",{\"1\":{\"288\":1}}],[\"对关系的描述\",{\"1\":{\"267\":1}}],[\"对读的并行调用和对写的并行调用也是安全的\",{\"1\":{\"233\":1}}],[\"对cancelfunc的后续调用什么也不做\",{\"1\":{\"182\":1}}],[\"对开发者友好的gorm库\",{\"1\":{\"110\":1}}],[\"对于任意已提交的事务\",{\"1\":{\"308\":1}}],[\"对于一个给定的应用环境\",{\"1\":{\"297\":1}}],[\"对于传输的信息进行加密\",{\"1\":{\"288\":1}}],[\"对于关系数据库而言\",{\"1\":{\"259\":1}}],[\"对于正常的结构体字段\",{\"1\":{\"118\":1}}],[\"对于\",{\"1\":{\"34\":1}}],[\"对\",{\"1\":{\"17\":1}}],[\"为什么引入意向锁\",{\"0\":{\"325\":1}}],[\"为什么要先登记日志文件\",{\"0\":{\"322\":1}}],[\"为什么要并发\",{\"0\":{\"306\":1}}],[\"为什么范式会出现\",{\"0\":{\"293\":1}}],[\"为当前数据库连接池的\",{\"1\":{\"154\":1}}],[\"为了避免分配\",{\"1\":{\"186\":1}}],[\"为了避免共用db导致的一些问题\",{\"1\":{\"154\":1}}],[\"为了丰富文档写作\",{\"1\":{\"17\":1}}],[\"为username\",{\"1\":{\"111\":1}}],[\"为\",{\"1\":{\"52\":1,\"154\":1,\"198\":3}}],[\"为每个\",{\"1\":{\"15\":1}}],[\"扩展\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"17\":1}}],[\"中文\",{\"1\":{\"345\":1}}],[\"中写入直到将\",{\"1\":{\"212\":1}}],[\"中写入到基本数据流中\",{\"1\":{\"197\":1}}],[\"中读取数据到对象的数据流中\",{\"1\":{\"209\":1}}],[\"中被写入的字节数n\",{\"1\":{\"197\":1}}],[\"中\",{\"1\":{\"196\":1,\"210\":1,\"212\":1}}],[\"中加载数据\",{\"1\":{\"164\":1}}],[\"中保存\",{\"1\":{\"161\":1}}],[\"中间件使用\",{\"0\":{\"104\":1}}],[\"中间件的常见应用场景如下\",{\"1\":{\"103\":1}}],[\"中间件\",{\"0\":{\"103\":1},\"1\":{\"103\":1}}],[\"中间件可以将它们写入日志文件\",{\"1\":{\"52\":1}}],[\"中设置页面信息\",{\"1\":{\"33\":1}}],[\"中设置页面标题\",{\"1\":{\"32\":1}}],[\"中使用\",{\"1\":{\"19\":1,\"35\":1}}],[\"中的数据写入到对象数据流的\",{\"1\":{\"213\":1}}],[\"中的数据\",{\"1\":{\"163\":1}}],[\"中的字段名添加前缀\",{\"1\":{\"118\":1}}],[\"中的第一个\",{\"1\":{\"32\":1}}],[\"中的\",{\"1\":{\"17\":1}}],[\"中很重要的一个概念\",{\"1\":{\"15\":1}}],[\"中自定义它们\",{\"1\":{\"10\":1}}],[\"是ddl命令\",{\"1\":{\"333\":1}}],[\"是dml命令\",{\"1\":{\"333\":1}}],[\"是充分条件\",{\"1\":{\"315\":1}}],[\"是一个事务在等待资源的过程中\",{\"1\":{\"312\":1}}],[\"是一个不可分割的执行单元\",{\"1\":{\"307\":1}}],[\"是数据在数据库的内部表示\",{\"1\":{\"263\":1}}],[\"是数据库的一种自动处理机制\",{\"1\":{\"287\":1}}],[\"是数据库中全体数据的逻辑结构和特性的描述\",{\"1\":{\"263\":1}}],[\"是数据库用户的数据视图\",{\"1\":{\"263\":1}}],[\"是数据库管理系统的简称\",{\"1\":{\"259\":1}}],[\"是所有用户的公共视图\",{\"1\":{\"263\":1}}],[\"是用户或应用程序能够看到和访问的局部数据的逻辑结构和特征的描述\",{\"1\":{\"263\":1}}],[\"是用来对现实世界抽象的工具\",{\"1\":{\"259\":1}}],[\"是对系统的动态描述\",{\"1\":{\"262\":1}}],[\"是对数据的静态描述\",{\"1\":{\"262\":1}}],[\"是长期储存在计算机内\",{\"1\":{\"259\":1}}],[\"是写入的字节数\",{\"1\":{\"210\":1}}],[\"是读取的字节数\",{\"1\":{\"209\":1}}],[\"是指针移动的偏移量\",{\"1\":{\"198\":1}}],[\"是在创建\",{\"1\":{\"160\":1}}],[\"是否需要授权\",{\"1\":{\"52\":1}}],[\"是\",{\"1\":{\"15\":1,\"179\":1}}],[\"配置dsn\",{\"1\":{\"119\":1}}],[\"配置mysql连接参数\",{\"1\":{\"111\":1}}],[\"配置\",{\"0\":{\"15\":1},\"1\":{\"154\":1}}],[\"演示\",{\"1\":{\"14\":1}}],[\"和读取时遇到的错误\",{\"1\":{\"212\":1}}],[\"和进程之间传递截止日期\",{\"1\":{\"179\":1}}],[\"和\",{\"1\":{\"14\":1,\"33\":1,\"52\":1,\"196\":1}}],[\"你也可以通过标签\",{\"1\":{\"118\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"35\":1}}],[\"你的服务器将始终可用\",{\"1\":{\"52\":1}}],[\"你需要阅读\",{\"1\":{\"15\":1}}],[\"你应该创建和编写\",{\"1\":{\"13\":1}}],[\"你可以指定每批的数量\",{\"1\":{\"130\":1}}],[\"你可以向\",{\"1\":{\"52\":1}}],[\"你可以将图片和\",{\"1\":{\"34\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"34\":1}}],[\"你可以在\",{\"1\":{\"32\":1,\"33\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"10\":1}}],[\"你可以标记\",{\"1\":{\"25\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"13\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"4\":1}}],[\"主体许可证小于等于客体的密级时才能写相应的客体\",{\"1\":{\"290\":1}}],[\"主体许可证大于等于客体的密级时才能读取相应的客体\",{\"1\":{\"290\":1}}],[\"主体部分\",{\"1\":{\"287\":1}}],[\"主属性\",{\"1\":{\"267\":1}}],[\"主码\",{\"1\":{\"267\":1}}],[\"主在结束\",{\"1\":{\"250\":1}}],[\"主goroutine等待子goroutine结束\",{\"1\":{\"250\":1}}],[\"主键不会被填充\",{\"1\":{\"131\":1}}],[\"主键\",{\"1\":{\"111\":1}}],[\"主要是保证事务的隔离性和数据库的一致性\",{\"1\":{\"306\":1}}],[\"主要作用是保证数据库的安全性\",{\"1\":{\"287\":1}}],[\"主要用于拦截paic错误\",{\"1\":{\"104\":1}}],[\"主要用于打印请求日志\",{\"1\":{\"104\":1}}],[\"主要从\",{\"1\":{\"13\":1}}],[\"主题扩展了更多\",{\"1\":{\"18\":1}}],[\"主题扩展\",{\"0\":{\"18\":1}}],[\"主题也带有以下元素\",{\"1\":{\"10\":1}}],[\"展示\",{\"0\":{\"13\":1}}],[\"夜间模式按钮\",{\"1\":{\"10\":1}}],[\"文件以读取完毕\",{\"1\":{\"196\":1}}],[\"文件格式\",{\"0\":{\"80\":1}}],[\"文件参数\",{\"0\":{\"73\":1}}],[\"文件夹的图片\",{\"1\":{\"34\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"34\":1}}],[\"文件\",{\"1\":{\"13\":1}}],[\"文件生成页面\",{\"1\":{\"13\":1}}],[\"文章标题列表\",{\"1\":{\"10\":1}}],[\"文字\",{\"1\":{\"7\":2}}],[\"文字段落\",{\"1\":{\"7\":24}}],[\"布局包括\",{\"1\":{\"10\":1}}],[\"布局\",{\"0\":{\"10\":1},\"2\":{\"12\":1}}],[\"布局与功能禁用\",{\"0\":{\"4\":1}}],[\"22px\",{\"1\":{\"345\":1}}],[\"211\",{\"1\":{\"345\":2}}],[\"2nf到3nf消除了非主属性对码的传递函数依赖\",{\"1\":{\"294\":1}}],[\"2nf\",{\"1\":{\"294\":1}}],[\"255\",{\"1\":{\"345\":3}}],[\"25px\",{\"1\":{\"345\":3}}],[\"25\",{\"1\":{\"134\":1,\"135\":1,\"172\":1}}],[\"256\",{\"1\":{\"121\":1}}],[\"20px\",{\"1\":{\"345\":2}}],[\"20\",{\"1\":{\"111\":1,\"123\":1,\"131\":1,\"171\":3}}],[\"2022\",{\"1\":{\"135\":1,\"150\":1}}],[\"20221121163103752\",{\"1\":{\"70\":1}}],[\"2020\",{\"1\":{\"33\":1}}],[\"200\",{\"1\":{\"53\":1,\"58\":7,\"59\":2,\"61\":4,\"66\":5,\"67\":3,\"68\":2,\"70\":2,\"71\":1,\"72\":1,\"73\":1,\"83\":1,\"96\":2,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"111\":5,\"137\":1,\"138\":2}}],[\"2\",{\"0\":{\"52\":1,\"58\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":2,\"78\":1,\"88\":1,\"96\":1,\"98\":1,\"99\":1,\"100\":2,\"105\":1,\"116\":1,\"121\":1,\"129\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"144\":1,\"155\":1,\"156\":1,\"157\":2,\"158\":1,\"159\":1,\"162\":1,\"169\":1,\"182\":1,\"187\":1,\"188\":1,\"189\":2,\"190\":1,\"195\":1,\"196\":1,\"197\":2,\"198\":1,\"199\":1,\"202\":1,\"210\":1,\"213\":1,\"216\":1,\"223\":1,\"228\":1,\"239\":1,\"249\":1},\"1\":{\"7\":14,\"26\":1,\"80\":1,\"115\":1,\"130\":1,\"131\":1,\"134\":1,\"136\":1,\"137\":1,\"138\":2,\"140\":2,\"141\":1,\"144\":1,\"158\":1,\"188\":3,\"198\":1,\"227\":1,\"248\":2,\"249\":2}}],[\"1px\",{\"1\":{\"345\":2}}],[\"15px\",{\"1\":{\"345\":1}}],[\"153\",{\"1\":{\"345\":3}}],[\"1nf到2nf消除了非码属性对部分函数的依赖\",{\"1\":{\"294\":1}}],[\"1nf\",{\"1\":{\"294\":1}}],[\"17\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1}}],[\"148\",{\"1\":{\"345\":2}}],[\"14px\",{\"1\":{\"345\":1}}],[\"14\",{\"1\":{\"235\":1}}],[\"13\",{\"0\":{\"244\":1},\"1\":{\"135\":1}}],[\"13及以上\",{\"1\":{\"53\":1}}],[\"18\",{\"1\":{\"131\":2,\"154\":2,\"170\":2}}],[\"12px\",{\"1\":{\"345\":1}}],[\"12\",{\"0\":{\"243\":1},\"1\":{\"196\":1}}],[\"127\",{\"1\":{\"111\":1,\"121\":2}}],[\"123456\",{\"1\":{\"111\":1,\"120\":4,\"127\":1,\"132\":1}}],[\"12345\",{\"1\":{\"105\":2}}],[\"10px\",{\"1\":{\"345\":2}}],[\"100vh\",{\"1\":{\"345\":1}}],[\"100000000\",{\"1\":{\"251\":2}}],[\"10000\",{\"1\":{\"130\":1}}],[\"100\",{\"1\":{\"111\":1,\"123\":1,\"130\":2,\"134\":2,\"135\":1,\"168\":2,\"190\":1,\"344\":2}}],[\"10\",{\"0\":{\"236\":1},\"1\":{\"100\":1,\"111\":1,\"115\":4,\"134\":1,\"147\":2,\"168\":1,\"169\":2,\"171\":1,\"198\":1,\"240\":1,\"241\":1,\"248\":2,\"344\":1}}],[\"1代表删除\",{\"1\":{\"95\":1}}],[\"19\",{\"1\":{\"83\":1}}],[\"19th\",{\"1\":{\"21\":1}}],[\"111\",{\"1\":{\"72\":1}}],[\"1111\",{\"1\":{\"71\":1}}],[\"11\",{\"0\":{\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1},\"1\":{\"53\":1,\"79\":1,\"134\":3,\"135\":1,\"150\":1,\"248\":2}}],[\"1\",{\"0\":{\"57\":1,\"65\":1,\"66\":2,\"67\":1,\"68\":1,\"70\":1,\"77\":1,\"87\":1,\"94\":1,\"95\":2,\"96\":1,\"97\":1,\"99\":1,\"104\":1,\"111\":1,\"115\":1,\"120\":1,\"127\":1,\"128\":2,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"135\":1,\"143\":1,\"154\":1,\"156\":1,\"161\":1,\"168\":1,\"172\":1,\"180\":1,\"181\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"188\":1,\"194\":1,\"196\":1,\"201\":1,\"209\":1,\"212\":1,\"215\":1,\"222\":1,\"227\":1,\"238\":1,\"248\":1},\"1\":{\"7\":12,\"19\":1,\"24\":1,\"26\":1,\"33\":2,\"35\":2,\"56\":1,\"80\":2,\"97\":3,\"111\":6,\"121\":2,\"130\":2,\"131\":1,\"135\":2,\"139\":2,\"141\":1,\"143\":1,\"144\":1,\"154\":2,\"158\":2,\"161\":1,\"168\":2,\"189\":2,\"190\":2,\"198\":1,\"227\":1,\"232\":1,\"248\":3,\"250\":1,\"251\":6,\"344\":2,\"345\":2}}],[\"段落\",{\"1\":{\"7\":2}}],[\"禁用嵌套事务\",{\"1\":{\"154\":1}}],[\"禁用默认事务\",{\"1\":{\"154\":1}}],[\"禁用\",{\"1\":{\"121\":1},\"2\":{\"6\":1}}],[\"禁用了如下功能\",{\"1\":{\"4\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"35\":1}}],[\"页面内容\",{\"0\":{\"34\":1}}],[\"页面标题\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"页面配置\",{\"0\":{\"31\":1},\"1\":{\"33\":1},\"2\":{\"37\":1}}],[\"页面引入配置\",{\"1\":{\"15\":1}}],[\"页面信息\",{\"0\":{\"33\":1},\"1\":{\"4\":1}}],[\"页脚\",{\"1\":{\"4\":1,\"10\":1}}],[\"评论\",{\"1\":{\"4\":1,\"10\":1}}],[\"链接\",{\"1\":{\"4\":1,\"19\":1}}],[\"贡献者\",{\"1\":{\"4\":1,\"10\":1}}],[\"侧边栏\",{\"1\":{\"4\":1,\"10\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
