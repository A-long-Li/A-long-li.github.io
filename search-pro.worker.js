const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":241,\"nextId\":241,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"3\",\"3\":\"3@0\",\"4\":\"4\",\"5\":\"4@0\",\"6\":\"4@1\",\"7\":\"5\",\"8\":\"5@0\",\"9\":\"5@1\",\"10\":\"6\",\"11\":\"6@0\",\"12\":\"6@1\",\"13\":\"7\",\"14\":\"7#markdown-介绍\",\"15\":\"7#markdown-配置\",\"16\":\"7#markdown-扩展\",\"17\":\"7#vuepress-扩展\",\"18\":\"7#主题扩展\",\"19\":\"7#提示容器\",\"20\":\"7#代码块\",\"21\":\"7#上下角标\",\"22\":\"7#自定义对齐\",\"23\":\"7#attrs\",\"24\":\"7#脚注\",\"25\":\"7#标记\",\"26\":\"7#任务列表\",\"27\":\"7#图片增强\",\"28\":\"7#组件\",\"29\":\"7@0\",\"30\":\"7@1\",\"31\":\"8\",\"32\":\"8#页面标题\",\"33\":\"8#页面信息\",\"34\":\"8#页面内容\",\"35\":\"8#组件\",\"36\":\"8@0\",\"37\":\"8@1\",\"38\":\"9\",\"39\":\"9@0\",\"40\":\"10\",\"41\":\"10#图标\",\"42\":\"10#图标库\",\"43\":\"10#设计\",\"44\":\"10#封面\",\"45\":\"10@0\",\"46\":\"11\",\"47\":\"11@0\",\"48\":\"12\",\"49\":\"12#_1-context类型\",\"50\":\"12#_1-1-空-context\",\"51\":\"12#_1-2-cancelfunc-类型原型\",\"52\":\"12#_1-3-context-类型原型\",\"53\":\"12#_1-4-background-方法原型\",\"54\":\"12#_1-5-todo-方法原型\",\"55\":\"12#_1-6-withvalue-方法原型\",\"56\":\"12#_2-context函数\",\"57\":\"12#_2-1-withcancel-函数原型\",\"58\":\"12#_2-2-withdeadline-函数原型\",\"59\":\"12#_2-3-withtimeout-函数原型\",\"60\":\"12@0\",\"61\":\"12@1\",\"62\":\"13\",\"63\":\"13#_1-错误变量\",\"64\":\"13#_2-基础接口\",\"65\":\"13#_2-1-reader接口\",\"66\":\"13#_2-2-writer接口\",\"67\":\"13#_2-3-seeker接口\",\"68\":\"13#_2-4-closer接口\",\"69\":\"13#_3-组合接口\",\"70\":\"13#_3-1-readwriter接口\",\"71\":\"13#_3-2-readcloser接口\",\"72\":\"13#_3-3-writecloser接口\",\"73\":\"13#_3-4-readwritecloser接口\",\"74\":\"13#_3-5-readseeker接口\",\"75\":\"13#_3-6-writeseeker接口\",\"76\":\"13#_3-7-readwriteseeker接口\",\"77\":\"13#_4-指定读写器读写接口\",\"78\":\"13#_4-1-readerfrom接口\",\"79\":\"13#_4-2-writerto接口\",\"80\":\"13#_5-指定偏移量读写接口\",\"81\":\"13#_5-1-readerat接口\",\"82\":\"13#_5-2-writerat接口\",\"83\":\"13#_6-单个字节读写接口\",\"84\":\"13#_6-1-bytereader接口\",\"85\":\"13#_6-2-bytescanner接口\",\"86\":\"13#_6-3-bytewriter接口\",\"87\":\"13#_6-4-runereader接口\",\"88\":\"13#_6-5-runescanner接口\",\"89\":\"13#_6-6-stringwriter接口\",\"90\":\"13#_7-结构体\",\"91\":\"13#_7-1-limitedreader\",\"92\":\"13#_7-2-pipereader\",\"93\":\"13#_7-3-pipewriter\",\"94\":\"13#_7-4-sectionreader\",\"95\":\"13#_8-供外部调用的函数\",\"96\":\"13#_8-1-copy\",\"97\":\"13#_8-2-copybuffer\",\"98\":\"13#_8-3-copyn\",\"99\":\"13#_8-4-limitreader\",\"100\":\"13#_8-5-multireader\",\"101\":\"13#_8-6-multiwriter\",\"102\":\"13#_8-7-pipe\",\"103\":\"13#_8-8-readall\",\"104\":\"13#_8-9-readatleast\",\"105\":\"13#_8-10-readfull\",\"106\":\"13#_8-11-sectionreader\",\"107\":\"13#_8-11-1-newsectionreader\",\"108\":\"13#_8-11-2-sectionreader-read\",\"109\":\"13#_8-11-3-sectionreader-readat\",\"110\":\"13#_8-11-4-sectionreader-seek\",\"111\":\"13#_8-11-5-sectionreader-size\",\"112\":\"13#_8-12-teereader\",\"113\":\"13#_8-13-writestring\",\"114\":\"13@0\",\"115\":\"13@1\",\"116\":\"14\",\"117\":\"14#_1-环境变量\",\"118\":\"14#_2-runtime-gosched\",\"119\":\"14#_3-runtime-goexit\",\"120\":\"14#_4-runtime-gomaxprocs\",\"121\":\"14#_5-runtime-numcpu\",\"122\":\"14#_6-runtime-goos\",\"123\":\"14@0\",\"124\":\"14@1\",\"125\":\"15\",\"126\":\"16\",\"127\":\"16#描述一下数据库的锁机制\",\"128\":\"16#什么是事务\",\"129\":\"16#什么是事务的acid特性-恢复技术能保证事务的哪些特性\",\"130\":\"16#在sql中-定义事务的一般有哪些\",\"131\":\"16#数据库中的b-s-c-s的区别是什么\",\"132\":\"16#存储过程和函数分别是什么\",\"133\":\"16#什么是索引-其作用是\",\"134\":\"16#什么是主键和外键-他们的特点和用途是什么\",\"135\":\"16#什么是基本表-什么是视图-两者的区别和联系是什么\",\"136\":\"16#视图有哪些优点\",\"137\":\"16#什么是e-r图-e-r模型向关系模型的转换规则是什么-e-r图的设计原则是什么\",\"138\":\"16#简述数据库软件系统建立流程\",\"139\":\"16#什么是数据字典-其作用是什么\",\"140\":\"16#什么是游标-其作用是什么\",\"141\":\"16#什么是触发器-有什么功能\",\"142\":\"16#数据库并发操作带来的数据不一致包括哪些-产生不一致的原因是什么\",\"143\":\"16#数据库并发控制的主要技术有哪些\",\"144\":\"16#什么是数据库范式-有什么作用\",\"145\":\"16#什么是数据库的完整性-其目的是什么-数据库完整性有哪些\",\"146\":\"16#登记日志文件的时候为什么必须要先写日志文件-后写数据库\",\"147\":\"16#什么是数据库镜像-它有什么用途\",\"148\":\"16#什么是数据仓库\",\"149\":\"16#数据库语句delete和drop的区别是什么\",\"150\":\"16#什么是数据库系统模式\",\"151\":\"16#数据库的三级模式和是什么-数据库系统的三级模式结构\",\"152\":\"16#什么是数据库的两级映像和数据库的数据独立性\",\"153\":\"16#数据库的活锁与死锁是什么\",\"154\":\"16#数据库的dba和dbms的作用是什么\",\"155\":\"16#故障恢复\",\"156\":\"16#事务故障的恢复\",\"157\":\"16#系统故障的恢复\",\"158\":\"16#介质故障的恢复\",\"159\":\"16@0\",\"160\":\"16@1\",\"161\":\"17\",\"162\":\"17#端口占用\",\"163\":\"17@0\",\"164\":\"17@1\",\"165\":\"18\",\"166\":\"19\",\"167\":\"19#概述\",\"168\":\"19#术语\",\"169\":\"19#dbms的主要功能\",\"170\":\"19#使用数据库进行信息化管理有哪些好处\",\"171\":\"19#数据模型的三个基本要素是\",\"172\":\"19#数据库系统的三级模式结构\",\"173\":\"19#什么是二级映像\",\"174\":\"19#物理独立性和逻辑独立性\",\"175\":\"19#dba的主要职责\",\"176\":\"19#关系数据库\",\"177\":\"19#实体完整性与参照完整性的规则\",\"178\":\"19#自然连接和等值连接的异同\",\"179\":\"19#完整性约束的作用\",\"180\":\"19#sql\",\"181\":\"19#sql的基本特点\",\"182\":\"19#sql的基本功能\",\"183\":\"19#sql定义语言ddl包括\",\"184\":\"19#什么是存储过程\",\"185\":\"19#基本表-视图的区别和联系。\",\"186\":\"19#视图的优点\",\"187\":\"19#嵌入式sql\",\"188\":\"19#完整性和安全性\",\"189\":\"19#什么是数据库的完整性-安全性\",\"190\":\"19#维护数据库完整性dbms应该提供哪些支持\",\"191\":\"19#实体完整性的定义和违约处理\",\"192\":\"19#参照完整性的定义和违约处理\",\"193\":\"19#用户自定义的完整性\",\"194\":\"19#触发器的作用-什么时候用触发器-创建触发器的步骤\",\"195\":\"19#实现数据库安全性控制的常用方法和技术\",\"196\":\"19#关系数据库的设计理论\",\"197\":\"19#为什么范式会出现\",\"198\":\"19#解释范式\",\"199\":\"19#数据库设计\",\"200\":\"19#数据库设计的基本步骤\",\"201\":\"19#什么是数据库设计\",\"202\":\"19#数据字典的内容及其作用\",\"203\":\"19#设计概念系统结构\",\"204\":\"19#逻辑设计阶段主要内容和步骤\",\"205\":\"19#e-r模式合并时发生的三种冲突\",\"206\":\"19#物理设计的内容和步骤\",\"207\":\"19#数据库的运行与维护-从以下几个角度考虑\",\"208\":\"19#事务和并发控制\",\"209\":\"19#为什么要并发\",\"210\":\"19#事务的定义\",\"211\":\"19#事务的四大特性\",\"212\":\"19#事务并发执行可能导致哪几类数据不一致-怎么解决\",\"213\":\"19#封锁的定义\",\"214\":\"19#封锁的类型\",\"215\":\"19#锁的类型\",\"216\":\"19#死锁的检测和预防\",\"217\":\"19#事务的可串行化\",\"218\":\"19#描述两段锁结构\",\"219\":\"19#数据库恢复技术\",\"220\":\"19#故障的种类\",\"221\":\"19#恢复策略\",\"222\":\"19#故障的种类和恢复方法\",\"223\":\"19#数据库转储\",\"224\":\"19#使用日志的数据库恢复技术\",\"225\":\"19@0\",\"226\":\"19@1\",\"227\":\"20\",\"228\":\"20#uniapp\",\"229\":\"20#gorm\",\"230\":\"20#go-发送邮件模板\",\"231\":\"20#整理简历上的bitcask数据库\",\"232\":\"20#c语言使用宏定义来实现swap函数\",\"233\":\"20#resnet\",\"234\":\"20#解决的问题\",\"235\":\"20#梯度消失和梯度爆炸\",\"236\":\"20#退化问题\",\"237\":\"20#复试自我介绍\",\"238\":\"20@0\",\"239\":\"20@1\",\"240\":\"21\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1],\"3\":[null,null,1],\"4\":[1,18],\"5\":[null,null,1],\"6\":[null,null,1],\"7\":[1,7],\"8\":[null,null,1],\"9\":[null,null,1],\"10\":[1,20],\"11\":[null,null,1],\"12\":[null,null,1],\"13\":[2,11],\"14\":[2,8],\"15\":[2,13],\"16\":[2,11],\"17\":[2,10],\"18\":[1,10],\"19\":[1,19],\"20\":[1,1],\"21\":[1,3],\"22\":[1,3],\"23\":[1,5],\"24\":[1,3],\"25\":[1,3],\"26\":[1,6],\"27\":[1,2],\"28\":[1],\"29\":[null,null,1],\"30\":[null,null,1],\"31\":[1,3],\"32\":[1,19],\"33\":[1,20],\"34\":[1,12],\"35\":[1,13],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[1],\"39\":[null,null,1],\"40\":[1],\"41\":[1],\"42\":[1,1],\"43\":[1],\"44\":[1,4],\"45\":[null,null,1],\"46\":[1],\"47\":[null,null,1],\"48\":[1,26],\"49\":[2],\"50\":[3,44],\"51\":[4,9],\"52\":[4,65],\"53\":[4,17],\"54\":[4,14],\"55\":[4,52],\"56\":[2],\"57\":[4,72],\"58\":[3,95],\"59\":[4,51],\"60\":[null,null,1],\"61\":[null,null,2],\"62\":[2,9],\"63\":[2,44],\"64\":[2],\"65\":[3,93],\"66\":[2,49],\"67\":[3,56],\"68\":[3,18],\"69\":[2,3],\"70\":[3,7],\"71\":[3,10],\"72\":[2,7],\"73\":[3,8],\"74\":[3,7],\"75\":[3,7],\"76\":[3,7],\"77\":[2],\"78\":[3,21],\"79\":[3,17],\"80\":[2],\"81\":[3,49],\"82\":[3,25],\"83\":[2],\"84\":[3,11],\"85\":[3,11],\"86\":[3,9],\"87\":[3,16],\"88\":[3,12],\"89\":[2,11],\"90\":[2],\"91\":[3,21],\"92\":[3,31],\"93\":[3,34],\"94\":[3,40],\"95\":[2],\"96\":[3,56],\"97\":[3,57],\"98\":[3,45],\"99\":[3,35],\"100\":[3,39],\"101\":[3,46],\"102\":[3,48],\"103\":[2,43],\"104\":[3,60],\"105\":[3,53],\"106\":[3,33],\"107\":[4,37],\"108\":[5,38],\"109\":[5,42],\"110\":[5,47],\"111\":[5,28],\"112\":[3,41],\"113\":[3,31],\"114\":[null,null,1],\"115\":[null,null,2],\"116\":[1,5],\"117\":[2,133],\"118\":[3,25],\"119\":[3,26],\"120\":[3,50],\"121\":[3,13],\"122\":[3,11],\"123\":[null,null,1],\"124\":[null,null,2],\"125\":[1],\"126\":[1],\"127\":[1,27],\"128\":[2,7],\"129\":[4,35],\"130\":[4],\"131\":[3],\"132\":[2],\"133\":[3],\"134\":[3],\"135\":[4],\"136\":[2],\"137\":[6],\"138\":[1,59],\"139\":[3,25],\"140\":[3,25],\"141\":[3,37],\"142\":[3,13],\"143\":[2,7],\"144\":[3,9],\"145\":[4],\"146\":[3,9],\"147\":[3,10],\"148\":[2],\"149\":[4,35],\"150\":[2],\"151\":[2,13],\"152\":[2],\"153\":[2,51],\"154\":[2,15],\"155\":[1],\"156\":[1,3],\"157\":[1,16],\"158\":[1,2],\"159\":[null,null,1],\"160\":[null,null,1],\"161\":[2],\"162\":[1,21],\"163\":[null,null,1],\"164\":[null,null,1],\"165\":[1],\"166\":[1],\"167\":[1],\"168\":[1,33],\"169\":[1,30],\"170\":[2,9],\"171\":[1,13],\"172\":[1,16],\"173\":[1,5],\"174\":[1,10],\"175\":[1,5],\"176\":[1,22],\"177\":[1,11],\"178\":[1,8],\"179\":[1,5],\"180\":[1],\"181\":[1,10],\"182\":[1,6],\"183\":[1,8],\"184\":[1,9],\"185\":[3,11],\"186\":[1,6],\"187\":[1,7],\"188\":[1],\"189\":[3,10],\"190\":[2,3],\"191\":[1,9],\"192\":[1,9],\"193\":[1,4],\"194\":[4,15],\"195\":[2,11],\"196\":[1],\"197\":[1,7],\"198\":[1,21],\"199\":[1],\"200\":[1,6],\"201\":[1,6],\"202\":[1,24],\"203\":[1,11],\"204\":[1,4],\"205\":[2,5],\"206\":[1,2],\"207\":[2,7],\"208\":[1],\"209\":[1,5],\"210\":[1,6],\"211\":[1,13],\"212\":[3,10],\"213\":[1,3],\"214\":[1,5],\"215\":[1,8],\"216\":[1,7],\"217\":[1,4],\"218\":[1,10],\"219\":[1],\"220\":[1,4],\"221\":[1,10],\"222\":[1,13],\"223\":[1,13],\"224\":[1,12],\"225\":[null,null,1],\"226\":[null,null,1],\"227\":[1],\"228\":[1,5],\"229\":[1,36],\"230\":[2,159],\"231\":[1,4],\"232\":[1,2],\"233\":[1],\"234\":[1],\"235\":[1,10],\"236\":[1],\"237\":[1,24],\"238\":[null,null,1],\"239\":[null,null,1],\"240\":[1,3]},\"averageFieldLength\":[1.9324961002916619,19.14278108021871,0.9181366091789626],\"storedFields\":{\"0\":{\"h\":\"Golang\"},\"1\":{\"c\":[\"golang\"]},\"2\":{\"h\":\"写作指南\"},\"3\":{\"c\":[\"使用指南\"]},\"4\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"c\":[\"禁用\"]},\"7\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"8\":{\"c\":[\"使用指南\"]},\"9\":{\"c\":[\"加密\"]},\"10\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"11\":{\"c\":[\"指南\"]},\"12\":{\"c\":[\"布局\"]},\"13\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"14\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"15\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"16\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"17\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"18\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"19\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"20\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"21\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"22\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"23\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"24\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"25\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"26\":{\"h\":\"任务列表\",\"t\":[\"[x] 计划 1\",\"[ ] 计划 2\",\"查看详情\"]},\"27\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"28\":{\"h\":\"组件\"},\"29\":{\"c\":[\"使用指南\"]},\"30\":{\"c\":[\"Markdown\"]},\"31\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"32\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 --- \"]},\"33\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"34\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"35\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"36\":{\"c\":[\"使用指南\"]},\"37\":{\"c\":[\"页面配置\",\"使用指南\"]},\"38\":{\"h\":\"杂记\"},\"39\":{\"c\":[\"使用指南\"]},\"40\":{\"h\":\"资源链接\"},\"41\":{\"h\":\"图标\"},\"42\":{\"h\":\"图标库\",\"t\":[\"fontawesome\"]},\"43\":{\"h\":\"设计\"},\"44\":{\"h\":\"封面\",\"t\":[\"coverview\",\"简单设计\",\".9.png制作\"]},\"45\":{\"c\":[\"resource\"]},\"46\":{\"h\":\"标准库\"},\"47\":{\"c\":[\"标准库\"]},\"48\":{\"h\":\"Context标准库\",\"t\":[\"tips\",\"context 翻译成中文是 上下文 的意思，它可以对 API 和进程之间传递截止日期、取消信号和其他请求范围的值。\",\"使用上下文的程序应遵循以下规则：\",\"保持包之间的接口一致\",\"不要在结构类型中存储上下文\",\"上下文应该是第一个参数，通常命名为ctx\",\"上下文值仅用于传输进程和API的请求范围数据，而不用于向函数传递可选参数\",\"context 是 Golang 开发常用的并发编程技术。\",\"提示\",\"Context 实际上只定义了接口，凡是实现该接口的类都可称为是一种 context，官方包实现了几个常用的context，分别可用于不同的场景。\"]},\"49\":{\"h\":\"1. context类型\"},\"50\":{\"h\":\"1.1 空 context\",\"t\":[\"context包中定义了一个空的context，名为emptyCtx，用于 context 的根节点，空的 context 只是简单的实现了 context，本身不包含任何值，仅用于其他 context 的父节点。\",\"type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key any) any { return nil } func (e *emptyCtx) String() string { switch e { case background: return \\\"context.Background\\\" case todo: return \\\"context.TODO\\\" } return \\\"unknown empty Context\\\" } \"]},\"51\":{\"h\":\"1.2 CancelFunc 类型原型\",\"t\":[\"// CancelFunc类型是一个停止工作的方法 // CancelFunc不会等待工作停止 // CancelFunc可以被多个goroutine同时调用, 在第一次调用之后, 对CancelFunc的后续调用什么也不做 type CancelFunc func() \"]},\"52\":{\"h\":\"1.3 Context 类型原型\",\"t\":[\"type Context interface { // Deadline返回的时间是代表该上下文所做的工作应该被取消的时间。如果没有设置截止日期，则返回ok==false。连续调用Deadline会返回相同的结果。 Deadline() (deadline time.Time, ok bool) // Done返回一个channel通道，该通道代表完成工作时关闭取消上下文。需要在 select-case 语句中使用, case <-context.Done(): // 如果上下文未关闭，Done返回nil。 // 当context关闭后, Done返回一个被关闭的通道, 关闭仍然是可读的, goroutine可以接收到关闭请求 // 连续调用Done将返回相同的值。Done通道的关闭可能会异步发生，当cancel函数返回。 // 参考 https://blog.golang.org/pipelines 更多的示例 Done() <-chan struct{} // 该方法描述 context 关闭的原因 // 如果Done未关闭，Err返回nil。 // 如果Done被关闭，Err返回一个非nil错误 Err() error // 该方法根据 key 值查询map中 value // Value返回与此上下文关联的Value for key，或nil 如果没有value与key相关联。连续调用Value相同的键返回相同的结果。 Value(key any) any } \",\"Context 一般携带一个截止日期、一个取消信号和其他跨越API边界的值。上下文的方法可以被多个 goroutine 同时调用。\"]},\"53\":{\"h\":\"1.4 Background() 方法原型\",\"t\":[\"var background = new(emptyCtx) func Background() Context{ return background } \",\"Background 函数返回一个非nil的空Context。它永远不会被取消，没有价值，也没有期限。它通常由主函数、初始化和测试使用，并作为传入请求的顶级上下文。\"]},\"54\":{\"h\":\"1.5 TODO() 方法原型\",\"t\":[\"var todo = new(emptyCtx) func TODO() Context { return todo } \",\"TODO 函数返回一个非nil的空Context。代码应该使用上下文。当不清楚要使用哪个Context或者它还不可用时(因为周围的函数还没有扩展到接受Context参数)。\"]},\"55\":{\"h\":\"1.6 WithValue() 方法原型\",\"t\":[\"func WithValue(parent Context, key, val any) Context \",\"WithValue 函数，返回父对象的副本，其中与键关联的值为val。\",\"上下文值只用于传递进程和api的请求范围内的数据，而不是传递可选参数给函数。\",\"提供的键必须具有可比性，不应该是string类型或任何其他内置类型，以避免使用上下文的包之间的冲突。使用WithValue的用户应该定义自己的键类型。在给接口{}赋值时，为了避免分配，上下文键通常有具体的类型struct{}。另外，导出的上下文关键变量的静态类型应该是指针或接口。\",\"这个例子演示了使用 context.WithValue()函数，如何将值传递给上下文，以及如果值存在，如何检索它\",\"package main import ( \\\"fmt\\\" \\\"context\\\" ) func main() { type favContextKey string f := func(ctx context.Context, k favContextKey) { if v := ctx.Value(k); v != nil { fmt.Println(\\\"found value:\\\", v) return } fmt.Println(\\\"key not found:\\\", k) } key1 := favContextKey(\\\"key1\\\") ctx := context.WithValue(context.Background(), key1, \\\"Golang\\\") f(ctx, key1) f(ctx, favContextKey(\\\"key2\\\")) } \"]},\"56\":{\"h\":\"2. context函数\"},\"57\":{\"h\":\"2.1 WithCancel() 函数原型\",\"t\":[\"func WithCancel(parent Context) (ctx Context, cancel CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } c := newCancelCtx(parent) propagateCancel(parent, &c) return &c, func() { c.cancel(true, Canceled) } } \",\"WithCancel 函数，返回带有新的 Done() 通道的父进程的副本。当返回的 cancel 函数被调用或父上下文的 Done() 通道被关闭时，返回上下文的 Done() 通道将被关闭，以哪个先发生为准。\",\"取消此上下文将释放与其关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel。\",\"示例\",\"。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func handelrequest(ctx context.Context) { go writeredis(ctx) go writedatabase(ctx) for { select { case <-ctx.Done(): fmt.Println(\\\"handelrequest done.\\\") return default: fmt.Println(\\\"handelrequest running\\\") time.Sleep(2 * time.Second) } } } func writeredis(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"writeredis done.\\\") return default: fmt.Println(\\\"writeredis running\\\") time.Sleep(2 * time.Second) } } } func writedatabase(ctx context.Context) { for { select { case <-ctx.Done(): fmt.Println(\\\"writedatabase done.\\\") return default: fmt.Println(\\\"writedatabase running\\\") time.Sleep(2 * time.Second) } } } func main() { ctx, cancel := context.WithCancel(context.Background()) go handelrequest(ctx) time.Sleep(5 * time.Second) fmt.Println(\\\"it's time to stop all sub goroutines!\\\") cancel() //just for test whether sub goroutines exit or not time.Sleep(5 * time.Second) } \"]},\"58\":{\"h\":\"2.2 WithDeadline() 函数原型\",\"t\":[\"func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } if cur, ok := parent.Deadline(); ok && cur.Before(d) { // The current deadline is already sooner than the new one. return WithCancel(parent) } c := &timerCtx{ cancelCtx: newCancelCtx(parent), deadline: d, } propagateCancel(parent, c) dur := time.Until(d) if dur <= 0 { c.cancel(true, DeadlineExceeded) // deadline has already passed return c, func() { c.cancel(false, Canceled) } } c.mu.Lock() defer c.mu.Unlock() if c.err == nil { c.timer = time.AfterFunc(dur, func() { c.cancel(true, DeadlineExceeded) }) } return c, func() { c.cancel(true, Canceled) } } \",\"WithDeadline 函数，返回父上下文的一个副本，其截止日期调整为不迟于d。如果父上下文的截止日期已经早于d, WithDeadline(parent, d) 在语义上等价于parent。当截止日期到期、调用返回的 cancel 函数或父上下文的 Done() 通道被关闭时，返回上下文的Done通道将被关闭，以先发生的情况为准。\",\"取消此上下文将释放与其关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel。\",\"示例\",\"这个例子传递了一个带有任意截止日期的上下文，告诉阻塞函数一旦到达该时间就应该结束它的工作。\",\"package main import ( \\\"fmt\\\" \\\"context\\\" \\\"time\\\" ) const shortDuration = 1 * time.Millisecond func main() { d := time.Now().Add(shortDuration) ctx, cancel := context.WithDeadline(context.Background(), d) defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"在截止时间之后停止\\\") case <-ctx.Done(): fmt.Println(\\\"在截止时间停止\\\") } } \"]},\"59\":{\"h\":\"2.3 WithTimeout() 函数原型\",\"t\":[\"func WithTimeout(parent Context, timeout time.Duration) (context, CancelFunc) \",\"WithTimeout函数，返回 WithDeadline(parent, time.Now().add(timeout))\",\"取消这个上下文会释放与之相关的资源，所以只要在这个上下文中运行的操作完成，代码就应该调用cancel:\",\"func slowOperationWithTimeout(ctx context.Context) (Result, error) { ctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond) defer cancel() // 如果slowOperation在超时之前完成，则释放资源 return slowOperation(ctx) } \",\"示例\",\"这个例子传递了一个带有超时的上下文，告诉阻塞函数在超时过后应该放弃它的工作。\",\"package main import ( \\\"fmt\\\" \\\"context\\\" \\\"time\\\" ) const shortDuration = 1 * time.Millisecond func main() { ctx, cancel := context.WithTimeout(context.Background(), shortDuration) defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"在超时时间之后结束\\\") case <-ctx.Done(): fmt.Println(\\\"在超时时间结束\\\") } } \"]},\"60\":{\"c\":[\"golang\"]},\"61\":{\"c\":[\"标准库\",\"golang\"]},\"62\":{\"h\":\"I/O标准库\",\"t\":[\"tips\",\"io包中提供I/O原始操作的一系列接口。它主要包装了一些已有的实现，如 os 包中的那些，并将这些抽象成为实用性的功能和一些其他相关的接口。\"]},\"63\":{\"h\":\"1. 错误变量\",\"t\":[\"var EOF = errors.New(“EOF”) 正常输入结束Read返回EOF，如果在一个结构化数据流中EOF在不期望的位置出现了，则应返回错误ErrUnexpectedEOF或者其它给出更多细节的错误。\",\"var ErrClosedPipe = errors.New(“io: read/write on closed pipe”) 当从一个已关闭的Pipe读取或者写入时，会返回ErrClosedPipe。\",\"var ErrNoProgress = errors.New(“multiple Read calls return no data or error”) 某些使用io.Reader接口的客户端如果多次调用Read都不返回数据也不返回错误时，就会返回本错误，一般来说是io.Reader的实现有问题的标志。\",\"var ErrShortBuffer = errors.New(“short buffer”) ErrShortBuffer表示读取操作需要大缓冲，但提供的缓冲不够大。\",\"var ErrShortWrite = errors.New(“short write”) ErrShortWrite表示写入操作写入的数据比提供的少，却没有显式的返回错误。\",\"var ErrUnexpectedEOF = errors.New(“unexpected EOF”) ErrUnexpectedEOF表示在读取一个固定尺寸的块或者数据结构时，在读取未完全时遇到了EOF。\"]},\"64\":{\"h\":\"2. 基础接口\"},\"65\":{\"h\":\"2.1 Reader接口\",\"t\":[\"type Reader interface { Read(p []byte) (n int, err error) } \",\"Read 将 len个字节读取到 p 中。它返回读取的字节数 n（0 <= n <= len）以及任何遇到的错误。即使 Read 返回的 n < len，它也会在调用过程中使用 p的全部作为暂存空间。若一些数据可用但不到 len 个字节，Read 会照例返回可用的东西，而不是等待更多。\",\"当 Read 在成功读取 n > 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数，可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。\",\"调用者应当总在考虑到错误 err 前处理 n > 0 的字节。这样做可以在读取一些字节，以及允许的 EOF 行为后正确地处理I/O错误。\",\"Read 的实现会阻止返回零字节的计数和一个 nil 错误，调用者应将这种情况视作空操作。\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func main() { f, err := os.Open(\\\"a.txt\\\") if err != nil { fmt.Printf(\\\"err: %v\\\\n\\\", err) return } defer f.Close() buf := make([]byte, 12) // 实例化一个长度为4的[]byte for { n, err2 := f.Read(buf) // 将内容读至buf if n == 0 || err2 == io.EOF { fmt.Println(\\\"文件以读取完毕\\\") break } fmt.Println(string(buf[:n])) } } \",\"其中a.txt内容为：\",\" hello world \"]},\"66\":{\"h\":\"2.2 Writer接口\",\"t\":[\"type Writerinterface { Write(p []byte) (n int, err error) } \",\"Write 将 len个字节从 p 中写入到基本数据流中。它返回从 p 中被写入的字节数n（0 <= n <= len）以及任何遇到的引起写入提前停止的错误。若 Write 返回的n < len，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。\",\"实例演示：\",\"package main import ( \\\"os\\\" ) func main() { f, _ := os.OpenFile(\\\"a.txt\\\", os.O_RDWR|os.O_APPEND, 0775) // 以读写模式打开文件，并且在写操作时将数据附加到文件尾部 f.Write([]byte(\\\" hello golang\\\")) f.Close() } \",\"a.txt内容更新为：\",\" hello world hello golang \",\"其中a.txt初始内容为：\",\" hello world \"]},\"67\":{\"h\":\"2.3 Seeker接口\",\"t\":[\"type Seeker interface { Seek(offset int64, whence int) (int64, error) } \",\"Seeker 用来移动数据的读写指针\",\"Seek 设置下一次读写操作的指针位置，每次的读写操作都是从指针位置开始的\",\"whence 的含义：\",\"如果 whence 为 0：表示从数据的开头开始移动指针\",\"如果 whence 为 1：表示从数据的当前指针位置开始移动指针\",\"如果 whence 为 2：表示从数据的尾部开始移动指针\",\"offset 是指针移动的偏移量\",\"返回移动后的指针位置和移动过程中遇到的任何错误\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" ) func main() { f, _ := os.Open(\\\"a.txt\\\") // 打开文件后，光标默认在文件开头 f.Seek(3, 0) // 从索引值为3处开始读 buf := make([]byte, 10) // 设置缓冲区 n, _ := f.Read(buf) // 将内容读到缓冲区内 fmt.Printf(\\\"n: %v\\\\n\\\", n) fmt.Printf(\\\"string(buf): %v\\\\n\\\", string(buf)) f.Close() } \",\"其中a.txt内容为：\",\" hello world \"]},\"68\":{\"h\":\"2.4 Closer接口\",\"t\":[\"type Closer interface { Close() error } \",\"Closer关闭的接口, 带有Close() 方法， 但是行为没有定义，所以 可以特定行为来实现 在整个标准库内都没有对Closer的引用，只有实现，用法都是开启某某连接/流，在用完/报错后在进行Close的操作。\"]},\"69\":{\"h\":\"3. 组合接口\",\"t\":[\"组合接口是对多个接口进行了组合，当同时实现多个接口时，可以使用组合接口进行传递\"]},\"70\":{\"h\":\"3.1 ReadWriter接口\",\"t\":[\"type ReadWriter interface { Reader Writer } \",\"ReadWriter接口聚合了基本的读写操作。\"]},\"71\":{\"h\":\"3.2 ReadCloser接口\",\"t\":[\"type ReadCloser interface { Reader Closer } \",\"ReadCloser就是Reader+Closer，例如在ioutil中的NopCloser方法返回的就是一个ReadCloser，但是里面的Close就是个空函数，毫无作用。\"]},\"72\":{\"h\":\"3.3 WriteCloser接口\",\"t\":[\"type WriteCloser interface { Writer Closer } \",\"WriteCloser接口聚合了基本的写入和关闭操作。\"]},\"73\":{\"h\":\"3.4 ReadWriteCloser接口\",\"t\":[\"type ReadWriteCloser interface { Reader Writer Closer } \",\"ReadWriteCloser接口聚合了基本的读写和关闭操作。\"]},\"74\":{\"h\":\"3.5 ReadSeeker接口\",\"t\":[\"type ReadSeeker interface { Reader Seeker } \",\"ReadSeeker接口聚合了基本的读取和移位操作。\"]},\"75\":{\"h\":\"3.6 WriteSeeker接口\",\"t\":[\"type WriteSeeker interface { Writer Seeker } \",\"WriteSeeker接口聚合了基本的写入和移位操作。\"]},\"76\":{\"h\":\"3.7 ReadWriteSeeker接口\",\"t\":[\"type ReadWriteSeeker interface { Reader Writer Seeker } \",\"ReadWriteSeeker接口聚合了基本的读写和移位操作\"]},\"77\":{\"h\":\"4. 指定读写器读写接口\"},\"78\":{\"h\":\"4.1 ReaderFrom接口\",\"t\":[\"type ReaderFrom interface { ReadFrom(r Reader) (n int64, err error) } \",\"ReadFrom 从 r 中读取数据到对象的数据流中 直到 r 返回 EOF 或 r 出现读取错误为止 返回值 n 是读取的字节数 返回值 err 就是 r 的返回值 err\"]},\"79\":{\"h\":\"4.2 WriterTo接口\",\"t\":[\"type WriterTo interface { WriteTo(w Writer) (n int64, err error) } \",\"WriterTo 将对象的数据流写入到 w 中 直到对象的数据流全部写入完毕或遇到写入错误为止 返回值 n 是写入的字节数 返回值 err 就是 w 的返回值 err\"]},\"80\":{\"h\":\"5. 指定偏移量读写接口\"},\"81\":{\"h\":\"5.1 ReaderAt接口\",\"t\":[\"type ReaderAt interface { ReadAt(p []byte, off int64) (n int, err error) } \",\"ReadAt 从对象数据流的 off 处读出数据到 p 中\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始读取\",\"如果对象的数据流只有部分可用，不足以填满 p则 ReadAt 将等待所有数据可用之后，继续向 p 中写入直到将 p 填满后再返回，在这点上 ReadAt 要比 Read 更严格\",\"返回读取的字节数 n 和读取时遇到的错误\",\"如果 n < len，则需要返回一个 err 值来说明为什么没有将 p 填满（比如 EOF）\",\"如果 n > len，而且对象的数据没有全部读完，则err 将返回 nil\",\"如果 n = len，而且对象的数据刚好全部读完，则err 将返回 EOF 或者 nil（不确定）\"]},\"82\":{\"h\":\"5.2 WriterAt接口\",\"t\":[\"type WriterAt interface { WriteAt(p []byte, off int64) (n int, err error) } \",\"WriteAt 将 p 中的数据写入到对象数据流的 off 处\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始写入\",\"返回写入的字节数和写入时遇到的错误\",\"如果 n < len，则必须返回一个 err 值来说明为什么没有将 p 完全写入\"]},\"83\":{\"h\":\"6. 单个字节读写接口\"},\"84\":{\"h\":\"6.1 ByteReader接口\",\"t\":[\"type ByteReader interface { ReadByte() (byte, error) } \",\"ByteReader是基本的ReadByte方法的包装。 ReadByte读取输入中的单个字节并返回。如果没有字节可读取，会返回错误。\"]},\"85\":{\"h\":\"6.2 ByteScanner接口\",\"t\":[\"type ByteScanner interface { ByteReader UnreadByte() error } \",\"ByteScanner接口在基本的ReadByte方法之外还添加了UnreadByte方法。\",\"UnreadByte方法让下一次调用ReadByte时返回之前调用ReadByte时返回的同一个字节。连续调用两次UnreadByte方法而中间没有调用ReadByte时，可能会导致错误。\"]},\"86\":{\"h\":\"6.3 ByteWriter接口\",\"t\":[\"type ByteWriter interface { WriteByte(c byte) error } \",\"包装 WriteByte 单个字节写入方法的接口\"]},\"87\":{\"h\":\"6.4 RuneReader接口\",\"t\":[\"type RuneReader interface { ReadRune() (r rune, size int, err error) } \",\"ReadRune 方法的包装，读取单个UTF-8编码的Unicode字符，并返回rune及其字节大小。如果没有可用字符，将设置err\"]},\"88\":{\"h\":\"6.5 RuneScanner接口\",\"t\":[\"type RuneScanner interface { RuneReader UnreadRune() error } \",\"RuneScanner接口在基本的ReadRune方法之外还添加了UnreadRune方法。\",\"UnreadRune方法让下一次调用ReadRune时返回之前调用ReadRune时返回的同一个utf-8字符。连续调用两次UnreadRune方法而中间没有调用ReadRune时，可能会导致错误。\"]},\"89\":{\"h\":\"6.6 StringWriter接口\",\"t\":[\"type StringWriter interface { WriteString(s string) (n int, err error) } \",\"字符串写入方法WriteString的包装\"]},\"90\":{\"h\":\"7. 结构体\"},\"91\":{\"h\":\"7.1 LimitedReader\",\"t\":[\"type LimitedReader struct { R Reader // underlying reader N int64 // max bytes remaining } \",\"LimitedReader从R读取，但将返回的数据量限制为N个字节。每次读取更新N以标记剩余可以读取的字节数。Read在N<=0时或基础R返回EOF时返回EOF。\",\"具体实现方法为：func LimitReader(r Reader, n int64) Reader\"]},\"92\":{\"h\":\"7.2 PipeReader\",\"t\":[\"type PipeReader struct { // 内含隐藏或非导出字段 } \",\"PipeReader是一个管道的读取端。\",\"具体实现方法有：\",\"func (r *PipeReader) Read(data []byte) (n int, err error) Read实现了标准的读取接口：它从管道中读取数据，阻塞直到写入端到达或写入端被关闭。如果用错误关闭写入端，则返回错误为ERR；否则ERR为EOF。\",\"func (r *PipeReader) Close() error Close关闭读取器；关闭后如果对管道的写入端进行写入操作，就会返回(0, ErrClosedPip)。\",\"func (r *PipeReader) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Write时返回的错误改为err。\"]},\"93\":{\"h\":\"7.3 PipeWriter\",\"t\":[\"type PipeWriter struct { // 内含隐藏或非导出字段 } \",\"PipeWriter是一个管道的写入端。 具体实现方法有：\",\"func (w *PipeWriter) Write(data []byte) (n int, err error) Write实现了标准的写接口：它将数据写入管道，直到一个或多个读取端消耗完所有数据或读取端关闭为止。如果以错误关闭读取端，则该错误将作为ERR返回；否则ERR将为ErrClosedPipe。\",\"func (w *PipeWriter) Close() error Close关闭写入器；关闭后如果对管道的读取端进行读取操作，就会返回(0, EOF)。\",\"func (w *PipeWriter) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Read时返回的错误改为err。\",\"注：以上两个结构体PipeWriter与PipeReader是结合使用的需要用Pipe()方法进行创建。\"]},\"94\":{\"h\":\"7.4 SectionReader\",\"t\":[\"type SectionReader struct { // contains filtered or unexported fields } \",\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。 具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法 func (*SectionReader) Size\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"95\":{\"h\":\"8. 供外部调用的函数\"},\"96\":{\"h\":\"8.1 Copy\",\"t\":[\"func Copy(dst Writer, src Reader) (written int64, err error) \",\"将副本从src复制到dst，直到在src上达到EOF或发生错误。它返回复制的字节数和复制时遇到的第一个错误（如果有）。 成功的复制将返回err == nil而不是err == EOF。因为复制被定义为从src读取直到EOF，所以它不会将读取的EOF视为要报告的错误。 如果src实现WriterTo接口，则通过调用src.WriteTo（dst）实现该副本。否则，如果dst实现了ReaderFrom接口，则通过调用dst.ReadFrom（src）实现该副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") if _, err := io.Copy(os.Stdout, r); err != nil { // os.Stdout将内容输出到控制台 log.Fatal(err) // log.Fatal函数完成： // 1. 打印输出err // 2. 退出应用程序 } } \"]},\"97\":{\"h\":\"8.2 CopyBuffer\",\"t\":[\"func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) \",\"CopyBuffer与Copy相同，区别在于CopyBuffer逐步遍历提供的缓冲区（如果需要），而不是分配临时缓冲区。如果buf为nil，则分配一个；如果长度为零，则CopyBuffer会panic报错。 如果src实现WriterTo或dst实现ReaderFrom，则buf将不用于执行复制。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader\\\\n\\\") r2 := strings.NewReader(\\\"second reader\\\\n\\\") buf := make([]byte, 8) // buf is used here... if _, err := io.CopyBuffer(os.Stdout, r1, buf); err != nil { log.Fatal(err) } // ... reused here also. No need to allocate an extra buffer. if _, err := io.CopyBuffer(os.Stdout, r2, buf); err != nil { log.Fatal(err) } } \"]},\"98\":{\"h\":\"8.3 CopyN\",\"t\":[\"func CopyN(dst Writer, src Reader, n int64) (written int64, err error) \",\"CopyN将n个字节（或直到出错）从src复制到dst。它返回复制的字节数以及复制时遇到的最早错误。返回时，只有err == nil时，writte == n。 如果dst实现了ReaderFrom接口，则使用该接口实现副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\") if _, err := io.CopyN(os.Stdout, r, 4); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"99\":{\"h\":\"8.4 LimitReader\",\"t\":[\"func LimitReader(r Reader, n int64) Reader \",\"LimitedReader从r读取，但将返回的数据量限制为n个字节。每次读取更新n以标记剩余可以读取的字节数。Read在n<=0时或基础r返回EOF时返回EOF。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") lr := io.LimitReader(r, 4) if _, err := io.Copy(os.Stdout, lr); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"100\":{\"h\":\"8.5 MultiReader\",\"t\":[\"func MultiReader(readers ...Reader) Reader \",\"MultiReader返回一个Reader，它是所提供的输入阅读器的逻辑串联。它们被顺序读取。一旦所有输入均返回EOF，读取将返回EOF。如果任何读取器返回非零，非EOF错误，则Read将返回该错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader \\\") r2 := strings.NewReader(\\\"second reader \\\") r3 := strings.NewReader(\\\"third reader\\\\n\\\") r := io.MultiReader(r1, r2, r3) if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"first reader second reader third reader \"]},\"101\":{\"h\":\"8.6 MultiWriter\",\"t\":[\"func MultiWriter(writers ...Writer) Writer \",\"MultiWriter创建一个Writers，将其写入复制到所有提供的写入器中，类似于Unix tee（1）命令。 每个写入一次写入每个列出的写入器。如果列出的写程序返回错误，则整个写操作将停止并返回错误；它不会在列表中继续下去。\",\"官方示例：\",\"package main import ( \\\"bytes\\\" \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") var buf1, buf2 bytes.Buffer w := io.MultiWriter(&buf1, &buf2) if _, err := io.Copy(w, r); err != nil { log.Fatal(err) } fmt.Print(buf1.String()) fmt.Print(buf2.String()) } \"]},\"102\":{\"h\":\"8.7 Pipe\",\"t\":[\"func Pipe() (*PipeReader, *PipeWriter) \",\"Pipe创建一个同步的内存管道。 可用于连接期望io.Reader的代码和期望io.Writer的代码。\",\"管道上的读和写是一对一匹配的，除非需要多次读取才能使用单次写入。也就是说，每次对PipeWriter的写入都将阻塞，直到它满足从PipeReader读取的一个或多个读取，这些读取会完全消耗已写入的数据。\",\"数据直接从Write复制到相应的Read (或Reads)；没有内部缓冲。 对读的并行调用和对写的并行调用也是安全的：单个调用将按顺序执行。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { r, w := io.Pipe() go func() { fmt.Fprint(w, \\\"some io.Reader stream to be read\\\\n\\\") w.Close() }() if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果\",\"some io.Reader stream to be read \"]},\"103\":{\"h\":\"8.8 ReadAll\",\"t\":[\"func ReadAll(r Reader) ([]byte, error) \",\"ReadAll从r读取，直到出现错误或EOF，并返回其读取的数据。成功的调用返回errnil，而不是errEOF。由于ReadAll定义为从src读取直到EOF，因此它不会将读取的EOF视为要报告的错误。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"Go is a general-purpose language designed with systems programming in mind.\\\") b, err := io.ReadAll(r) if err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\", b) } \"]},\"104\":{\"h\":\"8.9 ReadAtLeast\",\"t\":[\"func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error) \",\"ReadAtLeast从r读取到buf，直到它至少读取了min字节。它返回复制的字节数n，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取少于最小字节后发生EOF，则ReadAtLeast返回ErrUnexpectedEOF。如果min大于buf的长度，则ReadAtLeast返回ErrShortBuffer。返回时，当且仅当err == nil时，n> = min。\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 14) if _, err := io.ReadAtLeast(r, buf, 4); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // buffer smaller than minimal read size. shortBuf := make([]byte, 3) if _, err := io.ReadAtLeast(r, shortBuf, 4); err != nil { fmt.Println(\\\"error:\\\", err) } // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadAtLeast(r, longBuf, 64); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"105\":{\"h\":\"8.10 ReadFull\",\"t\":[\"func ReadFull(r Reader, buf []byte) (n int, err error) \",\"ReadFull将r中的len（buf）个字节准确地读取到buf中。它返回复制的字节数，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取了一些但不是全部字节后发生EOF，则ReadFull返回ErrUnexpectedEOF。返回时，当且仅当err == nil时，n == len（buf）。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 4) if _, err := io.ReadFull(r, buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadFull(r, longBuf); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"106\":{\"h\":\"8.11 SectionReader\",\"t\":[\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。\",\"具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"107\":{\"h\":\"8.11.1 NewSectionReader\",\"t\":[\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader \",\"NewSectionReader返回一个SectionReader，它从r开始读取偏移量off，并在n个字节后以EOF停止。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \"]},\"108\":{\"h\":\"8.11.2 SectionReader.Read\",\"t\":[\"func (s *SectionReader) Read(p []byte) (n int, err error) \",\"实现了接口Reader的Read方法\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 9) if _, err := s.Read(buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"109\":{\"h\":\"8.11.3 SectionReader.ReadAt\",\"t\":[\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) \",\"实现了接口ReaderAt的ReadAt方法\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 6) if _, err := s.ReadAt(buf, 10); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"110\":{\"h\":\"8.11.4 SectionReader.Seek\",\"t\":[\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) \",\"实现了接口Seeker的Seek方法\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := s.Seek(10, io.SeekStart); err != nil { log.Fatal(err) } if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \",\"可以看的出来SectionReader是根据ReaderAt实现的，而非Seeker，虽然两者的效果很像，但是ReaderAt读取内容是无视Seeker偏移量的。且在读取数据大小上ReadAt是要比Read严格的，同样的Bytes在Read上即使设大了也会没事，但在ReadAt会报错。\"]},\"111\":{\"h\":\"8.11.5 SectionReader.Size\",\"t\":[\"func (s *SectionReader) Size() int64 \",\"Size返回以字节为单位的片段大小。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) fmt.Println(s.Size()) } \"]},\"112\":{\"h\":\"8.12 TeeReader\",\"t\":[\"func TeeReader(r Reader, w Writer) Reader \",\"TeeReader返回一个Reader，该Reader向w写入从r读取的内容。通过r执行的所有r读取均与对w的相应写入匹配。没有内部缓冲-写入必须在读取完成之前完成。写入时遇到的任何错误均报告为读取错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { var r io.Reader = strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") r = io.TeeReader(r, os.Stdout) // Everything read from r will be copied to stdout. if _, err := io.ReadAll(r); err != nil { log.Fatal(err) } } \"]},\"113\":{\"h\":\"8.13 WriteString\",\"t\":[\"func WriteString(w Writer, s string) (n int, err error) \",\"WriteString将字符串s的内容写入w，w接受字节片。如果w实现StringWriter，则直接调用其WriteString方法。否则，w.Write只调用一次。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { if _, err := io.WriteString(os.Stdout, \\\"Hello World\\\"); err != nil { log.Fatal(err) } } \"]},\"114\":{\"c\":[\"golang\"]},\"115\":{\"c\":[\"标准库\",\"golang\"]},\"116\":{\"h\":\"Runtime标准库\",\"t\":[\"tips\",\"runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。\"]},\"117\":{\"h\":\"1. 环境变量\",\"t\":[\"环境变量GOGC设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。runtime/debug包的SetGCPercent函数允许在运行时修改该百分比。\",\"环境变量GODEBUG控制运行时的debug输出。GODEBUG的值是逗号分隔的name=val对。支持的name如下：\",\"allocfreetrace\",\"设置其为1，会导致每次分配都会记录每一个对象的分配、释放及其堆栈踪迹。\",\"efence\",\"设置其为1，会导致分配器运行模式为：每个对象申请在独立的页和地址，且永不循环利用\",\"gctrace\",\"设置其为1，会导致每次垃圾回收器触发一行日志，包含内存回收的概要信息和暂停的时间。设置其为2，会写入同样的概述，但会重复收集。\",\"gcdead\",\"设置其为1，会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈\",\"schedtrace\",\"设置其为X，会导致调度程序每隔X毫秒输出单行信息到标准错误输出\",\"scheddetail\",\"设置schedtrace为X并设置其为1，会导致调度程序每隔X毫秒输出详细的多行信息，描述调度、进程、线程和go程的状态\",\"环境变量GOMAXPROCS限制可以同时运行用户层次的go代码的操作系统进程数。没有对代表go代码的、可以在系统调用中阻塞的go程数的限制；那些阻塞的goroutine不与GOMAXPROCS限制冲突。本包的GOMAXPROCS函数可以查询和修改该限制。\",\"环境变量GOTRACEBACK控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出。失败的程序默认会打印所有现存go程的堆栈踪迹（省略运行时系统中的函数），然后以状态码2退出。如果GOTRACEBACK为0，会完全忽略所有go程的堆栈踪迹。如果GOTRACEBACK为1，会采用默认行为。如果GOTRACEBACK为2，会打印所有现存go程包括运行时函数的堆栈踪迹。如果GOTRACEBACK为crash，会打印所有现存go程包括运行时函数的堆栈踪迹，并且如果可能会采用操作系统特定的方式崩溃，而不是退出。例如，在Unix系统里，程序会释放SIGABRT信号以触发核心信息转储。\",\"环境变量GOARCH、GOOS、GOPATH和GOROOT构成完整的go环境变量集合。它们影响go程序的构建, GOARCH、GOOS和GOROOT在编译时被记录并可用本包的常量和函数获取，但它们不会影响运行时环境\",\"gctrace 每一行打印的日志格式如下：\",\"gc {0} @{1}s {2}%: {3}+...+{4} ms clock, {5}+...+{6} ms cpu, {7}->{8}->{9} MB, {10} MB goal, {11} P \",\"每一个变量的具体定义：\",\"{0}: gc 运行次数\",\"{1}: 程序已运行的时间\",\"{2}: gc 占用的 CPU 百分比\",\"{3}: 执行时间，包括程序延迟和资源等待\",\"{4}: 也是执行时间, 一般看这个\",\"{5}: CPU clock\",\"{6}: CPU clock\",\"{7}: GC 启动前的堆内存\",\"{8}: GC 运行后的堆内存\",\"{9}: 当前堆内存\",\"{10}: GC 目标\",\"{11}: 进程数\",\"下面是一块存在内存泄露的代码段：\",\"package main import ( \\\"os\\\" \\\"os/signal\\\" ) func main() { go func() { m := make(map[int]int) for i := 0; ; i++ { m[i] = i } }() sig := make(chan os.Signal, 1) signal.Notify(sig) <-sig } \",\"执行 GODEBUG=gctrace=1 go run main.go, 查看运行时的内存情况：\",\"可以看到程序在运行过程中， 每次 GC，堆内存都在不断增大， 这是一个很明显的内存泄露场景。\"]},\"118\":{\"h\":\"2. runtime.Gosched\",\"t\":[\"让出CPU时间片，重新等待安排任务\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { go func(s string) { for i :=0; i < 2; i++ { fmt.Println(s) runtime.Gosched() // 让出CPU时间片，重新等带安排任务 } }(\\\"world\\\") for i := 0; i < 2; i++ { fmt.Println(\\\"hello\\\") runtime.Gosched() // 让出CPU时间片，重新等待安排任务 } } \"]},\"119\":{\"h\":\"3. runtime.Goexit\",\"t\":[\"退出当前协程\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" \\\"sync\\\" ) var wg sync.WaitGroup func main() { wg.Add(1) go func() { defer wg.Done() defer fmt.Println(\\\"A.defer\\\") func() { defer fmt.Println(\\\"B.defer\\\") // 结束协程 runtime.Goexit() defer fmt.Println(\\\"C.defer\\\") fmt.Println(\\\"B\\\") }() fmt.Println(\\\"A\\\") }() wg.Wait() // 主goroutine等待子goroutine结束，主在结束 } \"]},\"120\":{\"h\":\"4. runtime.GOMAXPROCS\",\"t\":[\"Go运行时调度器使用runtime.GOMAXPROCS参数来确定需要使用多少个os线程来同时执行go代码, 默认值是机器上的CPU核心数量，例如一个8核心的机器上，调度器会把go代码同时调度到8个os线程上\",\"go语言中可以通过runtime.GOMAXPROCS()函数来设置当前程序并发时占用的CPU逻辑核心数 go1.5版本之前默认使用的是单核心执行，1.5之后默认使用全部的cpu逻辑核心数\",\"我们可以通过将任务分配到不同的CPU逻辑核心上，从而实现并行的效果 :\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" \\\"sync\\\" \\\"time\\\" ) var wg sync.WaitGroup func a() { defer wg.Done() for i := 0; i < 100000000; i++ { //fmt.Println(\\\"A\\\", i) } } func b() { defer wg.Done() for i := 0; i < 100000000; i++ { //fmt.Println(\\\"B\\\", i) } } func main() { startTime := time.Now() //runtime.GOMAXPROCS(1) // 设置go运行时(runtime)的os线程数 // runtime.GOMAXPROCS设置为1os线程数时执行时间要比4os线程数用时更长 runtime.GOMAXPROCS(4) // 设置go运行时(runtime)的os线程数 wg.Add(1) go a() wg.Add(1) go b() wg.Add(1) go a() wg.Add(1) go b() wg.Wait() fmt.Println(time.Now().Sub(startTime)) } \"]},\"121\":{\"h\":\"5. runtime.NumCPU\",\"t\":[\"返回当前系统的 CPU 核数量\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { fmt.Println(\\\"cpus:\\\", runtime.NumCPU()) } \"]},\"122\":{\"h\":\"6. runtime.GOOS\",\"t\":[\"目标操作系统\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { fmt.Println(\\\"archive:\\\", runtime.GOOS) } \"]},\"123\":{\"c\":[\"golang\"]},\"124\":{\"c\":[\"标准库\",\"golang\"]},\"125\":{\"h\":\"已整理的杂记\"},\"126\":{\"h\":\"数据库\"},\"127\":{\"h\":\"描述一下数据库的锁机制\",\"t\":[\"排他锁\",\"独占一个锁\",\"共享锁\",\"读锁，可以与相同操作的人共享 3. 意向锁 4. 行锁 5. 表锁\",\"一级锁协议\",\"事务T在修改数据R之前先加了一个X锁，直到事务结束之后才会释放，可以方式丢失修改，保证事务T是可恢复的。\",\"二级锁协议\",\"在一级锁协议基础上增加事务T读取数据R之前加上一个S锁，直到事务结束之后释放。可以防止丢失修改和读脏数据\",\"三级锁协议\",\"在一级封锁协议上加上事务T在读取数据R之前必须对其先加上S锁，直到事务结束后才释放。保证了不丢失修改，不读到脏数据，可重复读。\"]},\"128\":{\"h\":\"什么是事务？\",\"t\":[\"答案\",\"事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。\"]},\"129\":{\"h\":\"什么是事务的 特性？恢复技术能保证事务的哪些特性？\",\"t\":[\"答案\",\"原子性（Atomicity）：事务是一个不可分割的工作单元，要么全部执行成功，要么全部失败回滚，不存在部分执行的情况。\",\"一致性（Consistency）：事务执行前后，数据库从一个一致性状态转移到另一个一致性状态（读取数据是一样的）\",\"隔离性（Isolation）：多个事务并发执行时，每个事务的操作应该与其他事务相互隔离，互不干扰，避免并发执行时数据不一致的问题。\",\"持久性（Durability）：一旦事务提交成功，对数据库的修改将永久保存，即使系统发生故障，数据也不会丢失。\",\"恢复技术通过日志记录和检查点等机制来保证事务的持久性特性。当系统发生故障时，恢复技术可以确保以下特性：\",\"原子性：通过事务日志和回滚操作，可以确保事务要么完全执行成功，要么完全回滚，避免部分执行的情况。\",\"持久性：通过事务日志和数据备份等手段，可以确保即使系统崩溃，已提交的事务对数据库的修改也能够永久保存。\"]},\"130\":{\"h\":\"在 中，定义事务的一般有哪些？\"},\"131\":{\"h\":\"数据库中的 ， 的区别是什么？\"},\"132\":{\"h\":\"存储过程和函数分别是什么？\"},\"133\":{\"h\":\"什么是索引？其作用是？\"},\"134\":{\"h\":\"什么是主键和外键？他们的特点和用途是什么？\"},\"135\":{\"h\":\"什么是基本表？什么是视图？两者的区别和联系是什么？\"},\"136\":{\"h\":\"视图有哪些优点？\"},\"137\":{\"h\":\"什么是E-R图？E-R模型向关系模型的转换规则是什么？E-R图的设计原则是什么？\"},\"138\":{\"h\":\"简述数据库软件系统建立流程\",\"t\":[\"答案\",\"需求分析： \",\"确定系统的需求和目标，包括功能需求、性能需求、安全需求等。\",\"概念设计： \",\"根据需求分析的结果，设计数据库系统的概念模型，包括实体关系图（ER图）、数据流程图等。\",\"确定数据库中的实体、属性、关系等基本结构。\",\"逻辑设计： \",\"将概念模型转换为数据库模式，设计数据库表结构、字段、关系等。\",\"确定数据的存储方式、数据类型、主键、外键等约束。\",\"模型优化\",\"物理设计： \",\"根据逻辑设计结果选择合适的数据库管理系统（DBMS）。\",\"设计物理存储结构，包括表空间、索引、分区等。\",\"考虑性能优化和扩展性，确定数据备份和恢复策略。\",\"实施和编码： \",\"根据物理设计结果，在选定的DBMS上创建数据库和表结构。\",\"编写数据库操作的存储过程、触发器、视图等。\",\"进行数据导入和数据转换。\",\"测试： \",\"进行单元测试、集成测试和系统测试，确保数据库系统的功能和性能符合需求。\",\"进行性能测试、安全测试、容错测试等。\",\"部署和维护： \",\"部署数据库系统到生产环境，并进行系统上线。\",\"监控数据库性能，定期备份数据，保证系统的稳定性和安全性。\",\"定期进行维护工作，如优化查询、清理无用数据、更新数据库结构等。\"]},\"139\":{\"h\":\"什么是数据字典？其作用是什么？\",\"t\":[\"答案\",\"数据字典是描述数据库中数据元素的集合，是元数据（元数据是数据的数据，用来管理数据），不是数据本身。\",\"其包括 1.数据项 2.数据结构 3.数据流 4.数据存储 5.处理过程\",\"其作用包括定义数据元素、描述属性、说明数据关系、提供业务含义，并帮助数据库管理和维护。有助于确保数据的准确性、完整性和一致性。\"]},\"140\":{\"h\":\"什么是游标？其作用是什么？\",\"t\":[\"答案\",\"游标是系统为用户开放的缓冲区,用于存放SQL语句的执行结果。\",\"游标通常用于遍历查询结果集，允许应用程序逐行处理查询结果。\",\"游标的作用包括：\",\"逐行处理数据：游标允许程序逐行访问查询结果集中的数据，这对于需要逐行处理数据的情况非常有用，比如在编写存储过程或批处理作业时。\",\"定位和导航：游标提供了定位和导航查询结果集的能力，允许程序员在结果集中移动到特定的行或记录。\",\"数据检索：通过游标，可以在结果集中检索数据，以便在应用程序中进行处理、分析或展示。\",\"数据更新：游标还可以用于在结果集中更新、删除或插入数据，允许应用程序对查询结果进行修改。\",\"游标操作通常比批量操作效率低，且可能会引起性能问题。开发中尽量使用批操作来替代游标\"]},\"141\":{\"h\":\"什么是触发器？有什么功能？\",\"t\":[\"答案\",\"触发器（Trigger）是数据库管理系统中的一种特殊类型的存储过程，它会在特定的数据库操作（如插入、更新、删除）发生时自动执行。触发器与表相关联，当满足触发条件时，触发器会被触发执行，从而执行预定义的操作。\",\"触发器的主要功能包括：\",\"数据约束：可以用来实施数据完整性约束，如检查插入、更新或删除操作是否符合特定条件。\",\"自动化任务：可以在特定数据库操作发生时自动执行一系列操作，如更新其他表、记录日志、发送通知等。\",\"审计跟踪：可以用来跟踪数据库操作，记录操作历史以及审计信息。\",\"复杂业务逻辑：可以用于实现复杂的业务逻辑，确保特定操作的一致性和正确性。\",\"数据同步：可以用于在多个表之间保持数据同步。\",\"触发器在数据库中起到了重要作用，可以帮助确保数据的完整性、一致性和安全性，同时简化开发人员的工作，减少重复性代码的编写。\"]},\"142\":{\"h\":\"数据库并发操作带来的数据不一致包括哪些？产生不一致的原因是什么？\",\"t\":[\"丢失修改\",\"两个事务同时修改数据，会导致一个被覆盖\",\"不可重复读\",\"同一个事务两次读的数据不一样\",\"读脏数据\",\"读到了不正确的数据（读到了一个数据，但是因为某个事务被撤销，这个数据被修改了，两个数据不一致，读到的数据是错数据）\"]},\"143\":{\"h\":\"数据库并发控制的主要技术有哪些？\",\"t\":[\"锁\",\"时间戳 timestamp\",\"乐观控制法\",\"多版本并发控制(MVCC)\"]},\"144\":{\"h\":\"什么是数据库范式？有什么作用？\",\"t\":[\"答案\",\"1NF保证原子性\",\"2NF去除非主属性对于主属性的部分依赖\",\"3NF去除非主属性对于主属性的传递依赖\",\"BCNF去除主属性对于主键的部分依赖与传递依赖(左边都是码)\",\"4NF消除表中的多值依赖(非平凡且非函数依赖的多值依赖)\"]},\"145\":{\"h\":\"什么是数据库的完整性？其目的是什么？数据库完整性有哪些？\"},\"146\":{\"h\":\"登记日志文件的时候为什么必须要先写日志文件，后写数据库？\",\"t\":[\"答案\",\"日志文件是用来记录事务对数据库的更新操作的文件。\",\"先写入日志文件，再写入数据库，可以确保数据的一致性、完整性和可靠性。\",\"先写入日志文件也可以作为备份机制，提高性能并增强容错处理能力。\"]},\"147\":{\"h\":\"什么是数据库镜像？它有什么用途？\",\"t\":[\"答案\",\"数据库镜像是一种技术，用于创建一个数据库的实时副本，保证镜像数据和主数据的一致性。\",\"作用\",\"提高系统可用性\",\"灾难恢复\",\"负载均衡\",\"实时备份\",\"升级测试\"]},\"148\":{\"h\":\"什么是数据仓库？\"},\"149\":{\"h\":\"数据库语句 和 的区别是什么？\",\"t\":[\"答案\",\"DELETE用于删除行级别的记录，而DROP用于删除表级别的对象。简单来说，DELETE删除的是表中的数据，而DROP则删除整个表及其关联的数据和对象。\",\"用DELETE之后，被删除的记录将被移除，但表结构和其它数据不受影响。这意味着可以在以后再重新插入数据。使用DROP后，将导致整个表和所有其它数据库对象丢失，除非您事先备份了它们，否则就是很难去恢复。\",\"使用DELETE之后，被删除的记录仍旧保存在数据库日志中，可以通过恢复日志来找回它们。但是，在使用DROP后，已删除的数据无法被恢复，甚至在备份中也无法找回。\",\"DELETE删除表中的数据时，表文件在磁盘上所占空间不会变小，存储空间不会被释放，只是把删除的数据行设置为不可见，而DROP语句删除表结构及所有数据，并将表所占用的空间全部释放。\",\"DELETE属于数据库DML操作语言，会走事务，执行时会触发触发器，而DROP语句是一个DDL操作，用于直接删除一个或多个表、索引、视图等对象。\"]},\"150\":{\"h\":\"什么是数据库系统模式？\"},\"151\":{\"h\":\"数据库的三级模式和是什么？数据库系统的三级模式结构\",\"t\":[\"答案\",\"外模式 也称为用户模式，是用户或应用程序能够看到和访问的数据库的部分。\",\"用户能操作到的数据\",\"概念模式 也称为全局模式，是数据库的整体逻辑结构和组织方式的描述。\",\"逻辑关系\",\"内模式 也称为存储模式，是数据库存储在物理介质上的实际存储结构和存取路径的描述。\",\"存储方式\"]},\"152\":{\"h\":\"什么是数据库的两级映像和数据库的数据独立性？\"},\"153\":{\"h\":\"数据库的活锁与死锁是什么？\",\"t\":[\"活锁（Deadlock）是指系统中的若干进程或线程因争夺资源而陷入一种循环等待的状态，导致它们无法继续执行下去\",\"有一个事务一直在等待资源无法执行。\",\"使用FIFO避免活锁\",\"死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者彼此通信而造成的一种阻塞现象。若无外力作用，这些进程都将无法推进下去。\",\"预防死锁\",\"一次封锁法\",\"一次需要的东西全部加锁，否则就不执行\",\"缺点 降低并发量，难以精确的预估需要使用多少资源\",\"顺序封锁法\",\"按照一定顺序来封锁，必须锁数据1之后才能锁数据2\",\"缺点 维护成本高 难以实现\",\"诊断死锁\",\"超时法\",\"超出时间就认为是死锁，但是会误判一些执行时间较长的事务\",\"事务等待图法\",\"如果出现了回路就出现了死锁\",\"死锁产生的四个必要条件如下：\",\"互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时，若其他进程请求该资源，请求进程只能等待。\",\"不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，只能由获得该资源的进程自己来释放。\",\"请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有。此时，请求进程被阻塞，但对自己已获得的资源保持不放。\",\"循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被链中下一个进程所请求。\"]},\"154\":{\"h\":\"数据库的DBA和DBMS的作用是什么？\",\"t\":[\"答案\",\"数据库管理员（DBA）负责管理数据库系统，包括设计、安全、性能优化和故障排除。\",\"数据库管理系统（DBMS）是一种软件工具，用于管理和操作数据库，包括数据的定义、创建、维护和控制访问。\"]},\"155\":{\"h\":\"故障恢复\"},\"156\":{\"h\":\"事务故障的恢复\",\"t\":[\"反向扫描日志，直到故障事务的开始标志\",\"对日志的更新操作进行逆操作\"]},\"157\":{\"h\":\"系统故障的恢复\",\"t\":[\"tip\",\"系统故障的恢复由系统在重新启动后自动完成。\",\"做法\",\"UNDO故障发生时未完成的事务\",\"REDO已完成的事务\",\"步骤\",\"正向扫描日志文件，故障前开始前已经提交的事务，加入重做队列。还未完成的事务，加入撤销队列\",\"撤销事务进行撤销处理 （反向扫描）\",\"重做事务进行重做处理 （正向扫描）\"]},\"158\":{\"h\":\"介质故障的恢复\",\"t\":[\"装入副本，重做事务\"]},\"159\":{\"c\":[\"note\"]},\"160\":{\"c\":[\"database\"]},\"161\":{\"h\":\"Linux 相关\"},\"162\":{\"h\":\"端口占用\",\"t\":[\"使用ps -ef|grep [占用端口号|进程名称]来查看进程id，获取进程id后使用kill -9 id来强制关闭应用。\",\"使用lsof -i:[端口号] 获取PID\",\"使用killall会杀死指定名称的所有进程killall -9 [process_name]。\",\"使用pkill 也会通过进程名来杀死进程，但是可以将信号发给指定用户(踢某人下线)，较于killall更为灵活 pkill -9 [process_name]。\"]},\"163\":{\"c\":[\"note\"]},\"164\":{\"c\":[\"linux\"]},\"165\":{\"h\":\"待整理的杂记\"},\"166\":{\"h\":\"数据库未整理\"},\"167\":{\"h\":\"概述\"},\"168\":{\"h\":\"术语\",\"t\":[\"DBMS\",\"DBMS是数据库管理系统的简称，是一种重要的程序设计系统。它由一个相互关联的数据集合和一组访问这些数据的程序构成。\",\"数据库\",\"数据库是长期储存在计算机内、有组织、可共享的大量数据的集合。\",\"数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。\",\"数据库系统\",\"数据库系统由数据库、DBMS、应用程序和数据库管理员组成。\",\"数据模型\",\"数据模型是一种形式机制，用于数据建模，描述数据，数据之间的联系，数据的语义，数据上的操作和数据完整性约束的条件。\",\"数据库模式\",\"数据库模式是数据库中使用数据模型对数据建模所产生的设计结果。\",\"对于关系数据库而言，数据库模式由一组关系模式构成。\",\"数据字典\",\"数据字典是DBMS维护的一系列内部表，用来存放元数据[1]。\"]},\"169\":{\"h\":\"\",\"t\":[\"数据定义 提供数据定义语言DDL，用于定义数据库中的数据对象和它们的结构。\",\"数据操纵 提供数据操纵语言DML，用于操纵数据，实现对数据库的基本操作(CRUD)。\",\"数据事务管理和运行管理 统一管理数据，控制对数据的并发访问，保证数据的一致性、完整性、有效性。确保故障时数据库中的数据不被破坏，并且能恢复到一致的状态。\",\"数据存储和查询处理 确定数据的物理组织和存取方式，提供数据的持久存储和有效访问。确定查询处理方法，优化查询处理过程。\",\"数据库的建立和维护 提供实用程序完成数据库的批量装载，数据库转储，介质故障恢复，数据库的重组和性能检测。\",\"其他功能 包含DBMS与卡软件通信，异构数据库之间的数据转换和互操作。\"]},\"170\":{\"h\":\"使用数据库进行信息化管理有哪些好处？\",\"t\":[\"数据库整体结构化\",\"数据可以充分共享\",\"数据具有独立性\",\"数据由DBMS统一管理和控制，使得系统能够为数据管理提供更多支持。 包含事务支持，增强安全性，保证完整性。\",\"数据标准化\"]},\"171\":{\"h\":\"数据模型的三个基本要素是\",\"t\":[\"数据结构 描述数据库的对象和对象之间的联系，是对数据的静态描述。关系模型只有关系一种数据结构。\",\"数据操作 数据库中各种对象允许的操作和操作规则，是对系统的动态描述，定义数据操作的方法有两种：关系代数和关系演算。\",\"完整性约束 关系模型的完整性约束包括实体完整性，参照完整性和用户定义的完整性约束。\"]},\"172\":{\"h\":\"数据库系统的三级模式结构\",\"t\":[\"外模式 也称为用户模式，是用户或应用程序能够看到和访问的数据库的部分。\",\"用户能操作到的数据，外模式可以有多个。\",\"概念模式(模式) 也称为全局模式，是数据库的整体逻辑结构和组织方式的描述。\",\"概念模式只有一个。\",\"内模式 也称为存储模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。 一个数据库只有一个内模式。\"]},\"173\":{\"h\":\"什么是二级映像\",\"t\":[\"三个模式之间的转换\",\"外模式/模式映像\",\"模式/内模式映像\"]},\"174\":{\"h\":\"物理独立性和逻辑独立性\",\"t\":[\"物理独立性 用户的应用程序与数据库的物理存储结构无关，内模式改变后只需要对模式/内模式进行修改，而不用修改应用程序。\",\"逻辑独立性 用户的应用程序和数据库的逻辑结构无关，当模式改变时只需要改变模式/外模型映像即可。\"]},\"175\":{\"h\":\"DBA的主要职责\",\"t\":[\"决定数据库中的信息内容和数据的逻辑结构。\",\"决定数据库的存储结构和存取策略。\",\"定义数据的安全性要求和完整性约束条件。\",\"数据库的日常维护。\"]},\"176\":{\"h\":\"关系数据库\",\"t\":[\"关系 一张二维表，表名就是关系名。\",\"属性 二维表中的列\",\"元组 二维表中的一行\",\"关系模式 二维表的结构\",\"候选码 一个属性集的值可唯一标识一个关系的元素，又不含多余的属性。\",\"主码 关系模式中候选码中选取的一个作为主码。\",\"主属性 包含在任意候选码中的属性。\",\"非主属性 不包含在任意候选码中的属性。\",\"外键 关系模式R中的属性K是其他关系模式的主键，则称K是R的外键。\"]},\"177\":{\"h\":\"实体完整性与参照完整性的规则\",\"t\":[\"实体完整性 关系中元组在组成主键的属性上不能有空值。\",\"参照完整性 K是R1的主键，K也是R2的属性，但是不是R2的主键，那么称为K为R2的外键。 在R2中K的取值要么为空要么是R1某个主键的值。 关系模式R1称为被参照关系，R2称为参照关系。\"]},\"178\":{\"h\":\"自然连接和等值连接的异同\",\"t\":[\"相同点 都是根据属性值相等进行连接。\",\"不同点\",\"自然连接自动去除重复的属性，要求必须是公共属性。\",\"等值连接不自动去除重复的属性，不一定是公共属性。\"]},\"179\":{\"h\":\"完整性约束的作用\",\"t\":[\"保证数据库中数据的正确性。\",\"执行插入操作时检查三种完整性[2]\",\"删除操作时一般检查参照完整性。\"]},\"180\":{\"h\":\"\"},\"181\":{\"h\":\"SQL的基本特点\",\"t\":[\"集多种数据库语言于一体，语言简洁，风格统一。\",\"高度非过程化 只需要支持要做什么，不需要指出怎么做。\",\"面向集合的操作方式 运算对象和结果全都是元组的集合。\",\"语言灵活，功能强大\"]},\"182\":{\"h\":\"SQL的基本功能\",\"t\":[\"定义模式\",\"CRUD\",\"定义视图\",\"定义完整性约束条件\",\"授权\",\"事务\"]},\"183\":{\"h\":\"SQL定义语言DDL包括\",\"t\":[\"模式，表，视图，域，断言的定义，修改，删除\",\"授权的定义和回收\"]},\"184\":{\"h\":\"什么是存储过程\",\"t\":[\"一组为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户通过指定存储过程的名字并给出参数(如果需要参数)来执行它。\",\"一个业务同时对多个表进行操作，可以考虑使用存储过程。\",\"多条件多表联合查询。\"]},\"185\":{\"h\":\"基本表，视图的区别和联系。\",\"t\":[\"基本表 就是其关系元组储存在数据库中的表。\",\"视图 由基本表导出的表，其关系元组是导出时查询的结果。\",\"联系 所有视图都是直接或间接的由基本表定义的。\",\"区别 查询没有区别，只有可更新视图才可以更新。\"]},\"186\":{\"h\":\"视图的优点\",\"t\":[\"查询表达更加简洁。\",\"视图提供了一定程度的逻辑独立性。\",\"视图配合授权使用，可以在某种程度上对数据库起到保护作用。\",\"视图可以让用户以不同角度看待相同的数据。\"]},\"187\":{\"h\":\"嵌入式SQL\",\"t\":[\"SQL只能表达常见的查询，但是不能表达所有的查询。\",\"一些非数据库操作，如文件操作，网络操作等，不能直接用SQL表达。\"]},\"188\":{\"h\":\"完整性和安全性\"},\"189\":{\"h\":\"什么是数据库的完整性？安全性？\",\"t\":[\"完整性 是指数据库中数据的正确性，一致性和相容性。 目的是维护数据一致性。\",\"安全性 是指保护数据库，防止因用户非法使用数据库造成数据泄露，更改和破坏。 目的是防止数据库被未经授权的访问而被恶意修改。\"]},\"190\":{\"h\":\"维护数据库完整性DBMS应该提供哪些支持？\",\"t\":[\"说明和定义完整性约束条件的方法\",\"完整性检查机制\",\"违约处理\"]},\"191\":{\"h\":\"实体完整性的定义和违约处理\",\"t\":[\"定义\",\"建表的时候使用primary key来定义。 一种是定义为列级约束条件，另外一种是定义为表级约束条件。\",\"违约处理 当用户进行操作的时候会检查主码值是否唯一或者为空，如果满足条件则拒绝。\"]},\"192\":{\"h\":\"参照完整性的定义和违约处理\",\"t\":[\"定义 使用foreign key来定义外码，用references来指明这些外码参照哪些表的主码\",\"违约处理\",\"拒绝处理\",\"级联处理\",\"设置为空值\",\"设置为缺省值\"]},\"193\":{\"h\":\"用户自定义的完整性\",\"t\":[\"断言\",\"域约束\",\"属性约束\",\"关系约束\"]},\"194\":{\"h\":\"触发器的作用，什么时候用触发器，创建触发器的步骤？\",\"t\":[\"作用 触发器是一种程序模块，是数据库的一种自动处理机制。主要作用是保证数据库的安全性。\",\"什么时候用触发器\",\"触发器通过事件来激活\",\"dml触发器\",\"ddl触发器\",\"instead of触发器\",\"创建触发器的步骤 \",\"定义触发器\",\"触发条件\",\"声明部分\",\"主体部分\"]},\"195\":{\"h\":\"实现数据库安全性控制的常用方法和技术？\",\"t\":[\"用户表示和鉴别 核对用户信息\",\"存取控制 通过用户权限校验和合法性检查/\",\"视图 对不同的用户定义视图。\",\"审计 建立审计日志。\",\"数据加密 对于传输的信息进行加密。\"]},\"196\":{\"h\":\"关系数据库的设计理论\"},\"197\":{\"h\":\"为什么范式会出现\",\"t\":[\"在数据库中不合理的设计会导致数据冗余，更新异常，插入异常，删除异常。 范式理论的出现是为了解决不合理的数据依赖，使数据库设计规范化。\"]},\"198\":{\"h\":\"解释范式\",\"t\":[\"1NF 每一列都是不可分割的数据项。\",\"2NF 在1NF的基础上，非码属性必须完全依赖于候选码。\",\"3NF 在2NF的基础上，任何非主属性不依赖于其他非主属性。（消除传递依赖）\",\"BCNF 在1NF的基础上，所有的函数依赖，比如x->y,决定因素x中都是候选码。\",\"4NF 关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。\",\"1NF到2NF消除了非码属性对部分函数的依赖。\",\"2NF到3NF消除了非主属性对码的传递函数依赖。\",\"3NF到4NF消除了主属性对码的部分函数依赖和传递函数依赖。\",\"BCNF到4NF消除了非平凡且非函数依赖的多值依赖。\"]},\"199\":{\"h\":\"数据库设计\"},\"200\":{\"h\":\"数据库设计的基本步骤\",\"t\":[\"需求分析\",\"概念结构设计\",\"逻辑结构设计\",\"物理结构设计\",\"数据库实施\",\"数据库运行和维护\"]},\"201\":{\"h\":\"什么是数据库设计\",\"t\":[\"对于一个给定的应用环境，构造最优的数据库模式，建立数据库及其应用系统，使之能够有效的存储数据，满足各种用户的应用需求。\"]},\"202\":{\"h\":\"数据字典的内容及其作用\",\"t\":[\"数据字典通常包括\",\"数据项 包含 \",\"数据项名称\",\"数据项含义\",\"别名\",\"数据类型\",\"取值范围\",\"数据结构 反映了数据之间的组合关系 \",\"数据结构名\",\"含义说明\",\"组成\",\"数据流 数据结构在系统内的传输路径 \",\"数据流名\",\"数据流来源\",\"数据流去向\",\"平均流量\",\"数据存储 数据存储是数据结构停留或保存的地方。\",\"处理过程 处理过程的具体处理逻辑一般用判定表或判定树来描述。\"]},\"203\":{\"h\":\"设计概念系统结构\",\"t\":[\"自顶向下 首先定义全局概念结构框架，然后逐步细化。\",\"自底向上 首先定义局部概念结构框架，然后逐步向上细化。\",\"逐步扩张 首先定义核心概念结构，然后向外扩充。\",\"混合策略 结合起来\"]},\"204\":{\"h\":\"逻辑设计阶段主要内容和步骤\",\"t\":[\"将E-R图转化为关系数据模型\",\"关系模式规范化\",\"关系模式优化\"]},\"205\":{\"h\":\"E-R模式合并时发生的三种冲突\",\"t\":[\"属性冲突 取值范围不相同\",\"命名冲突\",\"结构冲突 同一个对象在不同地方有不同的身份\"]},\"206\":{\"h\":\"物理设计的内容和步骤\",\"t\":[\"确定数据库的物理结构\",\"对所设计的物理结构进行评价\"]},\"207\":{\"h\":\"数据库的运行与维护，从以下几个角度考虑\",\"t\":[\"数据库的转储和恢复。\",\"数据库的安全性，完整性控制。\",\"数据库的性能监督，分析和改造。\",\"数据库的重组织和重改造。\"]},\"208\":{\"h\":\"事务和并发控制\"},\"209\":{\"h\":\"为什么要并发\",\"t\":[\"提高吞吐量和资源的利用率。\",\"减少平均等待事件和平均响应时间。\",\"并发控制能保证事务的ACID性质，主要是保证事务的隔离性和数据库的一致性。\"]},\"210\":{\"h\":\"事务的定义\",\"t\":[\"事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。\"]},\"211\":{\"h\":\"事务的四大特性\",\"t\":[\"原子性 事务中的全部操作是不可分割的。原子性保证了事务的一致性。\",\"一致性 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。满足完整性约束。\",\"隔离性 事务的执行不受其他的事务的干扰。\",\"持久性 对于任意已提交的事务，系统保证该事务对数据库的改变不会丢失，也就是出现故障。\"]},\"212\":{\"h\":\"事务并发执行可能导致哪几类数据不一致？怎么解决？\",\"t\":[\"事务并发执行可能导致\",\"丢失修改\",\"读“脏”数据\",\"不可重复读\",\"数据库系统解决这些问题的主要方法是采用封锁技术。\",\"一级封锁协议可以保证不丢失修改\",\"二级封锁协议可以保证不读“脏”数据\",\"三级封锁协议可以保证可重复读\"]},\"213\":{\"h\":\"封锁的定义\",\"t\":[\"数据库系统中的封锁是指数据库并发执行过程中，将某个事务的所有操作单元全部锁定的操作。\"]},\"214\":{\"h\":\"封锁的类型\",\"t\":[\"排它锁（X锁）\",\"共享锁（S锁）\"]},\"215\":{\"h\":\"锁的类型\",\"t\":[\"活锁又称为饥饿，是一个事务在等待资源的过程中，被无限期地拒绝资源。\",\"死锁两个或多个事务在执行过程中，因竞争资源而造成的一种阻塞的现象，若无外力作用，它们将无法推进下去。\"]},\"216\":{\"h\":\"死锁的检测和预防\",\"t\":[\"检测\",\"超时法\",\"设置时间\",\"超过则死锁\",\"预防\",\"一次封锁法\",\"顺序封锁法\"]},\"217\":{\"h\":\"事务的可串行化\",\"t\":[\"多个事务并发执行，当且仅当结果与某一次顺序串行执行的结果相同。\",\"可串行化调度是并行调度正确的唯一准则。\"]},\"218\":{\"h\":\"描述两段锁结构\",\"t\":[\"第一阶段只加锁，第二段只释放锁。 协议规定\",\"对任何数据读写之前，必须先加锁。\",\"释放了一个锁之后，事务不能再获取其他的锁。\",\"两段锁协议可以保证事务的可串行化，是充分条件。\"]},\"219\":{\"h\":\"数据库恢复技术\"},\"220\":{\"h\":\"故障的种类\",\"t\":[\"事务内部的故障\",\"系统故障\",\"介质故障\",\"计算机病毒\"]},\"221\":{\"h\":\"恢复策略\",\"t\":[\"REDO重做 正向扫描日志文件，对每个REDO事务重新执行日志文件的登记操作\",\"UNDO撤销 逆向扫描日志文件，对每个UNDO事务执行回滚操作\",\"COMMIT提交 将事务的修改永久保存到数据库中\",\"ROLLBACK回滚 将事务的修改从数据库中撤销\"]},\"222\":{\"h\":\"故障的种类和恢复方法\",\"t\":[\"事务故障 表示非预期的不正常程序结束所造成的故障。 强制回滚\",\"系统故障\",\"表示非预期的系统崩溃或断电所造成的故障。\",\"未完成的事务，更新已写入数据库进行UNDO\",\"提交的事务，进行REDO\",\"介质故障 表示非预期的存储介质故障所造成的故障。装入数据库副本。\"]},\"223\":{\"h\":\"数据库转储\",\"t\":[\"按照系统状态分类 \",\"静态转储 停止数据库服务，将数据库的当前状态保存到磁盘上\",\"动态转储 运行事务并转储，但要在转储期间记录数据活动的日志。恢复时通过日志和副本共同恢复\",\"转储量分类 \",\"海量转储 一次转储所有的数据\",\"增量转储 只转储更新过的数据\"]},\"224\":{\"h\":\"使用日志的数据库恢复技术\",\"t\":[\"推迟更新技术 每个数据到达提交点之前不能更新数据库；\",\"一个事务的所有更新操作对应的日志记录写入存储器之前，该事务无法到达提交点。\",\"即时更新技术 所有更新类型的日志安全的存储到存储器之前，事务T不能更新数据库，也无法提交。\",\"元数据就是关于数据的数据。 ↩︎\",\"实体完整性，参照完整性和用户定义的完整性。 ↩︎\"]},\"225\":{\"c\":[\"note\"]},\"226\":{\"c\":[\"database\"]},\"227\":{\"h\":\"未整理\"},\"228\":{\"h\":\"uniapp\",\"t\":[\"uniapp 写h5转APP不支持在拦截器处设置请求头，但是在HBuilderX的内部浏览器运行起来是正常的\",\"解决方法： 在发送请求的时候加上\"]},\"229\":{\"h\":\"gorm\",\"t\":[\"分页模板\",\"type PageDto struct { Page int `form:\\\"page\\\" json:\\\"page\\\"` PageSize int `form:\\\"page_size\\\" json:\\\"page_size\\\"` } func Paginate(req *dto.PageDto) func(db *gorm.DB) *gorm.DB { return func(db *gorm.DB) *gorm.DB { page := req.Page if page == 0 { page = 1 } pageSize := req.PageSize switch { case pageSize > 100: pageSize = 100 case pageSize <= 0: pageSize = 10 } offset := (page - 1) * pageSize return db.Offset(offset).Limit(pageSize) } } \"]},\"230\":{\"h\":\"go 发送邮件模板\",\"t\":[\"注意事项\",\"不可以使用带有%的样式，尽量替换成vh\",\"确定好渲染参数\",\"<!DOCTYPE html> <html xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"utf-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"description\\\" content=\\\"email code\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"> </head> <!--邮箱验证码模板--> <body> <div style=\\\"background-color:#ECECEC; padding: 35px;\\\"> <table cellpadding=\\\"0\\\" align=\\\"center\\\" style=\\\"width: 800px;height: 40vh; margin: 0px auto; text-align: left; position: relative; border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 5px; font-size: 14px; font-family:微软雅黑, 黑体; line-height: 1.5; box-shadow: rgb(153, 153, 153) 0px 0px 5px; border-collapse: collapse; background-position: initial initial; background-repeat: initial initial;background:#fff;\\\"> <tbody> <tr> <th valign=\\\"middle\\\" style=\\\"height: 25px; line-height: 25px; padding: 15px 35px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: RGB(148,0,211); background-color: RGB(148,0,211); border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\\\"> <font face=\\\"微软雅黑\\\" size=\\\"5\\\" style=\\\"color: rgb(255, 255, 255); \\\">基于深度学习的动物图片分类APP 注册</font> </th> </tr> <tr> <td style=\\\"word-break:break-all\\\"> <div style=\\\"padding:25px 35px 40px; background-color:#fff;opacity:0.8;\\\"> <h2 style=\\\"margin: 5px 0px; \\\"> <font color=\\\"#333333\\\" style=\\\"line-height: 20px; \\\"> <font style=\\\"line-height: 22px; \\\" size=\\\"4\\\"> 尊敬的用户：</font> </font> </h2> <!-- 中文 --> <p>您好！感谢您使用<span style=\\\"font-weight: bold;\\\">基于深度学习的动物图片分类APP</span>，您的账号正在进行邮箱验证，验证码为：<font color=\\\"#ff8c00\\\">{%v}</font>，有效期30分钟，请尽快填写验证码完成验证！</p><br> <div style=\\\"width:100vh;margin:0 auto;\\\"> <div style=\\\"padding:10px 10px 0;border-top:1px solid #ccc;color:#747474;margin-bottom:20px;line-height:1.3em;font-size:12px;text-align:right\\\"> <!-- <p>──zarttic</p> --> <br> <p>此为系统邮件，请勿回复<br> Please do not reply to this system email </p> <!--<p>©***</p>--> </div> </div> </div> </td> </tr> </tbody> </table> </div> </body> </html> \"]},\"231\":{\"h\":\"整理简历上的bitcask数据库\",\"t\":[\"KV存储解析\",\"Go 语言数据库/存储项目推荐\"]},\"232\":{\"h\":\"c语言使用宏定义来实现swap函数\",\"t\":[\"使用位运算需要注意交换两个相同变量的值时可能会导致变量变为0。\"]},\"233\":{\"h\":\"ResNet\"},\"234\":{\"h\":\"解决的问题\"},\"235\":{\"h\":\"梯度消失和梯度爆炸\",\"t\":[\"在反向传播过程中，参数每传播一层就会乘一个参数，如果参数的值太小，就会导致梯度消失，如果参数的值太大，就会导致梯度爆炸。\",\"解决方法\",\"权重初始化\",\"数据标准化\",\"bn\"]},\"236\":{\"h\":\"退化问题\"},\"237\":{\"h\":\"复试自我介绍\",\"t\":[\"尊敬的各位老师，下午好。非常有幸有机会能进入到本次复试环节，向各位老师请教和学习。\\n我叫李亚军，来自江苏徐州，本科就读于苏州理工学院 软件工程专业，将于今年六月份毕业。\\n下面我将从学习经历，校内实践，实习经历以及未来规划这四个方面来进行自我介绍。\\n成绩 学习课程 奖学金\\n首先。在学习方面，我已经完成了全部的专业课程学习。通过本科的学习经历，我掌握了计算机的基本原理，以及编程语言的使用方法。在大一那年顺利通过了四级和六级考试，并连续三年获得了人民奖学金。\"]},\"238\":{\"c\":[\"note\"]},\"239\":{\"c\":[\"mess\"]},\"240\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"首先\",{\"1\":{\"237\":1}}],[\"首先定义核心概念结构\",{\"1\":{\"203\":1}}],[\"首先定义局部概念结构框架\",{\"1\":{\"203\":1}}],[\"首先定义全局概念结构框架\",{\"1\":{\"203\":1}}],[\"奖学金\",{\"1\":{\"237\":1}}],[\"学习课程\",{\"1\":{\"237\":1}}],[\"成绩\",{\"1\":{\"237\":1}}],[\"成功的调用返回errnil\",{\"1\":{\"103\":1}}],[\"成功的复制将返回err\",{\"1\":{\"96\":1}}],[\"校内实践\",{\"1\":{\"237\":1}}],[\"软件工程专业\",{\"1\":{\"237\":1}}],[\"向各位老师请教和学习\",{\"1\":{\"237\":1}}],[\"尊敬的各位老师\",{\"1\":{\"237\":1}}],[\"尊敬的用户\",{\"1\":{\"230\":1}}],[\"复试自我介绍\",{\"0\":{\"237\":1}}],[\"复杂业务逻辑\",{\"1\":{\"141\":1}}],[\"退化问题\",{\"0\":{\"236\":1}}],[\"退出当前协程\",{\"1\":{\"119\":1}}],[\"退出应用程序\",{\"1\":{\"96\":1}}],[\"权重初始化\",{\"1\":{\"235\":1}}],[\"梯度消失和梯度爆炸\",{\"0\":{\"235\":1}}],[\"整理简历上的bitcask数据库\",{\"0\":{\"231\":1}}],[\"验证码为\",{\"1\":{\"230\":1}}],[\"您的账号正在进行邮箱验证\",{\"1\":{\"230\":1}}],[\"感谢您使用<span\",{\"1\":{\"230\":1}}],[\"黑体\",{\"1\":{\"230\":1}}],[\"微软雅黑\",{\"1\":{\"230\":2}}],[\"邮箱验证码模板\",{\"1\":{\"230\":1}}],[\"尽量替换成vh\",{\"1\":{\"230\":1}}],[\"`\",{\"1\":{\"229\":2}}],[\"`form\",{\"1\":{\"229\":2}}],[\"json\",{\"1\":{\"229\":2}}],[\"just\",{\"1\":{\"57\":1}}],[\"解决的问题\",{\"0\":{\"234\":1}}],[\"解决方法\",{\"1\":{\"228\":1,\"235\":1}}],[\"解释范式\",{\"0\":{\"198\":1}}],[\"未整理\",{\"0\":{\"227\":1}}],[\"未完成的事务\",{\"1\":{\"222\":1}}],[\"↩︎\",{\"1\":{\"224\":2}}],[\"推迟更新技术\",{\"1\":{\"224\":1}}],[\"增量转储\",{\"1\":{\"223\":1}}],[\"增强安全性\",{\"1\":{\"170\":1}}],[\"海量转储\",{\"1\":{\"223\":1}}],[\"转储量分类\",{\"1\":{\"223\":1}}],[\"动态转储\",{\"1\":{\"223\":1}}],[\"停止数据库服务\",{\"1\":{\"223\":1}}],[\"静态转储\",{\"1\":{\"223\":1}}],[\"按照系统状态分类\",{\"1\":{\"223\":1}}],[\"按照一定顺序来封锁\",{\"1\":{\"153\":1}}],[\"装入数据库副本\",{\"1\":{\"222\":1}}],[\"装入副本\",{\"1\":{\"158\":1}}],[\"强制回滚\",{\"1\":{\"222\":1}}],[\"逆向扫描日志文件\",{\"1\":{\"221\":1}}],[\"恢复时通过日志和副本共同恢复\",{\"1\":{\"223\":1}}],[\"恢复策略\",{\"0\":{\"221\":1}}],[\"恢复技术可以确保以下特性\",{\"1\":{\"129\":1}}],[\"恢复技术通过日志记录和检查点等机制来保证事务的持久性特性\",{\"1\":{\"129\":1}}],[\"恢复技术能保证事务的哪些特性\",{\"0\":{\"129\":1}}],[\"计算机病毒\",{\"1\":{\"220\":1}}],[\"计划\",{\"1\":{\"26\":2}}],[\"释放了一个锁之后\",{\"1\":{\"218\":1}}],[\"释放及其堆栈踪迹\",{\"1\":{\"117\":1}}],[\"必须先加锁\",{\"1\":{\"218\":1}}],[\"必须锁数据1之后才能锁数据2\",{\"1\":{\"153\":1}}],[\"协议规定\",{\"1\":{\"218\":1}}],[\"第二段只释放锁\",{\"1\":{\"218\":1}}],[\"第一阶段只加锁\",{\"1\":{\"218\":1}}],[\"预防\",{\"1\":{\"216\":1}}],[\"预防死锁\",{\"1\":{\"153\":1}}],[\"检测\",{\"1\":{\"216\":1}}],[\"被无限期地拒绝资源\",{\"1\":{\"215\":1}}],[\"被删除的记录仍旧保存在数据库日志中\",{\"1\":{\"149\":1}}],[\"被删除的记录将被移除\",{\"1\":{\"149\":1}}],[\"排它锁\",{\"1\":{\"214\":1}}],[\"排他锁\",{\"1\":{\"127\":1}}],[\"封锁的类型\",{\"0\":{\"214\":1}}],[\"封锁的定义\",{\"0\":{\"213\":1}}],[\"封面\",{\"0\":{\"44\":1}}],[\"脏\",{\"1\":{\"212\":2}}],[\"怎么解决\",{\"0\":{\"212\":1}}],[\"系统故障\",{\"1\":{\"220\":1,\"222\":1}}],[\"系统故障的恢复由系统在重新启动后自动完成\",{\"1\":{\"157\":1}}],[\"系统故障的恢复\",{\"0\":{\"157\":1}}],[\"系统保证该事务对数据库的改变不会丢失\",{\"1\":{\"211\":1}}],[\"满足完整性约束\",{\"1\":{\"211\":1}}],[\"满足各种用户的应用需求\",{\"1\":{\"201\":1}}],[\"减少平均等待事件和平均响应时间\",{\"1\":{\"209\":1}}],[\"减少重复性代码的编写\",{\"1\":{\"141\":1}}],[\"命名冲突\",{\"1\":{\"205\":1}}],[\"命令\",{\"1\":{\"101\":1}}],[\"混合策略\",{\"1\":{\"203\":1}}],[\"逐步扩张\",{\"1\":{\"203\":1}}],[\"逐行处理数据\",{\"1\":{\"140\":1}}],[\"然后向外扩充\",{\"1\":{\"203\":1}}],[\"然后逐步向上细化\",{\"1\":{\"203\":1}}],[\"然后逐步细化\",{\"1\":{\"203\":1}}],[\"然后以状态码2退出\",{\"1\":{\"117\":1}}],[\"平均流量\",{\"1\":{\"202\":1}}],[\"含义说明\",{\"1\":{\"202\":1}}],[\"反映了数据之间的组合关系\",{\"1\":{\"202\":1}}],[\"反向扫描\",{\"1\":{\"157\":1}}],[\"反向扫描日志\",{\"1\":{\"156\":1}}],[\"取值范围不相同\",{\"1\":{\"205\":1}}],[\"取值范围\",{\"1\":{\"202\":1}}],[\"取消这个上下文会释放与之相关的资源\",{\"1\":{\"59\":1}}],[\"取消此上下文将释放与其关联的资源\",{\"1\":{\"57\":1,\"58\":1}}],[\"取消信号和其他请求范围的值\",{\"1\":{\"48\":1}}],[\"别名\",{\"1\":{\"202\":1}}],[\"构造最优的数据库模式\",{\"1\":{\"201\":1}}],[\"决定因素x中都是候选码\",{\"1\":{\"198\":1}}],[\"决定数据库的存储结构和存取策略\",{\"1\":{\"175\":1}}],[\"决定数据库中的信息内容和数据的逻辑结构\",{\"1\":{\"175\":1}}],[\"消除传递依赖\",{\"1\":{\"198\":1}}],[\"任何非主属性不依赖于其他非主属性\",{\"1\":{\"198\":1}}],[\"任务列表\",{\"0\":{\"26\":1}}],[\"范式理论的出现是为了解决不合理的数据依赖\",{\"1\":{\"197\":1}}],[\"插入异常\",{\"1\":{\"197\":1}}],[\"插件来实现\",{\"1\":{\"16\":1}}],[\"建立数据库及其应用系统\",{\"1\":{\"201\":1}}],[\"建立审计日志\",{\"1\":{\"195\":1}}],[\"建表的时候使用primary\",{\"1\":{\"191\":1}}],[\"审计\",{\"1\":{\"195\":1}}],[\"审计跟踪\",{\"1\":{\"141\":1}}],[\"核对用户信息\",{\"1\":{\"195\":1}}],[\"核数量\",{\"1\":{\"121\":1}}],[\"声明部分\",{\"1\":{\"194\":1}}],[\"触发条件\",{\"1\":{\"194\":1}}],[\"触发器通过事件来激活\",{\"1\":{\"194\":1}}],[\"触发器是一种程序模块\",{\"1\":{\"194\":1}}],[\"触发器的作用\",{\"0\":{\"194\":1}}],[\"触发器的主要功能包括\",{\"1\":{\"141\":1}}],[\"触发器在数据库中起到了重要作用\",{\"1\":{\"141\":1}}],[\"触发器会被触发执行\",{\"1\":{\"141\":1}}],[\"触发器与表相关联\",{\"1\":{\"141\":1}}],[\"触发器\",{\"1\":{\"138\":1,\"141\":1}}],[\"什么时候用触发器\",{\"0\":{\"194\":1},\"1\":{\"194\":1}}],[\"什么是存储过程\",{\"0\":{\"184\":1}}],[\"什么是二级映像\",{\"0\":{\"173\":1}}],[\"什么是数据仓库\",{\"0\":{\"148\":1}}],[\"什么是数据库设计\",{\"0\":{\"201\":1}}],[\"什么是数据库的两级映像和数据库的数据独立性\",{\"0\":{\"152\":1}}],[\"什么是数据库的完整性\",{\"0\":{\"145\":1,\"189\":1}}],[\"什么是数据库系统模式\",{\"0\":{\"150\":1}}],[\"什么是数据库镜像\",{\"0\":{\"147\":1}}],[\"什么是数据库范式\",{\"0\":{\"144\":1}}],[\"什么是数据字典\",{\"0\":{\"139\":1}}],[\"什么是触发器\",{\"0\":{\"141\":1}}],[\"什么是游标\",{\"0\":{\"140\":1}}],[\"什么是e\",{\"0\":{\"137\":1}}],[\"什么是视图\",{\"0\":{\"135\":1}}],[\"什么是基本表\",{\"0\":{\"135\":1}}],[\"什么是主键和外键\",{\"0\":{\"134\":1}}],[\"什么是索引\",{\"0\":{\"133\":1}}],[\"什么是事务的\",{\"0\":{\"129\":1}}],[\"什么是事务\",{\"0\":{\"128\":1}}],[\"断言\",{\"1\":{\"193\":1}}],[\"断言的定义\",{\"1\":{\"183\":1}}],[\"级联处理\",{\"1\":{\"192\":1}}],[\"拒绝处理\",{\"1\":{\"192\":1}}],[\"违约处理\",{\"1\":{\"190\":1,\"191\":1,\"192\":1}}],[\"说明和定义完整性约束条件的方法\",{\"1\":{\"190\":1}}],[\"说明数据关系\",{\"1\":{\"139\":1}}],[\"防止因用户非法使用数据库造成数据泄露\",{\"1\":{\"189\":1}}],[\"目的是防止数据库被未经授权的访问而被恶意修改\",{\"1\":{\"189\":1}}],[\"目的是维护数据一致性\",{\"1\":{\"189\":1}}],[\"目标操作系统\",{\"1\":{\"122\":1}}],[\"目标\",{\"1\":{\"117\":1}}],[\"网络操作等\",{\"1\":{\"187\":1}}],[\"嵌入式sql\",{\"0\":{\"187\":1}}],[\"查询表达更加简洁\",{\"1\":{\"186\":1}}],[\"查询没有区别\",{\"1\":{\"185\":1}}],[\"查看运行时的内存情况\",{\"1\":{\"117\":1}}],[\"查看详情\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1}}],[\"区别\",{\"1\":{\"185\":1}}],[\"区别在于copybuffer逐步遍历提供的缓冲区\",{\"1\":{\"97\":1}}],[\"所有更新类型的日志安全的存储到存储器之前\",{\"1\":{\"224\":1}}],[\"所有的函数依赖\",{\"1\":{\"198\":1}}],[\"所有视图都是直接或间接的由基本表定义的\",{\"1\":{\"185\":1}}],[\"所以它不会将读取的eof视为要报告的错误\",{\"1\":{\"96\":1}}],[\"所以\",{\"1\":{\"68\":1}}],[\"所以只要在这个上下文中运行的操作完成\",{\"1\":{\"59\":1}}],[\"联系\",{\"1\":{\"185\":1}}],[\"由基本表导出的表\",{\"1\":{\"185\":1}}],[\"由于竞争资源或者彼此通信而造成的一种阻塞现象\",{\"1\":{\"153\":1}}],[\"由于readall定义为从src读取直到eof\",{\"1\":{\"103\":1}}],[\"基本表\",{\"0\":{\"185\":1},\"1\":{\"185\":1}}],[\"基础接口\",{\"0\":{\"64\":1}}],[\"经编译创建并保存在数据库中\",{\"1\":{\"184\":1}}],[\"修改\",{\"1\":{\"183\":1}}],[\"域约束\",{\"1\":{\"193\":1}}],[\"域\",{\"1\":{\"183\":1}}],[\"授权的定义和回收\",{\"1\":{\"183\":1}}],[\"授权\",{\"1\":{\"182\":1}}],[\"功能强大\",{\"1\":{\"181\":1}}],[\"运算对象和结果全都是元组的集合\",{\"1\":{\"181\":1}}],[\"运行事务并转储\",{\"1\":{\"223\":1}}],[\"运行后的堆内存\",{\"1\":{\"117\":1}}],[\"运行次数\",{\"1\":{\"117\":1}}],[\"运行结果\",{\"1\":{\"98\":1,\"99\":1,\"100\":1,\"102\":1}}],[\"面向集合的操作方式\",{\"1\":{\"181\":1}}],[\"高度非过程化\",{\"1\":{\"181\":1}}],[\"风格统一\",{\"1\":{\"181\":1}}],[\"集多种数据库语言于一体\",{\"1\":{\"181\":1}}],[\"集成测试和系统测试\",{\"1\":{\"138\":1}}],[\"等值连接不自动去除重复的属性\",{\"1\":{\"178\":1}}],[\"都是根据属性值相等进行连接\",{\"1\":{\"178\":1}}],[\"都应当返回\",{\"1\":{\"65\":1}}],[\"相同点\",{\"1\":{\"178\":1}}],[\"相关\",{\"0\":{\"161\":1}}],[\"相关信息\",{\"1\":{\"15\":1}}],[\"那么称为k为r2的外键\",{\"1\":{\"177\":1}}],[\"那些阻塞的goroutine不与gomaxprocs限制冲突\",{\"1\":{\"117\":1}}],[\"又不含多余的属性\",{\"1\":{\"176\":1}}],[\"候选码\",{\"1\":{\"176\":1}}],[\"元数据就是关于数据的数据\",{\"1\":{\"224\":1}}],[\"元数据是数据的数据\",{\"1\":{\"139\":1}}],[\"元组\",{\"1\":{\"176\":1}}],[\"二级封锁协议可以保证不读\",{\"1\":{\"212\":1}}],[\"二级锁协议\",{\"1\":{\"127\":1}}],[\"二维表的结构\",{\"1\":{\"176\":1}}],[\"二维表中的一行\",{\"1\":{\"176\":1}}],[\"二维表中的列\",{\"1\":{\"176\":1}}],[\"物理结构设计\",{\"1\":{\"200\":1}}],[\"物理独立性\",{\"1\":{\"174\":1}}],[\"物理独立性和逻辑独立性\",{\"0\":{\"174\":1}}],[\"物理设计的内容和步骤\",{\"0\":{\"206\":1}}],[\"物理设计\",{\"1\":{\"138\":1}}],[\"三级封锁协议可以保证可重复读\",{\"1\":{\"212\":1}}],[\"三级锁协议\",{\"1\":{\"127\":1}}],[\"三个模式之间的转换\",{\"1\":{\"173\":1}}],[\"模式映像\",{\"1\":{\"173\":1}}],[\"模式\",{\"1\":{\"172\":1,\"173\":1,\"183\":1}}],[\"模型优化\",{\"1\":{\"138\":1}}],[\"参数每传播一层就会乘一个参数\",{\"1\":{\"235\":1}}],[\"参照完整性和用户定义的完整性\",{\"1\":{\"224\":1}}],[\"参照完整性和用户定义的完整性约束\",{\"1\":{\"171\":1}}],[\"参照完整性的定义和违约处理\",{\"0\":{\"192\":1}}],[\"参照完整性\",{\"1\":{\"177\":1}}],[\"参考\",{\"1\":{\"52\":1}}],[\"使之能够有效的存储数据\",{\"1\":{\"201\":1}}],[\"使数据库设计规范化\",{\"1\":{\"197\":1}}],[\"使得系统能够为数据管理提供更多支持\",{\"1\":{\"170\":1}}],[\"使用位运算需要注意交换两个相同变量的值时可能会导致变量变为0\",{\"1\":{\"232\":1}}],[\"使用日志的数据库恢复技术\",{\"0\":{\"224\":1}}],[\"使用foreign\",{\"1\":{\"192\":1}}],[\"使用fifo避免活锁\",{\"1\":{\"153\":1}}],[\"使用数据库进行信息化管理有哪些好处\",{\"0\":{\"170\":1}}],[\"使用pkill\",{\"1\":{\"162\":1}}],[\"使用ps\",{\"1\":{\"162\":1}}],[\"使用killall会杀死指定名称的所有进程killall\",{\"1\":{\"162\":1}}],[\"使用lsof\",{\"1\":{\"162\":1}}],[\"使用delete之后\",{\"1\":{\"149\":1}}],[\"使用drop后\",{\"1\":{\"149\":1}}],[\"使用withvalue的用户应该定义自己的键类型\",{\"1\":{\"55\":1}}],[\"使用上下文的程序应遵循以下规则\",{\"1\":{\"48\":1}}],[\"使用指南\",{\"1\":{\"33\":2},\"2\":{\"3\":1,\"5\":1,\"8\":1,\"29\":1,\"36\":1,\"37\":1,\"39\":1}}],[\"异构数据库之间的数据转换和互操作\",{\"1\":{\"169\":1}}],[\"优化查询处理过程\",{\"1\":{\"169\":1}}],[\"控制对数据的并发访问\",{\"1\":{\"169\":1}}],[\"统一管理数据\",{\"1\":{\"169\":1}}],[\"应用程序和数据库管理员组成\",{\"1\":{\"168\":1}}],[\"较高的数据独立性\",{\"1\":{\"168\":1}}],[\"较于killall更为灵活\",{\"1\":{\"162\":1}}],[\"术语\",{\"0\":{\"168\":1}}],[\"概述\",{\"0\":{\"167\":1}}],[\"概念结构设计\",{\"1\":{\"200\":1}}],[\"概念模式只有一个\",{\"1\":{\"172\":1}}],[\"概念模式\",{\"1\":{\"151\":1,\"172\":1}}],[\"概念设计\",{\"1\":{\"138\":1}}],[\"待整理的杂记\",{\"0\":{\"165\":1}}],[\"踢某人下线\",{\"1\":{\"162\":1}}],[\"获取pid\",{\"1\":{\"162\":1}}],[\"获取进程id后使用kill\",{\"1\":{\"162\":1}}],[\"端口号\",{\"1\":{\"162\":1}}],[\"端口占用\",{\"0\":{\"162\":1}}],[\"来自江苏徐州\",{\"1\":{\"237\":1}}],[\"来执行它\",{\"1\":{\"184\":1}}],[\"来查看进程id\",{\"1\":{\"162\":1}}],[\"来解析\",{\"1\":{\"16\":1}}],[\"占用端口号|进程名称\",{\"1\":{\"162\":1}}],[\"占用的\",{\"1\":{\"117\":1}}],[\"介质故障\",{\"1\":{\"220\":1,\"222\":1}}],[\"介质故障恢复\",{\"1\":{\"169\":1}}],[\"介质故障的恢复\",{\"0\":{\"158\":1}}],[\"介绍\",{\"0\":{\"14\":1},\"1\":{\"14\":1,\"15\":1}}],[\"撤销事务进行撤销处理\",{\"1\":{\"157\":1}}],[\"还未完成的事务\",{\"1\":{\"157\":1}}],[\"还不会编写\",{\"1\":{\"14\":1}}],[\"加入撤销队列\",{\"1\":{\"157\":1}}],[\"加入重做队列\",{\"1\":{\"157\":1}}],[\"加密\",{\"2\":{\"9\":1}}],[\"故障的种类和恢复方法\",{\"0\":{\"222\":1}}],[\"故障的种类\",{\"0\":{\"220\":1}}],[\"故障前开始前已经提交的事务\",{\"1\":{\"157\":1}}],[\"故障恢复\",{\"0\":{\"155\":1}}],[\"正向扫描\",{\"1\":{\"157\":1}}],[\"正向扫描日志文件\",{\"1\":{\"157\":1,\"221\":1}}],[\"正常输入结束read返回eof\",{\"1\":{\"63\":1}}],[\"步骤\",{\"1\":{\"157\":1}}],[\"做法\",{\"1\":{\"157\":1}}],[\"维护数据库完整性dbms应该提供哪些支持\",{\"0\":{\"190\":1}}],[\"维护和控制访问\",{\"1\":{\"154\":1}}],[\"维护成本高\",{\"1\":{\"153\":1}}],[\"创建触发器的步骤\",{\"0\":{\"194\":1},\"1\":{\"194\":1}}],[\"创建\",{\"1\":{\"154\":1}}],[\"性能优化和故障排除\",{\"1\":{\"154\":1}}],[\"性能需求\",{\"1\":{\"138\":1}}],[\"负责管理数据库系统\",{\"1\":{\"154\":1}}],[\"负载均衡\",{\"1\":{\"147\":1}}],[\"链中每一个进程已获得的资源同时被链中下一个进程所请求\",{\"1\":{\"153\":1}}],[\"链接\",{\"1\":{\"4\":1,\"19\":1}}],[\"存取控制\",{\"1\":{\"195\":1}}],[\"存在一种进程资源的循环等待链\",{\"1\":{\"153\":1}}],[\"存储项目推荐\",{\"1\":{\"231\":1}}],[\"存储方式\",{\"1\":{\"151\":1}}],[\"存储空间不会被释放\",{\"1\":{\"149\":1}}],[\"存储过程和函数分别是什么\",{\"0\":{\"132\":1}}],[\"循环等待条件\",{\"1\":{\"153\":1}}],[\"此时\",{\"1\":{\"153\":2}}],[\"此文字有脚注\",{\"1\":{\"24\":1}}],[\"互斥条件\",{\"1\":{\"153\":1}}],[\"互不干扰\",{\"1\":{\"129\":1}}],[\"死锁的检测和预防\",{\"0\":{\"216\":1}}],[\"死锁两个或多个事务在执行过程中\",{\"1\":{\"215\":1}}],[\"死锁产生的四个必要条件如下\",{\"1\":{\"153\":1}}],[\"死锁是指两个或两个以上的进程在执行过程中\",{\"1\":{\"153\":1}}],[\"超过则死锁\",{\"1\":{\"216\":1}}],[\"超出时间就认为是死锁\",{\"1\":{\"153\":1}}],[\"超时法\",{\"1\":{\"153\":1,\"216\":1}}],[\"诊断死锁\",{\"1\":{\"153\":1}}],[\"难以实现\",{\"1\":{\"153\":1}}],[\"难以精确的预估需要使用多少资源\",{\"1\":{\"153\":1}}],[\"顺序封锁法\",{\"1\":{\"153\":1,\"216\":1}}],[\"降低并发量\",{\"1\":{\"153\":1}}],[\"缺点\",{\"1\":{\"153\":2}}],[\"活锁又称为饥饿\",{\"1\":{\"215\":1}}],[\"活锁\",{\"1\":{\"153\":1}}],[\"逻辑结构设计\",{\"1\":{\"200\":1}}],[\"逻辑独立性\",{\"1\":{\"174\":1}}],[\"逻辑关系\",{\"1\":{\"151\":1}}],[\"逻辑设计阶段主要内容和步骤\",{\"0\":{\"204\":1}}],[\"逻辑设计\",{\"1\":{\"138\":1}}],[\"外键\",{\"1\":{\"176\":1}}],[\"外键等约束\",{\"1\":{\"138\":1}}],[\"外模型映像即可\",{\"1\":{\"174\":1}}],[\"外模式可以有多个\",{\"1\":{\"172\":1}}],[\"外模式\",{\"1\":{\"151\":1,\"172\":1,\"173\":1}}],[\"甚至在备份中也无法找回\",{\"1\":{\"149\":1}}],[\"除非您事先备份了它们\",{\"1\":{\"149\":1}}],[\"除非需要多次读取才能使用单次写入\",{\"1\":{\"102\":1}}],[\"升级测试\",{\"1\":{\"147\":1}}],[\"灾难恢复\",{\"1\":{\"147\":1}}],[\"作用\",{\"1\":{\"147\":1,\"194\":1}}],[\"作者设置为\",{\"1\":{\"33\":1}}],[\"再写入数据库\",{\"1\":{\"146\":1}}],[\"先写入日志文件也可以作为备份机制\",{\"1\":{\"146\":1}}],[\"先写入日志文件\",{\"1\":{\"146\":1}}],[\"后写数据库\",{\"0\":{\"146\":1}}],[\"登记日志文件的时候为什么必须要先写日志文件\",{\"0\":{\"146\":1}}],[\"左边都是码\",{\"1\":{\"144\":1}}],[\"多个事务并发执行\",{\"1\":{\"217\":1}}],[\"多个事务并发执行时\",{\"1\":{\"129\":1}}],[\"多条件多表联合查询\",{\"1\":{\"184\":1}}],[\"多版本并发控制\",{\"1\":{\"143\":1}}],[\"乐观控制法\",{\"1\":{\"143\":1}}],[\"时间戳\",{\"1\":{\"143\":1}}],[\"锁的类型\",{\"0\":{\"215\":1}}],[\"锁\",{\"1\":{\"143\":1}}],[\"两段锁协议可以保证事务的可串行化\",{\"1\":{\"218\":1}}],[\"两个数据不一致\",{\"1\":{\"142\":1}}],[\"两个事务同时修改数据\",{\"1\":{\"142\":1}}],[\"两者的区别和联系是什么\",{\"0\":{\"135\":1}}],[\"丢失修改\",{\"1\":{\"142\":1,\"212\":1}}],[\"产生不一致的原因是什么\",{\"0\":{\"142\":1}}],[\"记录操作历史以及审计信息\",{\"1\":{\"141\":1}}],[\"记录日志\",{\"1\":{\"141\":1}}],[\"发送邮件模板\",{\"0\":{\"230\":1}}],[\"发送通知等\",{\"1\":{\"141\":1}}],[\"发生时自动执行\",{\"1\":{\"141\":1}}],[\"自底向上\",{\"1\":{\"203\":1}}],[\"自顶向下\",{\"1\":{\"203\":1}}],[\"自然连接自动去除重复的属性\",{\"1\":{\"178\":1}}],[\"自然连接和等值连接的异同\",{\"0\":{\"178\":1}}],[\"自动化任务\",{\"1\":{\"141\":1}}],[\"自定义对齐\",{\"0\":{\"22\":1}}],[\"自定义标题\",{\"1\":{\"19\":5}}],[\"删除异常\",{\"1\":{\"197\":1}}],[\"删除操作时一般检查参照完整性\",{\"1\":{\"179\":1}}],[\"删除\",{\"1\":{\"141\":1,\"183\":1}}],[\"删除或插入数据\",{\"1\":{\"140\":1}}],[\"有效期30分钟\",{\"1\":{\"230\":1}}],[\"有效性\",{\"1\":{\"169\":1}}],[\"有组织\",{\"1\":{\"168\":1}}],[\"有一个事务一直在等待资源无法执行\",{\"1\":{\"153\":1}}],[\"有什么作用\",{\"0\":{\"144\":1}}],[\"有什么功能\",{\"0\":{\"141\":1}}],[\"有助于确保数据的准确性\",{\"1\":{\"139\":1}}],[\"开发中尽量使用批操作来替代游标\",{\"1\":{\"140\":1}}],[\"开发常用的并发编程技术\",{\"1\":{\"48\":1}}],[\"允许应用程序对查询结果进行修改\",{\"1\":{\"140\":1}}],[\"允许应用程序逐行处理查询结果\",{\"1\":{\"140\":1}}],[\"允许程序员在结果集中移动到特定的行或记录\",{\"1\":{\"140\":1}}],[\"游标操作通常比批量操作效率低\",{\"1\":{\"140\":1}}],[\"游标还可以用于在结果集中更新\",{\"1\":{\"140\":1}}],[\"游标提供了定位和导航查询结果集的能力\",{\"1\":{\"140\":1}}],[\"游标允许程序逐行访问查询结果集中的数据\",{\"1\":{\"140\":1}}],[\"游标的作用包括\",{\"1\":{\"140\":1}}],[\"游标通常用于遍历查询结果集\",{\"1\":{\"140\":1}}],[\"游标是系统为用户开放的缓冲区\",{\"1\":{\"140\":1}}],[\"完整性控制\",{\"1\":{\"207\":1}}],[\"完整性检查机制\",{\"1\":{\"190\":1}}],[\"完整性约束的作用\",{\"0\":{\"179\":1}}],[\"完整性约束\",{\"1\":{\"171\":1}}],[\"完整性\",{\"1\":{\"169\":1,\"189\":1}}],[\"完整性和安全性\",{\"0\":{\"188\":1}}],[\"完整性和可靠性\",{\"1\":{\"146\":1}}],[\"完整性和一致性\",{\"1\":{\"139\":1}}],[\"完全写入\",{\"1\":{\"82\":1}}],[\"清理无用数据\",{\"1\":{\"138\":1}}],[\"定义触发器\",{\"1\":{\"194\":1}}],[\"定义\",{\"1\":{\"191\":1,\"192\":1}}],[\"定义完整性约束条件\",{\"1\":{\"182\":1}}],[\"定义视图\",{\"1\":{\"182\":1}}],[\"定义模式\",{\"1\":{\"182\":1}}],[\"定义数据的安全性要求和完整性约束条件\",{\"1\":{\"175\":1}}],[\"定义数据操作的方法有两种\",{\"1\":{\"171\":1}}],[\"定义事务的一般有哪些\",{\"0\":{\"130\":1}}],[\"定位和导航\",{\"1\":{\"140\":1}}],[\"定期进行维护工作\",{\"1\":{\"138\":1}}],[\"定期备份数据\",{\"1\":{\"138\":1}}],[\"监控数据库性能\",{\"1\":{\"138\":1}}],[\"部署数据库系统到生产环境\",{\"1\":{\"138\":1}}],[\"部署和维护\",{\"1\":{\"138\":1}}],[\"容错测试等\",{\"1\":{\"138\":1}}],[\"确保故障时数据库中的数据不被破坏\",{\"1\":{\"169\":1}}],[\"确保特定操作的一致性和正确性\",{\"1\":{\"141\":1}}],[\"确保数据库系统的功能和性能符合需求\",{\"1\":{\"138\":1}}],[\"确定好渲染参数\",{\"1\":{\"230\":1}}],[\"确定查询处理方法\",{\"1\":{\"169\":1}}],[\"确定数据库的物理结构\",{\"1\":{\"206\":1}}],[\"确定数据库中的实体\",{\"1\":{\"138\":1}}],[\"确定数据的物理组织和存取方式\",{\"1\":{\"169\":1}}],[\"确定数据的存储方式\",{\"1\":{\"138\":1}}],[\"确定数据备份和恢复策略\",{\"1\":{\"138\":1}}],[\"确定系统的需求和目标\",{\"1\":{\"138\":1}}],[\"测试\",{\"1\":{\"138\":1}}],[\"视图可以让用户以不同角度看待相同的数据\",{\"1\":{\"186\":1}}],[\"视图配合授权使用\",{\"1\":{\"186\":1}}],[\"视图提供了一定程度的逻辑独立性\",{\"1\":{\"186\":1}}],[\"视图的优点\",{\"0\":{\"186\":1}}],[\"视图的区别和联系\",{\"0\":{\"185\":1}}],[\"视图\",{\"1\":{\"183\":1,\"185\":1,\"195\":1}}],[\"视图等对象\",{\"1\":{\"149\":1}}],[\"视图等\",{\"1\":{\"138\":1}}],[\"视图有哪些优点\",{\"0\":{\"136\":1}}],[\"编写数据库操作的存储过程\",{\"1\":{\"138\":1}}],[\"编辑此页链接\",{\"1\":{\"4\":1}}],[\"考虑性能优化和扩展性\",{\"1\":{\"138\":1}}],[\"索引\",{\"1\":{\"138\":1,\"149\":1}}],[\"根据物理设计结果\",{\"1\":{\"138\":1}}],[\"根据逻辑设计结果选择合适的数据库管理系统\",{\"1\":{\"138\":1}}],[\"根据需求分析的结果\",{\"1\":{\"138\":1}}],[\"字段\",{\"1\":{\"138\":1}}],[\"字符串写入方法writestring的包装\",{\"1\":{\"89\":1}}],[\"属性冲突\",{\"1\":{\"205\":1}}],[\"属性约束\",{\"1\":{\"193\":1}}],[\"属性\",{\"1\":{\"138\":1,\"176\":1}}],[\"安全性\",{\"0\":{\"189\":1},\"1\":{\"189\":1}}],[\"安全\",{\"1\":{\"154\":1}}],[\"安全测试\",{\"1\":{\"138\":1}}],[\"安全需求等\",{\"1\":{\"138\":1}}],[\"安全的在\",{\"1\":{\"19\":1}}],[\"需求分析\",{\"1\":{\"138\":1,\"200\":1}}],[\"需要在\",{\"1\":{\"52\":1}}],[\"简单来说\",{\"1\":{\"149\":1}}],[\"简单设计\",{\"1\":{\"44\":1}}],[\"简述数据库软件系统建立流程\",{\"0\":{\"138\":1}}],[\"他们的特点和用途是什么\",{\"0\":{\"134\":1}}],[\"已删除的数据无法被恢复\",{\"1\":{\"149\":1}}],[\"已提交的事务对数据库的修改也能够永久保存\",{\"1\":{\"129\":1}}],[\"已整理的杂记\",{\"0\":{\"125\":1}}],[\"避免部分执行的情况\",{\"1\":{\"129\":1}}],[\"避免并发执行时数据不一致的问题\",{\"1\":{\"129\":1}}],[\"持久性\",{\"1\":{\"129\":2,\"211\":1}}],[\"隔离性\",{\"1\":{\"129\":1,\"211\":1}}],[\"要求必须是公共属性\",{\"1\":{\"178\":1}}],[\"要么完全回滚\",{\"1\":{\"129\":1}}],[\"要么全部失败回滚\",{\"1\":{\"129\":1}}],[\"要么全部执行成功\",{\"1\":{\"129\":1}}],[\"要比\",{\"1\":{\"81\":1}}],[\"原子性保证了事务的一致性\",{\"1\":{\"211\":1}}],[\"原子性\",{\"1\":{\"129\":2,\"211\":1}}],[\"特性\",{\"0\":{\"129\":1}}],[\"具有较小的冗余度\",{\"1\":{\"168\":1}}],[\"具有原子性\",{\"1\":{\"128\":1,\"210\":1}}],[\"具体实现方法有\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"106\":1}}],[\"具体实现方法为\",{\"1\":{\"91\":1}}],[\"事务t不能更新数据库\",{\"1\":{\"224\":1}}],[\"事务t在修改数据r之前先加了一个x锁\",{\"1\":{\"127\":1}}],[\"事务故障\",{\"1\":{\"222\":1}}],[\"事务故障的恢复\",{\"0\":{\"156\":1}}],[\"事务内部的故障\",{\"1\":{\"220\":1}}],[\"事务不能再获取其他的锁\",{\"1\":{\"218\":1}}],[\"事务并发执行可能导致\",{\"1\":{\"212\":1}}],[\"事务并发执行可能导致哪几类数据不一致\",{\"0\":{\"212\":1}}],[\"事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态\",{\"1\":{\"211\":1}}],[\"事务执行前后\",{\"1\":{\"129\":1}}],[\"事务中的全部操作是不可分割的\",{\"1\":{\"211\":1}}],[\"事务的可串行化\",{\"0\":{\"217\":1}}],[\"事务的执行不受其他的事务的干扰\",{\"1\":{\"211\":1}}],[\"事务的四大特性\",{\"0\":{\"211\":1}}],[\"事务的定义\",{\"0\":{\"210\":1}}],[\"事务和并发控制\",{\"0\":{\"208\":1}}],[\"事务\",{\"1\":{\"182\":1}}],[\"事务等待图法\",{\"1\":{\"153\":1}}],[\"事务是一个不可分割的工作单元\",{\"1\":{\"129\":1}}],[\"事务是用户定义的数据库操作序列\",{\"1\":{\"128\":1,\"210\":1}}],[\"答案\",{\"1\":{\"128\":1,\"129\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"144\":1,\"146\":1,\"147\":1,\"149\":1,\"151\":1,\"154\":1}}],[\"保证数据库中数据的正确性\",{\"1\":{\"179\":1}}],[\"保证数据的一致性\",{\"1\":{\"169\":1}}],[\"保证完整性\",{\"1\":{\"170\":1}}],[\"保证镜像数据和主数据的一致性\",{\"1\":{\"147\":1}}],[\"保证系统的稳定性和安全性\",{\"1\":{\"138\":1}}],[\"保证了不丢失修改\",{\"1\":{\"127\":1}}],[\"保证事务t是可恢复的\",{\"1\":{\"127\":1}}],[\"保持包之间的接口一致\",{\"1\":{\"48\":1}}],[\"表示非预期的存储介质故障所造成的故障\",{\"1\":{\"222\":1}}],[\"表示非预期的系统崩溃或断电所造成的故障\",{\"1\":{\"222\":1}}],[\"表示非预期的不正常程序结束所造成的故障\",{\"1\":{\"222\":1}}],[\"表示从数据的尾部开始移动指针\",{\"1\":{\"67\":1}}],[\"表示从数据的当前指针位置开始移动指针\",{\"1\":{\"67\":1}}],[\"表示从数据的开头开始移动指针\",{\"1\":{\"67\":1}}],[\"表\",{\"1\":{\"183\":1}}],[\"表名就是关系名\",{\"1\":{\"176\":1}}],[\"表文件在磁盘上所占空间不会变小\",{\"1\":{\"149\":1}}],[\"表锁\",{\"1\":{\"127\":1}}],[\"行锁\",{\"1\":{\"127\":1}}],[\"行为后正确地处理i\",{\"1\":{\"65\":1}}],[\"意向锁\",{\"1\":{\"127\":1}}],[\"读\",{\"1\":{\"212\":1}}],[\"读到的数据是错数据\",{\"1\":{\"142\":1}}],[\"读到了一个数据\",{\"1\":{\"142\":1}}],[\"读到了不正确的数据\",{\"1\":{\"142\":1}}],[\"读脏数据\",{\"1\":{\"142\":1}}],[\"读锁\",{\"1\":{\"127\":1}}],[\"读取数据是一样的\",{\"1\":{\"129\":1}}],[\"读取将返回eof\",{\"1\":{\"100\":1}}],[\"读取单个utf\",{\"1\":{\"87\":1}}],[\"共享锁\",{\"1\":{\"127\":1,\"214\":1}}],[\"独占一个锁\",{\"1\":{\"127\":1}}],[\"描述两段锁结构\",{\"0\":{\"218\":1}}],[\"描述数据库的对象和对象之间的联系\",{\"1\":{\"171\":1}}],[\"描述数据\",{\"1\":{\"168\":1}}],[\"描述和存储\",{\"1\":{\"168\":1}}],[\"描述属性\",{\"1\":{\"139\":1}}],[\"描述一下数据库的锁机制\",{\"0\":{\"127\":1}}],[\"描述调度\",{\"1\":{\"117\":1}}],[\"数据\",{\"1\":{\"212\":2}}],[\"数据加密\",{\"1\":{\"195\":1}}],[\"数据操作\",{\"1\":{\"171\":1}}],[\"数据操纵\",{\"1\":{\"169\":1}}],[\"数据标准化\",{\"1\":{\"170\":1,\"235\":1}}],[\"数据由dbms统一管理和控制\",{\"1\":{\"170\":1}}],[\"数据具有独立性\",{\"1\":{\"170\":1}}],[\"数据可以充分共享\",{\"1\":{\"170\":1}}],[\"数据事务管理和运行管理\",{\"1\":{\"169\":1}}],[\"数据定义\",{\"1\":{\"169\":1}}],[\"数据字典通常包括\",{\"1\":{\"202\":1}}],[\"数据字典的内容及其作用\",{\"0\":{\"202\":1}}],[\"数据字典是dbms维护的一系列内部表\",{\"1\":{\"168\":1}}],[\"数据字典是描述数据库中数据元素的集合\",{\"1\":{\"139\":1}}],[\"数据字典\",{\"1\":{\"168\":1}}],[\"数据上的操作和数据完整性约束的条件\",{\"1\":{\"168\":1}}],[\"数据的语义\",{\"1\":{\"168\":1}}],[\"数据之间的联系\",{\"1\":{\"168\":1}}],[\"数据模型的三个基本要素是\",{\"0\":{\"171\":1}}],[\"数据模型是一种形式机制\",{\"1\":{\"168\":1}}],[\"数据模型\",{\"1\":{\"168\":1}}],[\"数据同步\",{\"1\":{\"141\":1}}],[\"数据约束\",{\"1\":{\"141\":1}}],[\"数据更新\",{\"1\":{\"140\":1}}],[\"数据检索\",{\"1\":{\"140\":1}}],[\"数据存储是数据结构停留或保存的地方\",{\"1\":{\"202\":1}}],[\"数据存储和查询处理\",{\"1\":{\"169\":1}}],[\"数据存储\",{\"1\":{\"139\":1,\"202\":1}}],[\"数据流去向\",{\"1\":{\"202\":1}}],[\"数据流来源\",{\"1\":{\"202\":1}}],[\"数据流名\",{\"1\":{\"202\":1}}],[\"数据流\",{\"1\":{\"139\":1,\"202\":1}}],[\"数据流程图等\",{\"1\":{\"138\":1}}],[\"数据结构在系统内的传输路径\",{\"1\":{\"202\":1}}],[\"数据结构名\",{\"1\":{\"202\":1}}],[\"数据结构\",{\"1\":{\"139\":1,\"171\":1,\"202\":1}}],[\"数据项含义\",{\"1\":{\"202\":1}}],[\"数据项名称\",{\"1\":{\"202\":1}}],[\"数据项\",{\"1\":{\"139\":1,\"202\":1}}],[\"数据类型\",{\"1\":{\"138\":1,\"202\":1}}],[\"数据也不会丢失\",{\"1\":{\"129\":1}}],[\"数据库恢复技术\",{\"0\":{\"219\":1}}],[\"数据库运行和维护\",{\"1\":{\"200\":1}}],[\"数据库实施\",{\"1\":{\"200\":1}}],[\"数据库设计的基本步骤\",{\"0\":{\"200\":1}}],[\"数据库设计\",{\"0\":{\"199\":1}}],[\"数据库中各种对象允许的操作和操作规则\",{\"1\":{\"171\":1}}],[\"数据库中的数据按照一定的数据模型组织\",{\"1\":{\"168\":1}}],[\"数据库中的\",{\"0\":{\"131\":1}}],[\"数据库整体结构化\",{\"1\":{\"170\":1}}],[\"数据库转储\",{\"0\":{\"223\":1},\"1\":{\"169\":1}}],[\"数据库模式由一组关系模式构成\",{\"1\":{\"168\":1}}],[\"数据库模式是数据库中使用数据模型对数据建模所产生的设计结果\",{\"1\":{\"168\":1}}],[\"数据库模式\",{\"1\":{\"168\":1}}],[\"数据库系统中的封锁是指数据库并发执行过程中\",{\"1\":{\"213\":1}}],[\"数据库系统解决这些问题的主要方法是采用封锁技术\",{\"1\":{\"212\":1}}],[\"数据库系统由数据库\",{\"1\":{\"168\":1}}],[\"数据库系统\",{\"1\":{\"168\":1}}],[\"数据库系统的三级模式结构\",{\"0\":{\"151\":1,\"172\":1}}],[\"数据库是长期储存在计算机内\",{\"1\":{\"168\":1}}],[\"数据库未整理\",{\"0\":{\"166\":1}}],[\"数据库管理系统\",{\"1\":{\"154\":1}}],[\"数据库管理员\",{\"1\":{\"154\":1}}],[\"数据库的重组织和重改造\",{\"1\":{\"207\":1}}],[\"数据库的重组和性能检测\",{\"1\":{\"169\":1}}],[\"数据库的性能监督\",{\"1\":{\"207\":1}}],[\"数据库的安全性\",{\"1\":{\"207\":1}}],[\"数据库的转储和恢复\",{\"1\":{\"207\":1}}],[\"数据库的运行与维护\",{\"0\":{\"207\":1}}],[\"数据库的日常维护\",{\"1\":{\"175\":1}}],[\"数据库的建立和维护\",{\"1\":{\"169\":1}}],[\"数据库的dba和dbms的作用是什么\",{\"0\":{\"154\":1}}],[\"数据库的活锁与死锁是什么\",{\"0\":{\"153\":1}}],[\"数据库的三级模式和是什么\",{\"0\":{\"151\":1}}],[\"数据库语句\",{\"0\":{\"149\":1}}],[\"数据库镜像是一种技术\",{\"1\":{\"147\":1}}],[\"数据库完整性有哪些\",{\"0\":{\"145\":1}}],[\"数据库并发控制的主要技术有哪些\",{\"0\":{\"143\":1}}],[\"数据库并发操作带来的数据不一致包括哪些\",{\"0\":{\"142\":1}}],[\"数据库从一个一致性状态转移到另一个一致性状态\",{\"1\":{\"129\":1}}],[\"数据库\",{\"0\":{\"126\":1},\"1\":{\"168\":1}}],[\"数据直接从write复制到相应的read\",{\"1\":{\"102\":1}}],[\"调度器会把go代码同时调度到8个os线程上\",{\"1\":{\"120\":1}}],[\"调用者应将这种情况视作空操作\",{\"1\":{\"65\":1}}],[\"调用者应当总在考虑到错误\",{\"1\":{\"65\":1}}],[\"调用返回的\",{\"1\":{\"58\":1}}],[\"默认值是机器上的cpu核心数量\",{\"1\":{\"120\":1}}],[\"默认gogc=100\",{\"1\":{\"117\":1}}],[\"结构冲突\",{\"1\":{\"205\":1}}],[\"结构体sectionreader的创建方法\",{\"1\":{\"94\":1,\"106\":1}}],[\"结构体\",{\"0\":{\"90\":1}}],[\"结合起来\",{\"1\":{\"203\":1}}],[\"结束协程\",{\"1\":{\"119\":1}}],[\"重做事务\",{\"1\":{\"158\":1}}],[\"重做事务进行重做处理\",{\"1\":{\"157\":1}}],[\"重新等带安排任务\",{\"1\":{\"118\":1}}],[\"重新等待安排任务\",{\"1\":{\"118\":2}}],[\"重要的内容\",{\"1\":{\"25\":1}}],[\"让出cpu时间片\",{\"1\":{\"118\":3}}],[\"堆内存都在不断增大\",{\"1\":{\"117\":1}}],[\"执行插入操作时检查三种完整性\",{\"1\":{\"179\":1}}],[\"执行时会触发触发器\",{\"1\":{\"149\":1}}],[\"执行时间\",{\"1\":{\"117\":1}}],[\"执行\",{\"1\":{\"117\":1}}],[\"下面我将从学习经历\",{\"1\":{\"237\":1}}],[\"下面是一块存在内存泄露的代码段\",{\"1\":{\"117\":1}}],[\"下午好\",{\"1\":{\"237\":1}}],[\"下一个\",{\"1\":{\"65\":1}}],[\"下一篇\",{\"1\":{\"4\":1}}],[\"启动前的堆内存\",{\"1\":{\"117\":1}}],[\"百分比\",{\"1\":{\"117\":1}}],[\"程序已运行的时间\",{\"1\":{\"117\":1}}],[\"程序会释放sigabrt信号以触发核心信息转储\",{\"1\":{\"117\":1}}],[\"例如一个8核心的机器上\",{\"1\":{\"120\":1}}],[\"例如\",{\"1\":{\"117\":1}}],[\"例如在ioutil中的nopcloser方法返回的就是一个readcloser\",{\"1\":{\"71\":1}}],[\"省略运行时系统中的函数\",{\"1\":{\"117\":1}}],[\"失败的程序默认会打印所有现存go程的堆栈踪迹\",{\"1\":{\"117\":1}}],[\"线程和go程的状态\",{\"1\":{\"117\":1}}],[\"进行redo\",{\"1\":{\"222\":1}}],[\"进行排他性控制\",{\"1\":{\"153\":1}}],[\"进行性能测试\",{\"1\":{\"138\":1}}],[\"进行单元测试\",{\"1\":{\"138\":1}}],[\"进行数据导入和数据转换\",{\"1\":{\"138\":1}}],[\"进行引用\",{\"1\":{\"34\":1}}],[\"进程已经保持了至少一个资源\",{\"1\":{\"153\":1}}],[\"进程所获得的资源在未使用完毕之前\",{\"1\":{\"153\":1}}],[\"进程要求对所分配的资源\",{\"1\":{\"153\":1}}],[\"进程数\",{\"1\":{\"117\":1}}],[\"进程\",{\"1\":{\"117\":1}}],[\"且可能会引起性能问题\",{\"1\":{\"140\":1}}],[\"且永不循环利用\",{\"1\":{\"117\":1}}],[\"且在读取数据大小上readat是要比read严格的\",{\"1\":{\"110\":1}}],[\"支持的name如下\",{\"1\":{\"117\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"27\":1}}],[\"环境变量goarch\",{\"1\":{\"117\":1}}],[\"环境变量gotraceback控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出\",{\"1\":{\"117\":1}}],[\"环境变量gomaxprocs限制可以同时运行用户层次的go代码的操作系统进程数\",{\"1\":{\"117\":1}}],[\"环境变量godebug控制运行时的debug输出\",{\"1\":{\"117\":1}}],[\"环境变量gogc设置最初的垃圾收集目标百分比\",{\"1\":{\"117\":1}}],[\"环境变量\",{\"0\":{\"117\":1}}],[\"写h5转app不支持在拦截器处设置请求头\",{\"1\":{\"228\":1}}],[\"写入时遇到的任何错误均报告为读取错误\",{\"1\":{\"112\":1}}],[\"写入必须在读取完成之前完成\",{\"1\":{\"112\":1}}],[\"写作日期为\",{\"1\":{\"33\":1}}],[\"写作指南\",{\"0\":{\"2\":1}}],[\"同一个对象在不同地方有不同的身份\",{\"1\":{\"205\":1}}],[\"同一个事务两次读的数据不一样\",{\"1\":{\"142\":1}}],[\"同样的bytes在read上即使设大了也会没事\",{\"1\":{\"110\":1}}],[\"同时简化开发人员的工作\",{\"1\":{\"141\":1}}],[\"同时也是恢复技术和并发控制的基本构建块\",{\"1\":{\"128\":1,\"210\":1}}],[\"同时调用\",{\"1\":{\"52\":1}}],[\"同时每个页面包含\",{\"1\":{\"10\":1}}],[\"虽然两者的效果很像\",{\"1\":{\"110\":1}}],[\"仅当未读取任何字节时\",{\"1\":{\"104\":1,\"105\":1}}],[\"仅用于其他\",{\"1\":{\"50\":1}}],[\"gc\",{\"1\":{\"117\":7}}],[\"gcdead\",{\"1\":{\"117\":1}}],[\"gctrace\",{\"1\":{\"117\":2}}],[\"general\",{\"1\":{\"103\":1}}],[\"gorm\",{\"0\":{\"229\":1},\"1\":{\"229\":4}}],[\"goroutines\",{\"1\":{\"57\":2}}],[\"goroutine\",{\"1\":{\"52\":1}}],[\"goroutine可以接收到关闭请求\",{\"1\":{\"52\":1}}],[\"go1\",{\"1\":{\"120\":1}}],[\"go语言中可以通过runtime\",{\"1\":{\"120\":1}}],[\"go运行时调度器使用runtime\",{\"1\":{\"120\":1}}],[\"gomaxprocs设置为1os线程数时执行时间要比4os线程数用时更长\",{\"1\":{\"120\":1}}],[\"gomaxprocs参数来确定需要使用多少个os线程来同时执行go代码\",{\"1\":{\"120\":1}}],[\"gomaxprocs\",{\"0\":{\"120\":1},\"1\":{\"120\":3}}],[\"goexit\",{\"0\":{\"119\":1},\"1\":{\"119\":1}}],[\"gosched\",{\"0\":{\"118\":1},\"1\":{\"118\":2}}],[\"godebug=gctrace=1\",{\"1\":{\"117\":1}}],[\"godebug的值是逗号分隔的name=val对\",{\"1\":{\"117\":1}}],[\"goal\",{\"1\":{\"117\":1}}],[\"goarch\",{\"1\":{\"117\":1}}],[\"gopath和goroot构成完整的go环境变量集合\",{\"1\":{\"117\":1}}],[\"goos和goroot在编译时被记录并可用本包的常量和函数获取\",{\"1\":{\"117\":1}}],[\"goos\",{\"0\":{\"122\":1},\"1\":{\"117\":1,\"122\":1}}],[\"go\",{\"0\":{\"230\":1},\"1\":{\"57\":3,\"102\":1,\"103\":1,\"117\":3,\"118\":1,\"119\":1,\"120\":4,\"231\":1}}],[\"golang\",{\"0\":{\"0\":1},\"1\":{\"48\":1,\"52\":1,\"55\":1,\"66\":2},\"2\":{\"1\":1,\"60\":1,\"61\":1,\"114\":1,\"115\":1,\"123\":1,\"124\":1}}],[\"没有对代表go代码的\",{\"1\":{\"117\":1}}],[\"没有内部缓冲\",{\"1\":{\"102\":1,\"112\":1}}],[\"没有价值\",{\"1\":{\"53\":1}}],[\"也无法提交\",{\"1\":{\"224\":1}}],[\"也就是出现故障\",{\"1\":{\"211\":1}}],[\"也就是说\",{\"1\":{\"102\":1}}],[\"也会通过进程名来杀死进程\",{\"1\":{\"162\":1}}],[\"也称为存储模式\",{\"1\":{\"151\":1,\"172\":1}}],[\"也称为全局模式\",{\"1\":{\"151\":1,\"172\":1}}],[\"也称为用户模式\",{\"1\":{\"151\":1,\"172\":1}}],[\"也是执行时间\",{\"1\":{\"117\":1}}],[\"也没有期限\",{\"1\":{\"53\":1}}],[\"管道上的读和写是一对一匹配的\",{\"1\":{\"102\":1}}],[\"类似于unix\",{\"1\":{\"101\":1}}],[\"类型原型\",{\"0\":{\"51\":1,\"52\":1}}],[\"非常有幸有机会能进入到本次复试环节\",{\"1\":{\"237\":1}}],[\"非码属性必须完全依赖于候选码\",{\"1\":{\"198\":1}}],[\"非主属性\",{\"1\":{\"176\":1}}],[\"非平凡且非函数依赖的多值依赖\",{\"1\":{\"144\":1}}],[\"非eof错误\",{\"1\":{\"100\":1}}],[\"非nil的\",{\"1\":{\"65\":1}}],[\"ua\",{\"1\":{\"230\":1}}],[\"utf\",{\"1\":{\"230\":1}}],[\"used\",{\"1\":{\"97\":1}}],[\"uniapp\",{\"0\":{\"228\":1},\"1\":{\"228\":1}}],[\"undo撤销\",{\"1\":{\"221\":1}}],[\"undo故障发生时未完成的事务\",{\"1\":{\"157\":1}}],[\"underlying\",{\"1\":{\"91\":1}}],[\"unexported\",{\"1\":{\"94\":1}}],[\"unexpected\",{\"1\":{\"63\":1}}],[\"unreadrune方法让下一次调用readrune时返回之前调用readrune时返回的同一个utf\",{\"1\":{\"88\":1}}],[\"unreadrune\",{\"1\":{\"88\":1}}],[\"unreadbyte方法让下一次调用readbyte时返回之前调用readbyte时返回的同一个字节\",{\"1\":{\"85\":1}}],[\"unreadbyte\",{\"1\":{\"85\":1}}],[\"unlock\",{\"1\":{\"58\":1}}],[\"until\",{\"1\":{\"58\":1}}],[\"unknown\",{\"1\":{\"50\":1}}],[\"官方示例\",{\"1\":{\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1}}],[\"官方包实现了几个常用的context\",{\"1\":{\"48\":1}}],[\"否则就不执行\",{\"1\":{\"153\":1}}],[\"否则就是很难去恢复\",{\"1\":{\"149\":1}}],[\"否则\",{\"1\":{\"96\":1,\"113\":1}}],[\"否则err将为errclosedpipe\",{\"1\":{\"93\":1}}],[\"否则err为eof\",{\"1\":{\"92\":1}}],[\"供外部调用的函数\",{\"0\":{\"95\":1}}],[\"偏移量为off\",{\"1\":{\"94\":1,\"106\":1}}],[\"注册<\",{\"1\":{\"230\":1}}],[\"注意事项\",{\"1\":{\"230\":1}}],[\"注\",{\"1\":{\"93\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"31\":1}}],[\"阻塞直到写入端到达或写入端被关闭\",{\"1\":{\"92\":1}}],[\"内模式进行修改\",{\"1\":{\"174\":1}}],[\"内模式改变后只需要对模式\",{\"1\":{\"174\":1}}],[\"内模式映像\",{\"1\":{\"173\":1}}],[\"内模式\",{\"1\":{\"151\":1,\"172\":1}}],[\"内含隐藏或非导出字段\",{\"1\":{\"92\":1,\"93\":1}}],[\"内容\",{\"1\":{\"16\":1}}],[\"800px\",{\"1\":{\"230\":1}}],[\"8\",{\"0\":{\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1},\"1\":{\"97\":1,\"117\":2,\"230\":2}}],[\"8字符\",{\"1\":{\"88\":1}}],[\"8编码的unicode字符\",{\"1\":{\"87\":1}}],[\"单个调用将按顺序执行\",{\"1\":{\"102\":1}}],[\"单个字节写入方法的接口\",{\"1\":{\"86\":1}}],[\"单个字节读写接口\",{\"0\":{\"83\":1}}],[\"单词\",{\"1\":{\"23\":1}}],[\"而该资源已被其他进程占有\",{\"1\":{\"153\":1}}],[\"而drop语句是一个ddl操作\",{\"1\":{\"149\":1}}],[\"而drop语句删除表结构及所有数据\",{\"1\":{\"149\":1}}],[\"而drop则删除整个表及其关联的数据和对象\",{\"1\":{\"149\":1}}],[\"而drop用于删除表级别的对象\",{\"1\":{\"149\":1}}],[\"而非seeker\",{\"1\":{\"110\":1}}],[\"而且对象的数据刚好全部读完\",{\"1\":{\"81\":1}}],[\"而且对象的数据没有全部读完\",{\"1\":{\"81\":1}}],[\"而不用修改应用程序\",{\"1\":{\"174\":1}}],[\"而不用于向函数传递可选参数\",{\"1\":{\"48\":1}}],[\"而不是退出\",{\"1\":{\"117\":1}}],[\"而不是erreof\",{\"1\":{\"103\":1}}],[\"而不是分配临时缓冲区\",{\"1\":{\"97\":1}}],[\"而不是等待更多\",{\"1\":{\"65\":1}}],[\"而不是传递可选参数给函数\",{\"1\":{\"55\":1}}],[\"比如x\",{\"1\":{\"198\":1}}],[\"比如在编写存储过程或批处理作业时\",{\"1\":{\"140\":1}}],[\"比如\",{\"1\":{\"81\":1}}],[\"填满\",{\"1\":{\"81\":1}}],[\"填满后再返回\",{\"1\":{\"81\":1}}],[\"值来说明为什么没有将\",{\"1\":{\"81\":1,\"82\":1}}],[\"值查询map中\",{\"1\":{\"52\":1}}],[\"继续向\",{\"1\":{\"81\":1}}],[\"处理过程的具体处理逻辑一般用判定表或判定树来描述\",{\"1\":{\"202\":1}}],[\"处理过程\",{\"1\":{\"139\":1,\"202\":1}}],[\"处开始写入\",{\"1\":{\"82\":1}}],[\"处开始读取\",{\"1\":{\"81\":1}}],[\"处\",{\"1\":{\"82\":1}}],[\"处读出数据到\",{\"1\":{\"81\":1}}],[\"忽略数据的读写指针\",{\"1\":{\"81\":1,\"82\":1}}],[\"出现读取错误为止\",{\"1\":{\"78\":1}}],[\"或reads\",{\"1\":{\"102\":1}}],[\"或直到出错\",{\"1\":{\"98\":1}}],[\"或者\",{\"1\":{\"81\":1}}],[\"或\",{\"1\":{\"78\":1}}],[\"或nil\",{\"1\":{\"52\":1}}],[\"直到故障事务的开始标志\",{\"1\":{\"156\":1}}],[\"直到事务结束后才释放\",{\"1\":{\"127\":1}}],[\"直到事务结束之后释放\",{\"1\":{\"127\":1}}],[\"直到事务结束之后才会释放\",{\"1\":{\"127\":1}}],[\"直到它至少读取了min字节\",{\"1\":{\"104\":1}}],[\"直到它满足从pipereader读取的一个或多个读取\",{\"1\":{\"102\":1}}],[\"直到出现错误或eof\",{\"1\":{\"103\":1}}],[\"直到在src上达到eof或发生错误\",{\"1\":{\"96\":1}}],[\"直到一个或多个读取端消耗完所有数据或读取端关闭为止\",{\"1\":{\"93\":1}}],[\"直到对象的数据流全部写入完毕或遇到写入错误为止\",{\"1\":{\"79\":1}}],[\"直到\",{\"1\":{\"78\":1}}],[\"从以下几个角度考虑\",{\"0\":{\"207\":1}}],[\"从而执行预定义的操作\",{\"1\":{\"141\":1}}],[\"从而实现并行的效果\",{\"1\":{\"120\":1}}],[\"从src复制到dst\",{\"1\":{\"98\":1}}],[\"从数据的起始位置偏移\",{\"1\":{\"81\":1,\"82\":1}}],[\"从对象数据流的\",{\"1\":{\"81\":1}}],[\"从\",{\"1\":{\"78\":1}}],[\"从索引值为3处开始读\",{\"1\":{\"67\":1}}],[\"指定偏移量读写接口\",{\"0\":{\"80\":1}}],[\"指定读写器读写接口\",{\"0\":{\"77\":1}}],[\"指南\",{\"2\":{\"11\":1}}],[\"747474\",{\"1\":{\"230\":1}}],[\"7\",{\"0\":{\"76\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"102\":1},\"1\":{\"117\":2}}],[\"毫无作用\",{\"1\":{\"71\":1}}],[\"组成\",{\"1\":{\"202\":1}}],[\"组合接口是对多个接口进行了组合\",{\"1\":{\"69\":1}}],[\"组合接口\",{\"0\":{\"69\":1}}],[\"组件\",{\"0\":{\"28\":1,\"35\":1},\"1\":{\"35\":1}}],[\"报错后在进行close的操作\",{\"1\":{\"68\":1}}],[\"流\",{\"1\":{\"68\":1}}],[\"只转储更新过的数据\",{\"1\":{\"223\":1}}],[\"只需要支持要做什么\",{\"1\":{\"181\":1}}],[\"只能由获得该资源的进程自己来释放\",{\"1\":{\"153\":1}}],[\"只是把删除的数据行设置为不可见\",{\"1\":{\"149\":1}}],[\"只是简单的实现了\",{\"1\":{\"50\":1}}],[\"只有可更新视图才可以更新\",{\"1\":{\"185\":1}}],[\"只有err\",{\"1\":{\"98\":1}}],[\"只有实现\",{\"1\":{\"68\":1}}],[\"但要在转储期间记录数据活动的日志\",{\"1\":{\"223\":1}}],[\"但对自己已获得的资源保持不放\",{\"1\":{\"153\":1}}],[\"但又提出了新的资源请求\",{\"1\":{\"153\":1}}],[\"但表结构和其它数据不受影响\",{\"1\":{\"149\":1}}],[\"但它们不会影响运行时环境\",{\"1\":{\"117\":1}}],[\"但会重复收集\",{\"1\":{\"117\":1}}],[\"但在readat会报错\",{\"1\":{\"110\":1}}],[\"但将调用read时返回的错误改为err\",{\"1\":{\"93\":1}}],[\"但将调用write时返回的错误改为err\",{\"1\":{\"92\":1}}],[\"但将返回的数据量限制为n个字节\",{\"1\":{\"91\":1,\"99\":1}}],[\"但是在hbuilderx的内部浏览器运行起来是正常的\",{\"1\":{\"228\":1}}],[\"但是不能表达所有的查询\",{\"1\":{\"187\":1}}],[\"但是不是r2的主键\",{\"1\":{\"177\":1}}],[\"但是可以将信号发给指定用户\",{\"1\":{\"162\":1}}],[\"但是会误判一些执行时间较长的事务\",{\"1\":{\"153\":1}}],[\"但是\",{\"1\":{\"149\":1}}],[\"但是因为某个事务被撤销\",{\"1\":{\"142\":1}}],[\"但是readerat读取内容是无视seeker偏移量的\",{\"1\":{\"110\":1}}],[\"但是里面的close就是个空函数\",{\"1\":{\"71\":1}}],[\"但是行为没有定义\",{\"1\":{\"68\":1}}],[\"但提供的缓冲不够大\",{\"1\":{\"63\":1}}],[\"方法进行创建\",{\"1\":{\"93\":1}}],[\"方法的包装\",{\"1\":{\"87\":1}}],[\"方法\",{\"1\":{\"68\":1}}],[\"方法原型\",{\"0\":{\"53\":1,\"54\":1,\"55\":1}}],[\"带有close\",{\"1\":{\"68\":1}}],[\"光标默认在文件开头\",{\"1\":{\"67\":1}}],[\"打印输出err\",{\"1\":{\"96\":1}}],[\"打印按钮\",{\"1\":{\"10\":1}}],[\"打开文件后\",{\"1\":{\"67\":1}}],[\"每一列都是不可分割的数据项\",{\"1\":{\"198\":1}}],[\"每一个变量的具体定义\",{\"1\":{\"117\":1}}],[\"每一行打印的日志格式如下\",{\"1\":{\"117\":1}}],[\"每次\",{\"1\":{\"117\":1}}],[\"每次对pipewriter的写入都将阻塞\",{\"1\":{\"102\":1}}],[\"每次读取更新n以标记剩余可以读取的字节数\",{\"1\":{\"91\":1,\"99\":1}}],[\"每次的读写操作都是从指针位置开始的\",{\"1\":{\"67\":1}}],[\"每个数据到达提交点之前不能更新数据库\",{\"1\":{\"224\":1}}],[\"每个事务的操作应该与其他事务相互隔离\",{\"1\":{\"129\":1}}],[\"每个对象申请在独立的页和地址\",{\"1\":{\"117\":1}}],[\"每个写入一次写入每个列出的写入器\",{\"1\":{\"101\":1}}],[\"每个\",{\"1\":{\"35\":1}}],[\"设置时间\",{\"1\":{\"216\":1}}],[\"设置为缺省值\",{\"1\":{\"192\":1}}],[\"设置为空值\",{\"1\":{\"192\":1}}],[\"设置go运行时\",{\"1\":{\"120\":2}}],[\"设置gogc=off\",{\"1\":{\"117\":1}}],[\"设置schedtrace为x并设置其为1\",{\"1\":{\"117\":1}}],[\"设置其为x\",{\"1\":{\"117\":1}}],[\"设置其为2\",{\"1\":{\"117\":1}}],[\"设置其为1\",{\"1\":{\"117\":4}}],[\"设置缓冲区\",{\"1\":{\"67\":1}}],[\"设置下一次读写操作的指针位置\",{\"1\":{\"67\":1}}],[\"设计概念系统结构\",{\"0\":{\"203\":1}}],[\"设计物理存储结构\",{\"1\":{\"138\":1}}],[\"设计数据库表结构\",{\"1\":{\"138\":1}}],[\"设计数据库系统的概念模型\",{\"1\":{\"138\":1}}],[\"设计\",{\"0\":{\"43\":1}}],[\"用references来指明这些外码参照哪些表的主码\",{\"1\":{\"192\":1}}],[\"用户表示和鉴别\",{\"1\":{\"195\":1}}],[\"用户自定义的完整性\",{\"0\":{\"193\":1}}],[\"用户通过指定存储过程的名字并给出参数\",{\"1\":{\"184\":1}}],[\"用户的应用程序和数据库的逻辑结构无关\",{\"1\":{\"174\":1}}],[\"用户的应用程序与数据库的物理存储结构无关\",{\"1\":{\"174\":1}}],[\"用户能操作到的数据\",{\"1\":{\"151\":1,\"172\":1}}],[\"用delete之后\",{\"1\":{\"149\":1}}],[\"用来存放元数据\",{\"1\":{\"168\":1}}],[\"用来管理数据\",{\"1\":{\"139\":1}}],[\"用来移动数据的读写指针\",{\"1\":{\"67\":1}}],[\"用法都是开启某某连接\",{\"1\":{\"68\":1}}],[\"用于操纵数据\",{\"1\":{\"169\":1}}],[\"用于定义数据库中的数据对象和它们的结构\",{\"1\":{\"169\":1}}],[\"用于数据建模\",{\"1\":{\"168\":1}}],[\"用于管理和操作数据库\",{\"1\":{\"154\":1}}],[\"用于直接删除一个或多个表\",{\"1\":{\"149\":1}}],[\"用于创建一个数据库的实时副本\",{\"1\":{\"147\":1}}],[\"用于存放sql语句的执行结果\",{\"1\":{\"140\":1}}],[\"用于\",{\"1\":{\"50\":1}}],[\"即时更新技术\",{\"1\":{\"224\":1}}],[\"即在一段时间内某资源仅为一个进程所占有\",{\"1\":{\"153\":1}}],[\"即便它是临时的\",{\"1\":{\"66\":1}}],[\"即使系统发生故障\",{\"1\":{\"129\":1}}],[\"即使\",{\"1\":{\"65\":1}}],[\"若其他进程请求该资源\",{\"1\":{\"153\":1}}],[\"若无外力作用\",{\"1\":{\"153\":1,\"215\":1}}],[\"若\",{\"1\":{\"66\":1}}],[\"若一些数据可用但不到\",{\"1\":{\"65\":1}}],[\"||\",{\"1\":{\"65\":1}}],[\"实习经历以及未来规划这四个方面来进行自我介绍\",{\"1\":{\"237\":1}}],[\"实体完整性的定义和违约处理\",{\"0\":{\"191\":1}}],[\"实体完整性\",{\"1\":{\"177\":1,\"224\":1}}],[\"实体完整性与参照完整性的规则\",{\"0\":{\"177\":1}}],[\"实时备份\",{\"1\":{\"147\":1}}],[\"实施和编码\",{\"1\":{\"138\":1}}],[\"实现数据库安全性控制的常用方法和技术\",{\"0\":{\"195\":1}}],[\"实现对数据库的基本操作\",{\"1\":{\"169\":1}}],[\"实现该副本\",{\"1\":{\"96\":2}}],[\"实现了接口seeker的seek方法\",{\"1\":{\"94\":1,\"106\":1,\"110\":1}}],[\"实现了接口readerat的readat方法\",{\"1\":{\"94\":1,\"106\":1,\"109\":1}}],[\"实现了接口reader的read方法\",{\"1\":{\"94\":1,\"106\":1,\"108\":1}}],[\"实例化一个长度为4的\",{\"1\":{\"65\":1}}],[\"实例演示\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"实际上只定义了接口\",{\"1\":{\"48\":1}}],[\"实际的文章内容\",{\"1\":{\"7\":1}}],[\"前处理\",{\"1\":{\"65\":1}}],[\"无论如何\",{\"1\":{\"65\":1}}],[\"就会导致梯度爆炸\",{\"1\":{\"235\":1}}],[\"就会导致梯度消失\",{\"1\":{\"235\":1}}],[\"就会触发垃圾收集\",{\"1\":{\"117\":1}}],[\"就会返回\",{\"1\":{\"92\":1,\"93\":1}}],[\"就会返回本错误\",{\"1\":{\"63\":1}}],[\"就是其关系元组储存在数据库中的表\",{\"1\":{\"185\":1}}],[\"就是\",{\"1\":{\"65\":1,\"78\":1,\"79\":1}}],[\"可串行化调度是并行调度正确的唯一准则\",{\"1\":{\"217\":1}}],[\"可共享的大量数据的集合\",{\"1\":{\"168\":1}}],[\"可重复读\",{\"1\":{\"127\":1}}],[\"可用于连接期望io\",{\"1\":{\"102\":1}}],[\"可能会导致错误\",{\"1\":{\"85\":1,\"88\":1}}],[\"可能的返回不是\",{\"1\":{\"65\":1}}],[\"可以考虑使用存储过程\",{\"1\":{\"184\":1}}],[\"可以被各种用户共享\",{\"1\":{\"168\":1}}],[\"可以通过恢复日志来找回它们\",{\"1\":{\"149\":1}}],[\"可以帮助确保数据的完整性\",{\"1\":{\"141\":1}}],[\"可以用于在多个表之间保持数据同步\",{\"1\":{\"141\":1}}],[\"可以用于实现复杂的业务逻辑\",{\"1\":{\"141\":1}}],[\"可以用来跟踪数据库操作\",{\"1\":{\"141\":1}}],[\"可以用来实施数据完整性约束\",{\"1\":{\"141\":1}}],[\"可以在某种程度上对数据库起到保护作用\",{\"1\":{\"186\":1}}],[\"可以在特定数据库操作发生时自动执行一系列操作\",{\"1\":{\"141\":1}}],[\"可以在结果集中检索数据\",{\"1\":{\"140\":1}}],[\"可以在系统调用中阻塞的go程数的限制\",{\"1\":{\"117\":1}}],[\"可以确保数据的一致性\",{\"1\":{\"146\":1}}],[\"可以确保即使系统崩溃\",{\"1\":{\"129\":1}}],[\"可以确保事务要么完全执行成功\",{\"1\":{\"129\":1}}],[\"可以防止丢失修改和读脏数据\",{\"1\":{\"127\":1}}],[\"可以方式丢失修改\",{\"1\":{\"127\":1}}],[\"可以与相同操作的人共享\",{\"1\":{\"127\":1}}],[\"可以看到程序在运行过程中\",{\"1\":{\"117\":1}}],[\"可以看的出来sectionreader是根据readerat实现的\",{\"1\":{\"110\":1}}],[\"可以使用组合接口进行传递\",{\"1\":{\"69\":1}}],[\"可以特定行为来实现\",{\"1\":{\"68\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"13\":1}}],[\"错误才是eof\",{\"1\":{\"104\":1,\"105\":1}}],[\"错误\",{\"1\":{\"65\":1}}],[\"错误或从随后的调用中返回错误\",{\"1\":{\"65\":1}}],[\"错误变量\",{\"0\":{\"63\":1}}],[\"情况\",{\"1\":{\"65\":1}}],[\">基于深度学习的动物图片分类app<\",{\"1\":{\"230\":1}}],[\">基于深度学习的动物图片分类app\",{\"1\":{\"230\":1}}],[\">y\",{\"1\":{\"198\":1}}],[\">\",{\"1\":{\"65\":2,\"81\":1,\"117\":2,\"229\":1,\"230\":20}}],[\"个字节准确地读取到buf中\",{\"1\":{\"105\":1}}],[\"个字节后遇到一个错误或\",{\"1\":{\"65\":1}}],[\"个字节\",{\"1\":{\"65\":1}}],[\"left\",{\"1\":{\"230\":5}}],[\"len个字节从\",{\"1\":{\"66\":1}}],[\"len个字节读取到\",{\"1\":{\"65\":1}}],[\"len\",{\"1\":{\"65\":3,\"66\":2,\"81\":3,\"82\":1,\"105\":1}}],[\"line\",{\"1\":{\"230\":5}}],[\"linux\",{\"0\":{\"161\":1},\"2\":{\"164\":1}}],[\"limit\",{\"1\":{\"229\":1}}],[\"limitreader\",{\"0\":{\"99\":1},\"1\":{\"91\":1,\"99\":2}}],[\"limitedreader从r读取\",{\"1\":{\"91\":1,\"99\":1}}],[\"limitedreader\",{\"0\":{\"91\":1},\"1\":{\"91\":1}}],[\"language\",{\"1\":{\"103\":1}}],[\"lr\",{\"1\":{\"99\":2}}],[\"longbuf\",{\"1\":{\"104\":2,\"105\":2}}],[\"log\",{\"1\":{\"96\":3,\"97\":3,\"98\":2,\"99\":2,\"100\":2,\"101\":2,\"102\":2,\"103\":2,\"104\":2,\"105\":2,\"107\":2,\"108\":2,\"109\":2,\"110\":3,\"112\":2,\"113\":2}}],[\"lock\",{\"1\":{\"58\":1}}],[\"将于今年六月份毕业\",{\"1\":{\"237\":1}}],[\"将数据库的当前状态保存到磁盘上\",{\"1\":{\"223\":1}}],[\"将事务的修改从数据库中撤销\",{\"1\":{\"221\":1}}],[\"将事务的修改永久保存到数据库中\",{\"1\":{\"221\":1}}],[\"将某个事务的所有操作单元全部锁定的操作\",{\"1\":{\"213\":1}}],[\"将e\",{\"1\":{\"204\":1}}],[\"将导致整个表和所有其它数据库对象丢失\",{\"1\":{\"149\":1}}],[\"将概念模型转换为数据库模式\",{\"1\":{\"138\":1}}],[\"将其写入复制到所有提供的写入器中\",{\"1\":{\"101\":1}}],[\"将副本从src复制到dst\",{\"1\":{\"96\":1}}],[\"将设置err\",{\"1\":{\"87\":1}}],[\"将返回\",{\"1\":{\"81\":2}}],[\"将等待所有数据可用之后\",{\"1\":{\"81\":1}}],[\"将对象的数据流写入到\",{\"1\":{\"79\":1}}],[\"将内容读到缓冲区内\",{\"1\":{\"67\":1}}],[\"将内容读至buf\",{\"1\":{\"65\":1}}],[\"将\",{\"1\":{\"65\":1,\"66\":1,\"82\":1}}],[\"却没有显式的返回错误\",{\"1\":{\"63\":1}}],[\"某些使用io\",{\"1\":{\"63\":1}}],[\"会走事务\",{\"1\":{\"149\":1}}],[\"会打印所有现存go程包括运行时函数的堆栈踪迹\",{\"1\":{\"117\":2}}],[\"会采用默认行为\",{\"1\":{\"117\":1}}],[\"会完全忽略所有go程的堆栈踪迹\",{\"1\":{\"117\":1}}],[\"会完全关闭垃圾收集\",{\"1\":{\"117\":1}}],[\"会写入同样的概述\",{\"1\":{\"117\":1}}],[\"会导致一个被覆盖\",{\"1\":{\"142\":1}}],[\"会导致调度程序每隔x毫秒输出详细的多行信息\",{\"1\":{\"117\":1}}],[\"会导致调度程序每隔x毫秒输出单行信息到标准错误输出\",{\"1\":{\"117\":1}}],[\"会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈\",{\"1\":{\"117\":1}}],[\"会导致每次垃圾回收器触发一行日志\",{\"1\":{\"117\":1}}],[\"会导致每次分配都会记录每一个对象的分配\",{\"1\":{\"117\":1}}],[\"会导致分配器运行模式为\",{\"1\":{\"117\":1}}],[\"会返回错误\",{\"1\":{\"84\":1}}],[\"会返回errclosedpipe\",{\"1\":{\"63\":1}}],[\"会照例返回可用的东西\",{\"1\":{\"65\":1}}],[\"会使用\",{\"1\":{\"16\":1}}],[\"并连续三年获得了人民奖学金\",{\"1\":{\"237\":1}}],[\"并发控制能保证事务的acid性质\",{\"1\":{\"209\":1}}],[\"并将表所占用的空间全部释放\",{\"1\":{\"149\":1}}],[\"并将这些抽象成为实用性的功能和一些其他相关的接口\",{\"1\":{\"62\":1}}],[\"并帮助数据库管理和维护\",{\"1\":{\"139\":1}}],[\"并进行系统上线\",{\"1\":{\"138\":1}}],[\"并且能恢复到一致的状态\",{\"1\":{\"169\":1}}],[\"并且易于拓展\",{\"1\":{\"168\":1}}],[\"并且如果可能会采用操作系统特定的方式崩溃\",{\"1\":{\"117\":1}}],[\"并且在写操作时将数据附加到文件尾部\",{\"1\":{\"66\":1}}],[\"并返回其读取的数据\",{\"1\":{\"103\":1}}],[\"并返回rune及其字节大小\",{\"1\":{\"87\":1}}],[\"并在n个字节后以eof停止\",{\"1\":{\"94\":1,\"106\":1,\"107\":1}}],[\"并作为传入请求的顶级上下文\",{\"1\":{\"53\":1}}],[\"包括数据的定义\",{\"1\":{\"154\":1}}],[\"包括设计\",{\"1\":{\"154\":1}}],[\"包括表空间\",{\"1\":{\"138\":1}}],[\"包括实体关系图\",{\"1\":{\"138\":1}}],[\"包括功能需求\",{\"1\":{\"138\":1}}],[\"包括程序延迟和资源等待\",{\"1\":{\"117\":1}}],[\"包装\",{\"1\":{\"86\":1}}],[\"包中的那些\",{\"1\":{\"62\":1}}],[\"包含在任意候选码中的属性\",{\"1\":{\"176\":1}}],[\"包含事务支持\",{\"1\":{\"170\":1}}],[\"包含dbms与卡软件通信\",{\"1\":{\"169\":1}}],[\"包含内存回收的概要信息和暂停的时间\",{\"1\":{\"117\":1}}],[\"包含\",{\"1\":{\"19\":1,\"202\":1}}],[\"告诉阻塞函数在超时过后应该放弃它的工作\",{\"1\":{\"59\":1}}],[\"告诉阻塞函数一旦到达该时间就应该结束它的工作\",{\"1\":{\"58\":1}}],[\"则称k是r的外键\",{\"1\":{\"176\":1}}],[\"则直接调用其writestring方法\",{\"1\":{\"113\":1}}],[\"则readfull返回errunexpectedeof\",{\"1\":{\"105\":1}}],[\"则readatleast返回errshortbuffer\",{\"1\":{\"104\":1}}],[\"则readatleast返回errunexpectedeof\",{\"1\":{\"104\":1}}],[\"则read将返回该错误\",{\"1\":{\"100\":1}}],[\"则整个写操作将停止并返回错误\",{\"1\":{\"101\":1}}],[\"则使用该接口实现副本\",{\"1\":{\"98\":1}}],[\"则buf将不用于执行复制\",{\"1\":{\"97\":1}}],[\"则copybuffer会panic报错\",{\"1\":{\"97\":1}}],[\"则分配一个\",{\"1\":{\"97\":1}}],[\"则通过调用dst\",{\"1\":{\"96\":1}}],[\"则通过调用src\",{\"1\":{\"96\":1}}],[\"则该错误将作为err返回\",{\"1\":{\"93\":1}}],[\"则返回错误为err\",{\"1\":{\"92\":1}}],[\"则返回ok==false\",{\"1\":{\"52\":1}}],[\"则必须返回一个\",{\"1\":{\"82\":1}}],[\"则err\",{\"1\":{\"81\":2}}],[\"则需要返回一个\",{\"1\":{\"81\":1}}],[\"则应返回错误errunexpectedeof或者其它给出更多细节的错误\",{\"1\":{\"63\":1}}],[\"则释放资源\",{\"1\":{\"59\":1}}],[\"其关系元组是导出时查询的结果\",{\"1\":{\"185\":1}}],[\"其他功能\",{\"1\":{\"169\":1}}],[\"其目的是什么\",{\"0\":{\"145\":1}}],[\"其作用包括定义数据元素\",{\"1\":{\"139\":1}}],[\"其作用是什么\",{\"0\":{\"139\":1,\"140\":1}}],[\"其作用是\",{\"0\":{\"133\":1}}],[\"其包括\",{\"1\":{\"139\":1}}],[\"其中a\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"其中与键关联的值为val\",{\"1\":{\"55\":1}}],[\"其截止日期调整为不迟于d\",{\"1\":{\"58\":1}}],[\"0px\",{\"1\":{\"230\":6}}],[\"0775\",{\"1\":{\"66\":1}}],[\"0\",{\"1\":{\"58\":1,\"65\":6,\"66\":1,\"67\":2,\"92\":1,\"93\":1,\"117\":3,\"118\":1,\"120\":2,\"229\":2,\"230\":6}}],[\"rgb\",{\"1\":{\"230\":4}}],[\"right\",{\"1\":{\"230\":5}}],[\"radius\",{\"1\":{\"230\":8}}],[\"rollback回滚\",{\"1\":{\"221\":1}}],[\"r模式合并时发生的三种冲突\",{\"0\":{\"205\":1}}],[\"r模型向关系模型的转换规则是什么\",{\"0\":{\"137\":1}}],[\"r图转化为关系数据模型\",{\"1\":{\"204\":1}}],[\"r图的设计原则是什么\",{\"0\":{\"137\":1}}],[\"r图\",{\"0\":{\"137\":1}}],[\"r3\",{\"1\":{\"100\":2}}],[\"r2称为参照关系\",{\"1\":{\"177\":1}}],[\"r2\",{\"1\":{\"97\":2,\"100\":2}}],[\"r1\",{\"1\":{\"97\":2,\"100\":2}}],[\"run\",{\"1\":{\"117\":1}}],[\"runtime\",{\"0\":{\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1},\"1\":{\"117\":1,\"118\":3,\"119\":2,\"120\":6,\"121\":2,\"122\":2}}],[\"runtime包提供和go运行时环境的互操作\",{\"1\":{\"116\":1}}],[\"runtime标准库\",{\"0\":{\"116\":1}}],[\"runescanner\",{\"1\":{\"88\":1}}],[\"runescanner接口在基本的readrune方法之外还添加了unreadrune方法\",{\"1\":{\"88\":1}}],[\"runescanner接口\",{\"0\":{\"88\":1}}],[\"rune\",{\"1\":{\"87\":1}}],[\"runereader\",{\"1\":{\"87\":1,\"88\":1}}],[\"runereader接口\",{\"0\":{\"87\":1}}],[\"running\",{\"1\":{\"57\":3}}],[\"r\",{\"1\":{\"78\":5,\"87\":1,\"91\":2,\"92\":3,\"94\":1,\"96\":2,\"98\":2,\"99\":3,\"100\":2,\"101\":2,\"102\":2,\"103\":3,\"104\":5,\"105\":4,\"106\":1,\"107\":3,\"108\":2,\"109\":2,\"110\":2,\"111\":2,\"112\":6}}],[\"rdwr|os\",{\"1\":{\"66\":1}}],[\"reply\",{\"1\":{\"230\":1}}],[\"repeat\",{\"1\":{\"230\":1}}],[\"relative\",{\"1\":{\"230\":1}}],[\"req\",{\"1\":{\"229\":3}}],[\"redo重做\",{\"1\":{\"221\":1}}],[\"redo已完成的事务\",{\"1\":{\"157\":1}}],[\"reused\",{\"1\":{\"97\":1}}],[\"remaining\",{\"1\":{\"91\":1}}],[\"readfull将r中的len\",{\"1\":{\"105\":1}}],[\"readfull\",{\"0\":{\"105\":1},\"1\":{\"105\":3}}],[\"readfrom\",{\"1\":{\"78\":2,\"96\":1}}],[\"readall从r读取\",{\"1\":{\"103\":1}}],[\"readall\",{\"0\":{\"103\":1},\"1\":{\"103\":2,\"112\":1}}],[\"readatleast从r读取到buf\",{\"1\":{\"104\":1}}],[\"readatleast\",{\"0\":{\"104\":1},\"1\":{\"104\":4}}],[\"readat\",{\"0\":{\"109\":1},\"1\":{\"81\":4,\"94\":1,\"106\":1,\"109\":2}}],[\"read实现了标准的读取接口\",{\"1\":{\"92\":1}}],[\"read在n<=0时或基础r返回eof时返回eof\",{\"1\":{\"91\":1,\"99\":1}}],[\"readrune\",{\"1\":{\"87\":2}}],[\"readbyte读取输入中的单个字节并返回\",{\"1\":{\"84\":1}}],[\"readbyte\",{\"1\":{\"84\":1}}],[\"readseeker\",{\"1\":{\"74\":1}}],[\"readseeker接口聚合了基本的读取和移位操作\",{\"1\":{\"74\":1}}],[\"readseeker接口\",{\"0\":{\"74\":1}}],[\"readwriteseeker\",{\"1\":{\"76\":1}}],[\"readwriteseeker接口聚合了基本的读写和移位操作\",{\"1\":{\"76\":1}}],[\"readwriteseeker接口\",{\"0\":{\"76\":1}}],[\"readwritecloser\",{\"1\":{\"73\":1}}],[\"readwritecloser接口聚合了基本的读写和关闭操作\",{\"1\":{\"73\":1}}],[\"readwritecloser接口\",{\"0\":{\"73\":1}}],[\"readwriter\",{\"1\":{\"70\":1}}],[\"readwriter接口聚合了基本的读写操作\",{\"1\":{\"70\":1}}],[\"readwriter接口\",{\"0\":{\"70\":1}}],[\"readcloser就是reader+closer\",{\"1\":{\"71\":1}}],[\"readcloser\",{\"1\":{\"71\":1}}],[\"readcloser接口\",{\"0\":{\"71\":1}}],[\"reader的代码和期望io\",{\"1\":{\"102\":1}}],[\"reader的实现有问题的标志\",{\"1\":{\"63\":1}}],[\"readers\",{\"1\":{\"100\":1}}],[\"readerat\",{\"1\":{\"81\":1,\"94\":1,\"106\":1,\"107\":1}}],[\"readerat接口\",{\"0\":{\"81\":1}}],[\"readerfrom\",{\"1\":{\"78\":1}}],[\"readerfrom接口\",{\"0\":{\"78\":1}}],[\"reader\",{\"1\":{\"65\":2,\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"76\":1,\"78\":1,\"91\":4,\"96\":2,\"97\":3,\"98\":2,\"99\":3,\"100\":8,\"101\":1,\"102\":2,\"103\":1,\"104\":3,\"105\":3,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":4}}],[\"reader接口\",{\"0\":{\"65\":1}}],[\"reader接口的客户端如果多次调用read都不返回数据也不返回错误时\",{\"1\":{\"63\":1}}],[\"read\",{\"0\":{\"108\":1},\"1\":{\"63\":2,\"65\":8,\"67\":1,\"81\":1,\"92\":1,\"94\":1,\"96\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":2,\"104\":3,\"105\":2,\"106\":1,\"107\":1,\"108\":3,\"109\":1,\"110\":1,\"111\":1,\"112\":2}}],[\"resnet\",{\"0\":{\"233\":1}}],[\"result\",{\"1\":{\"59\":1}}],[\"resource\",{\"2\":{\"45\":1}}],[\"return\",{\"1\":{\"50\":7,\"53\":1,\"54\":1,\"55\":1,\"57\":4,\"58\":3,\"59\":1,\"63\":1,\"65\":1,\"229\":2}}],[\"regarded\",{\"1\":{\"32\":1}}],[\"weight\",{\"1\":{\"230\":1}}],[\"word\",{\"1\":{\"230\":1}}],[\"world\",{\"1\":{\"65\":1,\"66\":2,\"67\":1,\"113\":1,\"118\":1}}],[\"www\",{\"1\":{\"230\":1}}],[\"wait\",{\"1\":{\"119\":1,\"120\":1}}],[\"waitgroup\",{\"1\":{\"119\":1,\"120\":1}}],[\"wg\",{\"1\":{\"119\":4,\"120\":8}}],[\"w接受字节片\",{\"1\":{\"113\":1}}],[\"writte\",{\"1\":{\"98\":1}}],[\"written\",{\"1\":{\"96\":1,\"97\":1,\"98\":1}}],[\"write只调用一次\",{\"1\":{\"113\":1}}],[\"write实现了标准的写接口\",{\"1\":{\"93\":1}}],[\"writestring将字符串s的内容写入w\",{\"1\":{\"113\":1}}],[\"writestring\",{\"0\":{\"113\":1},\"1\":{\"89\":1,\"113\":2}}],[\"writeseeker\",{\"1\":{\"75\":1}}],[\"writeseeker接口聚合了基本的写入和移位操作\",{\"1\":{\"75\":1}}],[\"writeseeker接口\",{\"0\":{\"75\":1}}],[\"writebyte\",{\"1\":{\"86\":2}}],[\"writeat\",{\"1\":{\"82\":2}}],[\"writeto\",{\"1\":{\"79\":1,\"96\":1}}],[\"writecloser\",{\"1\":{\"72\":1}}],[\"writecloser接口聚合了基本的写入和关闭操作\",{\"1\":{\"72\":1}}],[\"writecloser接口\",{\"0\":{\"72\":1}}],[\"writer的代码\",{\"1\":{\"102\":1}}],[\"writers\",{\"1\":{\"101\":1}}],[\"writerat\",{\"1\":{\"82\":1}}],[\"writerat接口\",{\"0\":{\"82\":1}}],[\"writerto\",{\"1\":{\"79\":2}}],[\"writerto接口\",{\"0\":{\"79\":1}}],[\"writer\",{\"1\":{\"70\":1,\"72\":1,\"73\":1,\"75\":1,\"76\":1,\"79\":1,\"96\":1,\"97\":1,\"98\":1,\"101\":2,\"112\":1,\"113\":1}}],[\"writerinterface\",{\"1\":{\"66\":1}}],[\"writer接口\",{\"0\":{\"66\":1}}],[\"writeredis\",{\"1\":{\"57\":4}}],[\"write\",{\"1\":{\"63\":2,\"66\":5,\"93\":1}}],[\"writedatabase\",{\"1\":{\"57\":4}}],[\"w\",{\"1\":{\"79\":3,\"93\":3,\"101\":2,\"102\":3,\"112\":1,\"113\":2}}],[\"whence\",{\"1\":{\"67\":5,\"94\":1,\"106\":1,\"110\":1}}],[\"whether\",{\"1\":{\"57\":1}}],[\"width\",{\"1\":{\"230\":4}}],[\"width=device\",{\"1\":{\"230\":1}}],[\"with\",{\"1\":{\"103\":1}}],[\"withtimeout函数\",{\"1\":{\"59\":1}}],[\"withtimeout\",{\"0\":{\"59\":1},\"1\":{\"59\":3}}],[\"withdeadline\",{\"0\":{\"58\":1},\"1\":{\"58\":4,\"59\":1}}],[\"withcancel\",{\"0\":{\"57\":1},\"1\":{\"57\":3,\"58\":1}}],[\"withvalue\",{\"0\":{\"55\":1},\"1\":{\"55\":4}}],[\"will\",{\"1\":{\"32\":1,\"112\":1}}],[\"示例\",{\"1\":{\"57\":1,\"58\":1,\"59\":1}}],[\"kv存储解析\",{\"1\":{\"231\":1}}],[\"k也是r2的属性\",{\"1\":{\"177\":1}}],[\"k是r1的主键\",{\"1\":{\"177\":1}}],[\"k\",{\"1\":{\"55\":3}}],[\"key来定义外码\",{\"1\":{\"192\":1}}],[\"key来定义\",{\"1\":{\"191\":1}}],[\"key2\",{\"1\":{\"55\":1}}],[\"key1\",{\"1\":{\"55\":4}}],[\"key\",{\"1\":{\"50\":1,\"52\":3,\"55\":2}}],[\"如文件操作\",{\"1\":{\"187\":1}}],[\"如打印机\",{\"1\":{\"153\":1}}],[\"如更新其他表\",{\"1\":{\"141\":1}}],[\"如检查插入\",{\"1\":{\"141\":1}}],[\"如插入\",{\"1\":{\"141\":1}}],[\"如优化查询\",{\"1\":{\"138\":1}}],[\"如控制goroutine的函数\",{\"1\":{\"116\":1}}],[\"如\",{\"1\":{\"62\":1}}],[\"如何检索它\",{\"1\":{\"55\":1}}],[\"如何将值传递给上下文\",{\"1\":{\"55\":1}}],[\"如果参数的值太大\",{\"1\":{\"235\":1}}],[\"如果参数的值太小\",{\"1\":{\"235\":1}}],[\"如果满足条件则拒绝\",{\"1\":{\"191\":1}}],[\"如果出现了回路就出现了死锁\",{\"1\":{\"153\":1}}],[\"如果gotraceback为crash\",{\"1\":{\"117\":1}}],[\"如果gotraceback为2\",{\"1\":{\"117\":1}}],[\"如果gotraceback为1\",{\"1\":{\"117\":1}}],[\"如果gotraceback为0\",{\"1\":{\"117\":1}}],[\"如果w实现stringwriter\",{\"1\":{\"113\":1}}],[\"如果min大于buf的长度\",{\"1\":{\"104\":1}}],[\"如果在读取了一些但不是全部字节后发生eof\",{\"1\":{\"105\":1}}],[\"如果在读取少于最小字节后发生eof\",{\"1\":{\"104\":1}}],[\"如果在一个结构化数据流中eof在不期望的位置出现了\",{\"1\":{\"63\":1}}],[\"如果读取的字节数少则返回错误\",{\"1\":{\"104\":1,\"105\":1}}],[\"如果列出的写程序返回错误\",{\"1\":{\"101\":1}}],[\"如果任何读取器返回非零\",{\"1\":{\"100\":1}}],[\"如果长度为零\",{\"1\":{\"97\":1}}],[\"如果buf为nil\",{\"1\":{\"97\":1}}],[\"如果需要参数\",{\"1\":{\"184\":1}}],[\"如果需要\",{\"1\":{\"97\":1}}],[\"如果dst实现了readerfrom接口\",{\"1\":{\"96\":1,\"98\":1}}],[\"如果done被关闭\",{\"1\":{\"52\":1}}],[\"如果done未关闭\",{\"1\":{\"52\":1}}],[\"如果src实现writerto或dst实现readerfrom\",{\"1\":{\"97\":1}}],[\"如果src实现writerto接口\",{\"1\":{\"96\":1}}],[\"如果slowoperation在超时之前完成\",{\"1\":{\"59\":1}}],[\"如果有\",{\"1\":{\"96\":1}}],[\"如果以错误关闭读取端\",{\"1\":{\"93\":1}}],[\"如果用错误关闭写入端\",{\"1\":{\"92\":1}}],[\"如果对象的数据流只有部分可用\",{\"1\":{\"81\":1}}],[\"如果\",{\"1\":{\"67\":3,\"81\":3,\"82\":1}}],[\"如果父上下文的截止日期已经早于d\",{\"1\":{\"58\":1}}],[\"如果没有可用字符\",{\"1\":{\"87\":1}}],[\"如果没有字节可读取\",{\"1\":{\"84\":1}}],[\"如果没有value与key相关联\",{\"1\":{\"52\":1}}],[\"如果没有设置截止日期\",{\"1\":{\"52\":1}}],[\"如果上下文未关闭\",{\"1\":{\"52\":1}}],[\"如果你不了解它\",{\"1\":{\"15\":1}}],[\"如果你是一个新手\",{\"1\":{\"14\":1}}],[\"这些进程都将无法推进下去\",{\"1\":{\"153\":1}}],[\"这些读取会完全消耗已写入的数据\",{\"1\":{\"102\":1}}],[\"这意味着可以在以后再重新插入数据\",{\"1\":{\"149\":1}}],[\"这意味着你可以在\",{\"1\":{\"35\":1}}],[\"这个数据被修改了\",{\"1\":{\"142\":1}}],[\"这个例子传递了一个带有超时的上下文\",{\"1\":{\"59\":1}}],[\"这个例子传递了一个带有任意截止日期的上下文\",{\"1\":{\"58\":1}}],[\"这个例子演示了使用\",{\"1\":{\"55\":1}}],[\"这对于需要逐行处理数据的情况非常有用\",{\"1\":{\"140\":1}}],[\"这是一个很明显的内存泄露场景\",{\"1\":{\"117\":1}}],[\"这样做可以在读取一些字节\",{\"1\":{\"65\":1}}],[\"这种一般情况的一个例子就是\",{\"1\":{\"65\":1}}],[\"导致它们无法继续执行下去\",{\"1\":{\"153\":1}}],[\"导出的上下文关键变量的静态类型应该是指针或接口\",{\"1\":{\"55\":1}}],[\"导航栏\",{\"1\":{\"4\":1,\"10\":1}}],[\"另外一种是定义为表级约束条件\",{\"1\":{\"191\":1}}],[\"另外\",{\"1\":{\"55\":1}}],[\"赋值时\",{\"1\":{\"55\":1}}],[\"以上两个结构体pipewriter与pipereader是结合使用的需要用pipe\",{\"1\":{\"93\":1}}],[\"以读写模式打开文件\",{\"1\":{\"66\":1}}],[\"以及编程语言的使用方法\",{\"1\":{\"237\":1}}],[\"以及任何遇到的引起写入提前停止的错误\",{\"1\":{\"66\":1}}],[\"以及任何遇到的错误\",{\"1\":{\"65\":1}}],[\"以及允许的\",{\"1\":{\"65\":1}}],[\"以及如果值存在\",{\"1\":{\"55\":1}}],[\"以先发生的情况为准\",{\"1\":{\"58\":1}}],[\"以哪个先发生为准\",{\"1\":{\"57\":1}}],[\"以避免使用上下文的包之间的冲突\",{\"1\":{\"55\":1}}],[\"以便在应用程序中进行处理\",{\"1\":{\"140\":1}}],[\"以便\",{\"1\":{\"13\":1}}],[\"不可以使用带有\",{\"1\":{\"230\":1}}],[\"不可重复读\",{\"1\":{\"142\":1,\"212\":1}}],[\"不需要指出怎么做\",{\"1\":{\"181\":1}}],[\"不一定是公共属性\",{\"1\":{\"178\":1}}],[\"不同点\",{\"1\":{\"178\":1}}],[\"不包含在任意候选码中的属性\",{\"1\":{\"176\":1}}],[\"不能直接用sql表达\",{\"1\":{\"187\":1}}],[\"不能被其他进程强行夺走\",{\"1\":{\"153\":1}}],[\"不能修改此切片的数据\",{\"1\":{\"66\":1}}],[\"不剥夺条件\",{\"1\":{\"153\":1}}],[\"不是数据本身\",{\"1\":{\"139\":1}}],[\"不存在部分执行的情况\",{\"1\":{\"129\":1}}],[\"不读到脏数据\",{\"1\":{\"127\":1}}],[\"不确定\",{\"1\":{\"81\":1}}],[\"不足以填满\",{\"1\":{\"81\":1}}],[\"不应该是string类型或任何其他内置类型\",{\"1\":{\"55\":1}}],[\"不要在结构类型中存储上下文\",{\"1\":{\"48\":1}}],[\"返回当前系统的\",{\"1\":{\"121\":1}}],[\"返回时\",{\"1\":{\"98\":1,\"104\":1,\"105\":1}}],[\"返回写入的字节数和写入时遇到的错误\",{\"1\":{\"82\":1}}],[\"返回读取的字节数\",{\"1\":{\"81\":1}}],[\"返回值\",{\"1\":{\"78\":2,\"79\":2}}],[\"返回移动后的指针位置和移动过程中遇到的任何错误\",{\"1\":{\"67\":1}}],[\"返回的n\",{\"1\":{\"66\":1}}],[\"返回的\",{\"1\":{\"65\":1}}],[\"返回\",{\"1\":{\"59\":1,\"78\":1}}],[\"返回父上下文的一个副本\",{\"1\":{\"58\":1}}],[\"返回父对象的副本\",{\"1\":{\"55\":1}}],[\"返回上下文的done通道将被关闭\",{\"1\":{\"58\":1}}],[\"返回上下文的\",{\"1\":{\"57\":1}}],[\"返回带有新的\",{\"1\":{\"57\":1}}],[\"返回顶部按钮\",{\"1\":{\"4\":1,\"10\":1}}],[\"函数来设置当前程序并发时占用的cpu逻辑核心数\",{\"1\":{\"120\":1}}],[\"函数或父上下文的\",{\"1\":{\"58\":1}}],[\"函数被调用或父上下文的\",{\"1\":{\"57\":1}}],[\"函数原型\",{\"0\":{\"57\":1,\"58\":1,\"59\":1}}],[\"函数\",{\"1\":{\"55\":2,\"57\":1,\"58\":1}}],[\"函数返回一个非nil的空context\",{\"1\":{\"53\":1,\"54\":1}}],[\"64\",{\"1\":{\"104\":2,\"105\":1}}],[\"6\",{\"0\":{\"55\":1,\"75\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"101\":1,\"122\":1},\"1\":{\"109\":1,\"117\":2}}],[\"因竞争资源而造成的一种阻塞的现象\",{\"1\":{\"215\":1}}],[\"因为复制被定义为从src读取直到eof\",{\"1\":{\"96\":1}}],[\"因为周围的函数还没有扩展到接受context参数\",{\"1\":{\"54\":1}}],[\"因此它不会将读取的eof视为要报告的错误\",{\"1\":{\"103\":1}}],[\"因此在此上下文中运行的操作完成后\",{\"1\":{\"57\":1,\"58\":1}}],[\"因此可以借助于\",{\"1\":{\"16\":1}}],[\"因此\",{\"1\":{\"13\":1}}],[\"当且仅当结果与某一次顺序串行执行的结果相同\",{\"1\":{\"217\":1}}],[\"当且仅当err\",{\"1\":{\"104\":1,\"105\":1}}],[\"当用户进行操作的时候会检查主码值是否唯一或者为空\",{\"1\":{\"191\":1}}],[\"当模式改变时只需要改变模式\",{\"1\":{\"174\":1}}],[\"当满足触发条件时\",{\"1\":{\"141\":1}}],[\"当系统发生故障时\",{\"1\":{\"129\":1}}],[\"当前堆内存\",{\"1\":{\"117\":1}}],[\"当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时\",{\"1\":{\"117\":1}}],[\"当同时实现多个接口时\",{\"1\":{\"69\":1}}],[\"当\",{\"1\":{\"65\":1}}],[\"当从一个已关闭的pipe读取或者写入时\",{\"1\":{\"63\":1}}],[\"当截止日期到期\",{\"1\":{\"58\":1}}],[\"当返回的\",{\"1\":{\"57\":1}}],[\"当不清楚要使用哪个context或者它还不可用时\",{\"1\":{\"54\":1}}],[\"当cancel函数返回\",{\"1\":{\"52\":1}}],[\"当context关闭后\",{\"1\":{\"52\":1}}],[\"5px\",{\"1\":{\"230\":8}}],[\"5之后默认使用全部的cpu逻辑核心数\",{\"1\":{\"120\":1}}],[\"5版本之前默认使用的是单核心执行\",{\"1\":{\"120\":1}}],[\"5\",{\"0\":{\"54\":1,\"74\":1,\"80\":1,\"81\":1,\"82\":1,\"88\":1,\"100\":1,\"111\":1,\"121\":1},\"1\":{\"57\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"117\":2,\"127\":1,\"139\":1,\"230\":2}}],[\"初始化和测试使用\",{\"1\":{\"53\":1}}],[\"它由一个相互关联的数据集合和一组访问这些数据的程序构成\",{\"1\":{\"168\":1}}],[\"它有什么用途\",{\"0\":{\"147\":1}}],[\"它会在特定的数据库操作\",{\"1\":{\"141\":1}}],[\"它会从相同的调用中返回\",{\"1\":{\"65\":1}}],[\"它确保数据库操作的一致性和完整性\",{\"1\":{\"128\":1,\"210\":1}}],[\"它们将无法推进下去\",{\"1\":{\"215\":1}}],[\"它们影响go程序的构建\",{\"1\":{\"117\":1}}],[\"它们被顺序读取\",{\"1\":{\"100\":1}}],[\"它也包括用于reflect包的低层次类型信息\",{\"1\":{\"116\":1}}],[\"它也会在调用过程中使用\",{\"1\":{\"65\":1}}],[\"它不会在列表中继续下去\",{\"1\":{\"101\":1}}],[\"它是所提供的输入阅读器的逻辑串联\",{\"1\":{\"100\":1}}],[\"它从r开始读取偏移量off\",{\"1\":{\"107\":1}}],[\"它从r开始读取\",{\"1\":{\"94\":1,\"106\":1}}],[\"它从管道中读取数据\",{\"1\":{\"92\":1}}],[\"它将数据写入管道\",{\"1\":{\"93\":1}}],[\"它就必须返回一个非nil的错误\",{\"1\":{\"66\":1}}],[\"它就会返回读取的字节数\",{\"1\":{\"65\":1}}],[\"它返回复制的字节数\",{\"1\":{\"105\":1}}],[\"它返回复制的字节数n\",{\"1\":{\"104\":1}}],[\"它返回复制的字节数以及复制时遇到的最早错误\",{\"1\":{\"98\":1}}],[\"它返回复制的字节数和复制时遇到的第一个错误\",{\"1\":{\"96\":1}}],[\"它返回从\",{\"1\":{\"66\":1}}],[\"它返回读取的字节数\",{\"1\":{\"65\":1}}],[\"它主要包装了一些已有的实现\",{\"1\":{\"62\":1}}],[\"它通常由主函数\",{\"1\":{\"53\":1}}],[\"它永远不会被取消\",{\"1\":{\"53\":1}}],[\"它可以对\",{\"1\":{\"48\":1}}],[\"name=\",{\"1\":{\"230\":2}}],[\"name\",{\"1\":{\"162\":2}}],[\"numcpu\",{\"0\":{\"121\":1},\"1\":{\"121\":1}}],[\"n>\",{\"1\":{\"104\":1}}],[\"need\",{\"1\":{\"97\":1}}],[\"newreader\",{\"1\":{\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":3,\"101\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"newsectionreader返回一个sectionreader\",{\"1\":{\"94\":1,\"106\":1,\"107\":1}}],[\"newsectionreader\",{\"0\":{\"107\":1},\"1\":{\"94\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"111\":1}}],[\"newcancelctx\",{\"1\":{\"57\":1,\"58\":1}}],[\"new\",{\"1\":{\"53\":1,\"54\":1,\"58\":1,\"63\":6}}],[\"n\",{\"1\":{\"65\":11,\"66\":2,\"67\":5,\"78\":2,\"79\":2,\"81\":5,\"82\":2,\"89\":1,\"91\":2,\"92\":1,\"93\":1,\"94\":3,\"96\":1,\"97\":2,\"98\":2,\"99\":2,\"100\":1,\"101\":1,\"102\":1,\"104\":3,\"105\":4,\"106\":3,\"107\":2,\"108\":3,\"109\":3,\"110\":1,\"111\":1,\"112\":1,\"113\":1}}],[\"no\",{\"1\":{\"63\":1,\"97\":1}}],[\"now\",{\"1\":{\"58\":1,\"59\":1,\"120\":2}}],[\"note\",{\"2\":{\"159\":1,\"163\":1,\"225\":1,\"238\":1}}],[\"notify\",{\"1\":{\"117\":1}}],[\"not\",{\"1\":{\"55\":1,\"57\":1,\"230\":1,\"240\":1}}],[\"nil时\",{\"1\":{\"98\":1,\"104\":1,\"105\":1}}],[\"nil而不是err\",{\"1\":{\"96\":1}}],[\"nil\",{\"1\":{\"50\":3,\"55\":1,\"57\":2,\"58\":3,\"65\":3,\"81\":2,\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":3,\"105\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"112\":1,\"113\":1}}],[\"404\",{\"1\":{\"240\":1}}],[\"40px\",{\"1\":{\"230\":1}}],[\"40vh\",{\"1\":{\"230\":1}}],[\"4nf\",{\"1\":{\"198\":1}}],[\"4nf消除表中的多值依赖\",{\"1\":{\"144\":1}}],[\"4\",{\"0\":{\"53\":1,\"68\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"87\":1,\"94\":1,\"99\":1,\"110\":1,\"120\":1},\"1\":{\"98\":1,\"99\":1,\"104\":2,\"105\":1,\"117\":2,\"120\":1,\"127\":1,\"139\":1,\"230\":1}}],[\"一级封锁协议可以保证不丢失修改\",{\"1\":{\"212\":1}}],[\"一级锁协议\",{\"1\":{\"127\":1}}],[\"一种是定义为列级约束条件\",{\"1\":{\"191\":1}}],[\"一些非数据库操作\",{\"1\":{\"187\":1}}],[\"一组为了完成特定功能的sql语句集\",{\"1\":{\"184\":1}}],[\"一张二维表\",{\"1\":{\"176\":1}}],[\"一次转储所有的数据\",{\"1\":{\"223\":1}}],[\"一次需要的东西全部加锁\",{\"1\":{\"153\":1}}],[\"一次封锁法\",{\"1\":{\"153\":1,\"216\":1}}],[\"一旦事务提交成功\",{\"1\":{\"129\":1}}],[\"一旦所有输入均返回eof\",{\"1\":{\"100\":1}}],[\"一致性和相容性\",{\"1\":{\"189\":1}}],[\"一致性和安全性\",{\"1\":{\"141\":1}}],[\"一致性\",{\"1\":{\"129\":1,\"211\":1}}],[\"一般看这个\",{\"1\":{\"117\":1}}],[\"一般来说是io\",{\"1\":{\"63\":1}}],[\"一般携带一个截止日期\",{\"1\":{\"52\":1}}],[\"一个事务的所有更新操作对应的日志记录写入存储器之前\",{\"1\":{\"224\":1}}],[\"一个业务同时对多个表进行操作\",{\"1\":{\"184\":1}}],[\"一个属性集的值可唯一标识一个关系的元素\",{\"1\":{\"176\":1}}],[\"一个数据库只有一个内模式\",{\"1\":{\"172\":1}}],[\"一个取消信号和其他跨越api边界的值\",{\"1\":{\"52\":1}}],[\"一个拥有\",{\"1\":{\"23\":1}}],[\"连续调用两次unreadrune方法而中间没有调用readrune时\",{\"1\":{\"88\":1}}],[\"连续调用两次unreadbyte方法而中间没有调用readbyte时\",{\"1\":{\"85\":1}}],[\"连续调用value相同的键返回相同的结果\",{\"1\":{\"52\":1}}],[\"连续调用done将返回相同的值\",{\"1\":{\"52\":1}}],[\"连续调用deadline会返回相同的结果\",{\"1\":{\"52\":1}}],[\"该事务无法到达提交点\",{\"1\":{\"224\":1}}],[\"该reader向w写入从r读取的内容\",{\"1\":{\"112\":1}}],[\"该方法根据\",{\"1\":{\"52\":1}}],[\"该方法描述\",{\"1\":{\"52\":1}}],[\"该通道代表完成工作时关闭取消上下文\",{\"1\":{\"52\":1}}],[\"更改和破坏\",{\"1\":{\"189\":1}}],[\"更新已写入数据库进行undo\",{\"1\":{\"222\":1}}],[\"更新异常\",{\"1\":{\"197\":1}}],[\"更新或删除操作是否符合特定条件\",{\"1\":{\"141\":1}}],[\"更新\",{\"1\":{\"141\":1}}],[\"更新数据库结构等\",{\"1\":{\"138\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"10\":1}}],[\"更新时间\",{\"1\":{\"4\":1}}],[\"更严格\",{\"1\":{\"81\":1}}],[\"更多的示例\",{\"1\":{\"52\":1}}],[\"opacity\",{\"1\":{\"230\":1}}],[\"openfile\",{\"1\":{\"66\":1}}],[\"open\",{\"1\":{\"65\":1,\"67\":1}}],[\"of触发器\",{\"1\":{\"194\":1}}],[\"off\",{\"1\":{\"81\":3,\"82\":3,\"94\":2,\"106\":2,\"107\":1,\"109\":1}}],[\"offset\",{\"1\":{\"67\":2,\"94\":1,\"106\":1,\"110\":1,\"229\":3}}],[\"o\",{\"1\":{\"66\":2}}],[\"o错误\",{\"1\":{\"65\":1}}],[\"on\",{\"1\":{\"63\":1}}],[\"one\",{\"1\":{\"58\":1}}],[\"os\",{\"1\":{\"62\":1,\"65\":2,\"66\":3,\"67\":2,\"96\":3,\"97\":3,\"98\":2,\"99\":2,\"100\":2,\"102\":2,\"107\":2,\"110\":2,\"112\":2,\"113\":2,\"117\":3}}],[\"o原始操作的一系列接口\",{\"1\":{\"62\":1}}],[\"o标准库\",{\"0\":{\"62\":1}}],[\"or\",{\"1\":{\"57\":1,\"63\":1,\"94\":1}}],[\"org\",{\"1\":{\"52\":1,\"230\":1}}],[\"ok\",{\"1\":{\"50\":1,\"52\":1,\"58\":2}}],[\"关系约束\",{\"1\":{\"193\":1}}],[\"关系中元组在组成主键的属性上不能有空值\",{\"1\":{\"177\":1}}],[\"关系模式优化\",{\"1\":{\"204\":1}}],[\"关系模式规范化\",{\"1\":{\"204\":1}}],[\"关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖\",{\"1\":{\"198\":1}}],[\"关系模式r1称为被参照关系\",{\"1\":{\"177\":1}}],[\"关系模式r中的属性k是其他关系模式的主键\",{\"1\":{\"176\":1}}],[\"关系模式中候选码中选取的一个作为主码\",{\"1\":{\"176\":1}}],[\"关系模式\",{\"1\":{\"176\":1}}],[\"关系模型的完整性约束包括实体完整性\",{\"1\":{\"171\":1}}],[\"关系模型只有关系一种数据结构\",{\"1\":{\"171\":1}}],[\"关系\",{\"1\":{\"176\":1}}],[\"关系数据库的设计理论\",{\"0\":{\"196\":1}}],[\"关系数据库\",{\"0\":{\"176\":1}}],[\"关系代数和关系演算\",{\"1\":{\"171\":1}}],[\"关系等\",{\"1\":{\"138\":1}}],[\"关系等基本结构\",{\"1\":{\"138\":1}}],[\"关闭后如果对管道的读取端进行读取操作\",{\"1\":{\"93\":1}}],[\"关闭后如果对管道的写入端进行写入操作\",{\"1\":{\"92\":1}}],[\"关闭的原因\",{\"1\":{\"52\":1}}],[\"关闭仍然是可读的\",{\"1\":{\"52\":1}}],[\"关于这些扩展\",{\"1\":{\"17\":1}}],[\"语言数据库\",{\"1\":{\"231\":1}}],[\"语言灵活\",{\"1\":{\"181\":1}}],[\"语言简洁\",{\"1\":{\"181\":1}}],[\"语句中使用\",{\"1\":{\"52\":1}}],[\"语法\",{\"1\":{\"18\":1,\"35\":1}}],[\"语法进行了扩展\",{\"1\":{\"17\":1}}],[\"语法扩展\",{\"1\":{\"16\":1}}],[\"3em\",{\"1\":{\"230\":1}}],[\"333333\",{\"1\":{\"230\":1}}],[\"35px\",{\"1\":{\"230\":3}}],[\"3nf到4nf消除了主属性对码的部分函数依赖和传递函数依赖\",{\"1\":{\"198\":1}}],[\"3nf\",{\"1\":{\"198\":1}}],[\"3nf去除非主属性对于主属性的传递依赖\",{\"1\":{\"144\":1}}],[\"3\",{\"0\":{\"52\":1,\"59\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"86\":1,\"93\":1,\"98\":1,\"109\":1,\"119\":1},\"1\":{\"67\":1,\"104\":1,\"117\":2,\"127\":1,\"139\":1}}],[\"在大一那年顺利通过了四级和六级考试\",{\"1\":{\"237\":1}}],[\"在学习方面\",{\"1\":{\"237\":1}}],[\"在反向传播过程中\",{\"1\":{\"235\":1}}],[\"在发送请求的时候加上\",{\"1\":{\"228\":1}}],[\"在2nf的基础上\",{\"1\":{\"198\":1}}],[\"在1nf的基础上\",{\"1\":{\"198\":2}}],[\"在数据库中不合理的设计会导致数据冗余\",{\"1\":{\"197\":1}}],[\"在r2中k的取值要么为空要么是r1某个主键的值\",{\"1\":{\"177\":1}}],[\"在使用drop后\",{\"1\":{\"149\":1}}],[\"在选定的dbms上创建数据库和表结构\",{\"1\":{\"138\":1}}],[\"在\",{\"0\":{\"130\":1}}],[\"在一级封锁协议上加上事务t在读取数据r之前必须对其先加上s锁\",{\"1\":{\"127\":1}}],[\"在一级锁协议基础上增加事务t读取数据r之前加上一个s锁\",{\"1\":{\"127\":1}}],[\"在unix系统里\",{\"1\":{\"117\":1}}],[\"在这点上\",{\"1\":{\"81\":1}}],[\"在用完\",{\"1\":{\"68\":1}}],[\"在整个标准库内都没有对closer的引用\",{\"1\":{\"68\":1}}],[\"在输入流结束时会返回一个非零的字节数\",{\"1\":{\"65\":1}}],[\"在成功读取\",{\"1\":{\"65\":1}}],[\"在读取未完全时遇到了eof\",{\"1\":{\"63\":1}}],[\"在超时时间结束\",{\"1\":{\"59\":1}}],[\"在超时时间之后结束\",{\"1\":{\"59\":1}}],[\"在截止时间停止\",{\"1\":{\"58\":1}}],[\"在截止时间之后停止\",{\"1\":{\"58\":1}}],[\"在语义上等价于parent\",{\"1\":{\"58\":1}}],[\"在给接口\",{\"1\":{\"55\":1}}],[\"在第一次调用之后\",{\"1\":{\"51\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"4\":1}}],[\"span>\",{\"1\":{\"230\":1}}],[\"shadow\",{\"1\":{\"230\":1}}],[\"shortbuf\",{\"1\":{\"104\":2}}],[\"short\",{\"1\":{\"63\":2}}],[\"shortduration\",{\"1\":{\"58\":2,\"59\":2}}],[\"scale=1\",{\"1\":{\"230\":1}}],[\"scheddetail\",{\"1\":{\"117\":1}}],[\"schedtrace\",{\"1\":{\"117\":1}}],[\"s锁\",{\"1\":{\"214\":1}}],[\"sql只能表达常见的查询\",{\"1\":{\"187\":1}}],[\"sql定义语言ddl包括\",{\"0\":{\"183\":1}}],[\"sql的基本功能\",{\"0\":{\"182\":1}}],[\"sql的基本特点\",{\"0\":{\"181\":1}}],[\"system\",{\"1\":{\"230\":1}}],[\"systems\",{\"1\":{\"103\":1}}],[\"sync\",{\"1\":{\"119\":2,\"120\":2}}],[\"sig\",{\"1\":{\"117\":3}}],[\"signal\",{\"1\":{\"117\":3}}],[\"size=\",{\"1\":{\"230\":2}}],[\"size返回以字节为单位的片段大小\",{\"1\":{\"94\":1,\"106\":1,\"111\":1}}],[\"size\",{\"0\":{\"111\":1},\"1\":{\"87\":1,\"94\":2,\"104\":2,\"105\":1,\"106\":1,\"111\":2,\"229\":2,\"230\":2}}],[\"smaller\",{\"1\":{\"104\":1}}],[\"solid\",{\"1\":{\"230\":2}}],[\"some\",{\"1\":{\"96\":1,\"98\":2,\"99\":2,\"101\":1,\"102\":2,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"sooner\",{\"1\":{\"58\":1}}],[\"src\",{\"1\":{\"96\":2,\"97\":1,\"98\":1}}],[\"slowoperation\",{\"1\":{\"59\":1}}],[\"slowoperationwithtimeout\",{\"1\":{\"59\":1}}],[\"sleep\",{\"1\":{\"57\":5}}],[\"sub\",{\"1\":{\"57\":2,\"120\":1}}],[\"style\",{\"1\":{\"230\":1}}],[\"style=\",{\"1\":{\"230\":12}}],[\"starttime\",{\"1\":{\"120\":2}}],[\"stdout将内容输出到控制台\",{\"1\":{\"96\":1}}],[\"stdout\",{\"1\":{\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"102\":1,\"107\":1,\"110\":1,\"112\":2,\"113\":1}}],[\"stop\",{\"1\":{\"57\":1}}],[\"stream\",{\"1\":{\"96\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":2,\"104\":2,\"105\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"strings\",{\"1\":{\"96\":2,\"97\":3,\"98\":2,\"99\":2,\"100\":4,\"101\":2,\"103\":2,\"104\":2,\"105\":2,\"107\":2,\"108\":2,\"109\":2,\"110\":2,\"111\":2,\"112\":2}}],[\"stringwriter\",{\"1\":{\"89\":1}}],[\"stringwriter接口\",{\"0\":{\"89\":1}}],[\"string\",{\"1\":{\"50\":2,\"55\":1,\"65\":1,\"67\":2,\"89\":1,\"101\":2,\"113\":1,\"118\":1}}],[\"struct\",{\"1\":{\"50\":1,\"52\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"229\":1}}],[\"s\",{\"1\":{\"57\":1,\"89\":1,\"94\":4,\"103\":1,\"104\":1,\"105\":1,\"106\":4,\"107\":2,\"108\":4,\"109\":4,\"110\":4,\"111\":3,\"113\":1,\"117\":1,\"118\":2}}],[\"sectionreader在readerat的基础上实现了read\",{\"1\":{\"94\":1,\"106\":1}}],[\"sectionreader\",{\"0\":{\"94\":1,\"106\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1},\"1\":{\"94\":7,\"106\":5,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1}}],[\"second\",{\"1\":{\"57\":5,\"58\":1,\"59\":1,\"97\":1,\"100\":2}}],[\"seekstart\",{\"1\":{\"110\":1}}],[\"seek和readat\",{\"1\":{\"94\":1,\"106\":1}}],[\"seek\",{\"0\":{\"110\":1},\"1\":{\"67\":3,\"94\":1,\"106\":1,\"110\":2}}],[\"seeker\",{\"1\":{\"67\":2,\"74\":1,\"75\":1,\"76\":1}}],[\"seeker接口\",{\"0\":{\"67\":1}}],[\"select\",{\"1\":{\"52\":1,\"57\":3,\"58\":1,\"59\":1}}],[\"switch\",{\"1\":{\"50\":1,\"229\":1}}],[\"c语言使用宏定义来实现swap函数\",{\"0\":{\"232\":1}}],[\"ccc\",{\"1\":{\"230\":1}}],[\"center\",{\"1\":{\"230\":1}}],[\"cellpadding=\",{\"1\":{\"230\":1}}],[\"charset=\",{\"1\":{\"230\":1}}],[\"chan\",{\"1\":{\"50\":1,\"52\":1,\"117\":1}}],[\"crud\",{\"1\":{\"169\":1,\"182\":1}}],[\"create\",{\"1\":{\"57\":1,\"58\":1}}],[\"cpus\",{\"1\":{\"121\":1}}],[\"cpu\",{\"1\":{\"117\":4,\"121\":1}}],[\"clock\",{\"1\":{\"117\":3}}],[\"close关闭写入器\",{\"1\":{\"93\":1}}],[\"close关闭读取器\",{\"1\":{\"92\":1}}],[\"closewitherror类似close方法\",{\"1\":{\"92\":1,\"93\":1}}],[\"closewitherror\",{\"1\":{\"92\":1,\"93\":1}}],[\"closer关闭的接口\",{\"1\":{\"68\":1}}],[\"closer\",{\"1\":{\"68\":1,\"71\":1,\"72\":1,\"73\":1}}],[\"closer接口\",{\"0\":{\"68\":1}}],[\"close\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"92\":1,\"93\":1,\"102\":1}}],[\"closed\",{\"1\":{\"63\":1}}],[\"current\",{\"1\":{\"58\":1}}],[\"cur\",{\"1\":{\"58\":2}}],[\"c\",{\"1\":{\"57\":4,\"58\":12,\"86\":1,\"119\":1}}],[\"ctx\",{\"1\":{\"55\":5,\"57\":11,\"58\":2,\"59\":6}}],[\"calls\",{\"1\":{\"63\":1}}],[\"cannot\",{\"1\":{\"57\":1,\"58\":1}}],[\"cancelctx\",{\"1\":{\"58\":1}}],[\"canceled\",{\"1\":{\"57\":1,\"58\":2}}],[\"cancel\",{\"1\":{\"57\":5,\"58\":7,\"59\":4}}],[\"cancelfunc可以被多个goroutine同时调用\",{\"1\":{\"51\":1}}],[\"cancelfunc不会等待工作停止\",{\"1\":{\"51\":1}}],[\"cancelfunc类型是一个停止工作的方法\",{\"1\":{\"51\":1}}],[\"cancelfunc\",{\"0\":{\"51\":1},\"1\":{\"51\":1,\"57\":1,\"58\":1,\"59\":1}}],[\"case\",{\"1\":{\"50\":2,\"52\":2,\"57\":3,\"58\":2,\"59\":2,\"229\":2}}],[\"collapse\",{\"1\":{\"230\":2}}],[\"color=\",{\"1\":{\"230\":2}}],[\"color\",{\"1\":{\"230\":6}}],[\"code\",{\"1\":{\"230\":1}}],[\"compatible\",{\"1\":{\"230\":1}}],[\"commit提交\",{\"1\":{\"221\":1}}],[\"copied\",{\"1\":{\"112\":1}}],[\"copyn将n个字节\",{\"1\":{\"98\":1}}],[\"copyn\",{\"0\":{\"98\":1},\"1\":{\"98\":2}}],[\"copybuffer与copy相同\",{\"1\":{\"97\":1}}],[\"copybuffer\",{\"0\":{\"97\":1},\"1\":{\"97\":3}}],[\"copy\",{\"0\":{\"96\":1},\"1\":{\"96\":2,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"107\":1,\"110\":1}}],[\"consistency\",{\"1\":{\"129\":1}}],[\"const\",{\"1\":{\"19\":1,\"58\":1,\"59\":1}}],[\"content=\",{\"1\":{\"230\":3}}],[\"context函数\",{\"0\":{\"56\":1}}],[\"context包中定义了一个空的context\",{\"1\":{\"50\":1}}],[\"context类型\",{\"0\":{\"49\":1}}],[\"context\",{\"0\":{\"50\":1,\"52\":1},\"1\":{\"48\":4,\"50\":7,\"52\":4,\"53\":1,\"54\":1,\"55\":8,\"57\":12,\"58\":6,\"59\":8}}],[\"context标准库\",{\"0\":{\"48\":1}}],[\"contains\",{\"1\":{\"94\":1}}],[\"coverview\",{\"1\":{\"44\":1}}],[\"<br>\",{\"1\":{\"230\":1}}],[\"<body>\",{\"1\":{\"230\":1}}],[\"<p>©\",{\"1\":{\"230\":1}}],[\"<p>此为系统邮件\",{\"1\":{\"230\":1}}],[\"<p>──zarttic<\",{\"1\":{\"230\":1}}],[\"<p>您好\",{\"1\":{\"230\":1}}],[\"<font\",{\"1\":{\"230\":4}}],[\"<td\",{\"1\":{\"230\":1}}],[\"<th\",{\"1\":{\"230\":1}}],[\"<tr>\",{\"1\":{\"230\":2}}],[\"<tbody>\",{\"1\":{\"230\":1}}],[\"<table\",{\"1\":{\"230\":1}}],[\"<div\",{\"1\":{\"230\":4}}],[\"<meta\",{\"1\":{\"230\":4}}],[\"<h2\",{\"1\":{\"230\":1}}],[\"<head>\",{\"1\":{\"230\":1}}],[\"<html\",{\"1\":{\"230\":1}}],[\"<=\",{\"1\":{\"58\":1,\"65\":2,\"66\":2,\"229\":1}}],[\"<\",{\"1\":{\"50\":1,\"52\":2,\"57\":3,\"58\":2,\"59\":2,\"65\":1,\"66\":1,\"81\":1,\"82\":1,\"117\":1,\"118\":2,\"120\":2,\"230\":25}}],[\"div>\",{\"1\":{\"230\":4}}],[\"do\",{\"1\":{\"230\":1}}],[\"doctype\",{\"1\":{\"230\":1}}],[\"done通道的关闭可能会异步发生\",{\"1\":{\"52\":1}}],[\"done返回一个被关闭的通道\",{\"1\":{\"52\":1}}],[\"done返回一个channel通道\",{\"1\":{\"52\":1}}],[\"done返回nil\",{\"1\":{\"52\":1}}],[\"done\",{\"1\":{\"50\":1,\"52\":2,\"57\":9,\"58\":2,\"59\":1,\"119\":1,\"120\":2}}],[\"dto\",{\"1\":{\"229\":1}}],[\"ddl触发器\",{\"1\":{\"194\":1}}],[\"dml触发器\",{\"1\":{\"194\":1}}],[\"db\",{\"1\":{\"229\":7}}],[\"dba的主要职责\",{\"0\":{\"175\":1}}],[\"dba\",{\"1\":{\"154\":1}}],[\"dbms是数据库管理系统的简称\",{\"1\":{\"168\":1}}],[\"dbms\",{\"1\":{\"138\":1,\"154\":1,\"168\":2}}],[\"dst\",{\"1\":{\"96\":2,\"97\":1,\"98\":1}}],[\"database\",{\"2\":{\"160\":1,\"226\":1}}],[\"data\",{\"1\":{\"63\":1,\"92\":1,\"93\":1}}],[\"durability\",{\"1\":{\"129\":1}}],[\"duration\",{\"1\":{\"59\":1}}],[\"dur\",{\"1\":{\"58\":3}}],[\"d\",{\"1\":{\"58\":7}}],[\"description\",{\"1\":{\"230\":1}}],[\"designed\",{\"1\":{\"103\":1}}],[\"deadlock\",{\"1\":{\"153\":1}}],[\"deadlineexceeded\",{\"1\":{\"58\":2}}],[\"deadline返回的时间是代表该上下文所做的工作应该被取消的时间\",{\"1\":{\"52\":1}}],[\"deadline\",{\"1\":{\"50\":2,\"52\":2,\"58\":4}}],[\"delete属于数据库dml操作语言\",{\"1\":{\"149\":1}}],[\"delete删除表中的数据时\",{\"1\":{\"149\":1}}],[\"delete删除的是表中的数据\",{\"1\":{\"149\":1}}],[\"delete用于删除行级别的记录\",{\"1\":{\"149\":1}}],[\"debug包的setgcpercent函数允许在运行时修改该百分比\",{\"1\":{\"117\":1}}],[\"defer\",{\"1\":{\"58\":2,\"59\":2,\"65\":1,\"119\":7,\"120\":2}}],[\"default\",{\"1\":{\"57\":3}}],[\"bn\",{\"1\":{\"235\":1}}],[\"body>\",{\"1\":{\"230\":1}}],[\"bold\",{\"1\":{\"230\":1}}],[\"box\",{\"1\":{\"230\":1}}],[\"bottom\",{\"1\":{\"230\":8}}],[\"border\",{\"1\":{\"230\":13}}],[\"bool\",{\"1\":{\"50\":1,\"52\":1}}],[\"bcnf到4nf消除了非平凡且非函数依赖的多值依赖\",{\"1\":{\"198\":1}}],[\"bcnf\",{\"1\":{\"198\":1}}],[\"bcnf去除主属性对于主键的部分依赖与传递依赖\",{\"1\":{\"144\":1}}],[\"bigger\",{\"1\":{\"104\":1,\"105\":1}}],[\"b\",{\"1\":{\"103\":2,\"119\":2,\"120\":4}}],[\"break\",{\"1\":{\"65\":1,\"230\":2}}],[\"buf2\",{\"1\":{\"101\":3}}],[\"buf1\",{\"1\":{\"101\":3}}],[\"buf\",{\"1\":{\"65\":3,\"67\":4,\"97\":5,\"104\":4,\"105\":6,\"108\":3,\"109\":3}}],[\"buffer\",{\"1\":{\"63\":1,\"97\":1,\"101\":1,\"104\":1}}],[\"bytes\",{\"1\":{\"91\":1,\"101\":2}}],[\"bytescanner\",{\"1\":{\"85\":1}}],[\"bytescanner接口在基本的readbyte方法之外还添加了unreadbyte方法\",{\"1\":{\"85\":1}}],[\"bytescanner接口\",{\"0\":{\"85\":1}}],[\"bytewriter\",{\"1\":{\"86\":1}}],[\"bytewriter接口\",{\"0\":{\"86\":1}}],[\"bytereader是基本的readbyte方法的包装\",{\"1\":{\"84\":1}}],[\"bytereader\",{\"1\":{\"84\":1,\"85\":1}}],[\"bytereader接口\",{\"0\":{\"84\":1}}],[\"byte\",{\"1\":{\"65\":3,\"66\":2,\"67\":1,\"81\":1,\"82\":1,\"84\":1,\"86\":1,\"92\":1,\"93\":1,\"94\":2,\"97\":2,\"103\":1,\"104\":4,\"105\":3,\"106\":2,\"108\":2,\"109\":2}}],[\"blog\",{\"1\":{\"52\":1}}],[\"background\",{\"0\":{\"53\":1},\"1\":{\"50\":2,\"53\":4,\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"230\":6}}],[\"before\",{\"1\":{\"58\":1}}],[\"be\",{\"1\":{\"32\":1,\"96\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":2,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":2}}],[\"ececec\",{\"1\":{\"230\":1}}],[\"email\",{\"1\":{\"230\":2}}],[\"empty\",{\"1\":{\"50\":1}}],[\"emptyctx\",{\"1\":{\"50\":6,\"53\":1,\"54\":1}}],[\"equiv=\",{\"1\":{\"230\":1}}],[\"ef|grep\",{\"1\":{\"162\":1}}],[\"efence\",{\"1\":{\"117\":1}}],[\"er图\",{\"1\":{\"138\":1}}],[\"errclosedpip\",{\"1\":{\"92\":1}}],[\"errclosedpipe\",{\"1\":{\"63\":1}}],[\"err2\",{\"1\":{\"65\":2}}],[\"errunexpectedeof表示在读取一个固定尺寸的块或者数据结构时\",{\"1\":{\"63\":1}}],[\"errunexpectedeof\",{\"1\":{\"63\":1}}],[\"errshortwrite表示写入操作写入的数据比提供的少\",{\"1\":{\"63\":1}}],[\"errshortwrite\",{\"1\":{\"63\":1}}],[\"errshortbuffer表示读取操作需要大缓冲\",{\"1\":{\"63\":1}}],[\"errshortbuffer\",{\"1\":{\"63\":1}}],[\"errnoprogress\",{\"1\":{\"63\":1}}],[\"err返回一个非nil错误\",{\"1\":{\"52\":1}}],[\"err返回nil\",{\"1\":{\"52\":1}}],[\"errors\",{\"1\":{\"63\":6}}],[\"error\",{\"1\":{\"50\":1,\"52\":1,\"59\":1,\"63\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"92\":4,\"93\":4,\"94\":3,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"104\":3,\"105\":2,\"106\":3,\"108\":1,\"109\":1,\"110\":1,\"113\":1}}],[\"err\",{\"1\":{\"50\":1,\"52\":1,\"58\":1,\"65\":8,\"66\":1,\"78\":3,\"79\":3,\"81\":2,\"82\":2,\"87\":1,\"89\":1,\"92\":2,\"93\":2,\"94\":2,\"96\":4,\"97\":7,\"98\":4,\"99\":3,\"100\":3,\"101\":3,\"102\":3,\"103\":3,\"104\":10,\"105\":7,\"106\":2,\"107\":3,\"108\":4,\"109\":4,\"110\":6,\"112\":3,\"113\":4}}],[\"everything\",{\"1\":{\"112\":1}}],[\"extra\",{\"1\":{\"97\":1}}],[\"exit\",{\"1\":{\"57\":1}}],[\"eof\",{\"1\":{\"63\":3,\"65\":5,\"78\":1,\"81\":2,\"93\":1,\"96\":1}}],[\"e\",{\"0\":{\"137\":2,\"205\":1},\"1\":{\"50\":2}}],[\"enhance\",{\"1\":{\"18\":1}}],[\"本科就读于苏州理工学院\",{\"1\":{\"237\":1}}],[\"本包的gomaxprocs函数可以查询和修改该限制\",{\"1\":{\"117\":1}}],[\"本身不包含任何值\",{\"1\":{\"50\":1}}],[\"本页面就是一个示例\",{\"1\":{\"4\":1}}],[\"名为emptyctx\",{\"1\":{\"50\":1}}],[\"空的\",{\"1\":{\"50\":1}}],[\"空\",{\"0\":{\"50\":1}}],[\"分页模板\",{\"1\":{\"229\":1}}],[\"分析和改造\",{\"1\":{\"207\":1}}],[\"分析或展示\",{\"1\":{\"140\":1}}],[\"分区等\",{\"1\":{\"138\":1}}],[\"分别可用于不同的场景\",{\"1\":{\"48\":1}}],[\"分类为\",{\"1\":{\"33\":1}}],[\"凡是实现该接口的类都可称为是一种\",{\"1\":{\"48\":1}}],[\"通道将被关闭\",{\"1\":{\"57\":1}}],[\"通道被关闭时\",{\"1\":{\"57\":1,\"58\":1}}],[\"通道的父进程的副本\",{\"1\":{\"57\":1}}],[\"通常命名为ctx\",{\"1\":{\"48\":1}}],[\"通过本科的学习经历\",{\"1\":{\"237\":1}}],[\"通过用户权限校验和合法性检查\",{\"1\":{\"195\":1}}],[\"通过游标\",{\"1\":{\"140\":1}}],[\"通过事务日志和数据备份等手段\",{\"1\":{\"129\":1}}],[\"通过事务日志和回滚操作\",{\"1\":{\"129\":1}}],[\"通过r执行的所有r读取均与对w的相应写入匹配\",{\"1\":{\"112\":1}}],[\"通过\",{\"1\":{\"15\":1,\"18\":1}}],[\"翻译成中文是\",{\"1\":{\"48\":1}}],[\"9\",{\"0\":{\"104\":1},\"1\":{\"44\":1,\"108\":1,\"117\":2,\"162\":3}}],[\"图标库\",{\"0\":{\"42\":1}}],[\"图标\",{\"0\":{\"41\":1}}],[\"图片引入\",{\"1\":{\"34\":1}}],[\"图片增强\",{\"0\":{\"27\":1}}],[\"资源链接\",{\"0\":{\"40\":1}}],[\"杂记\",{\"0\":{\"38\":1}}],[\"+\",{\"1\":{\"35\":1,\"117\":4}}],[\"日志文件是用来记录事务对数据库的更新操作的文件\",{\"1\":{\"146\":1}}],[\"日\",{\"1\":{\"33\":1}}],[\"月\",{\"1\":{\"33\":1}}],[\"年\",{\"1\":{\"33\":1}}],[\"please\",{\"1\":{\"230\":1}}],[\"plugin\",{\"1\":{\"18\":1}}],[\"p>\",{\"1\":{\"230\":3}}],[\"p><br>\",{\"1\":{\"230\":1}}],[\"position\",{\"1\":{\"230\":2}}],[\"pkill\",{\"1\":{\"162\":1}}],[\"purpose\",{\"1\":{\"103\":1}}],[\"public\",{\"1\":{\"34\":1}}],[\"p则\",{\"1\":{\"81\":1}}],[\"p的全部作为暂存空间\",{\"1\":{\"65\":1}}],[\"p\",{\"1\":{\"65\":2,\"66\":3,\"81\":5,\"82\":3,\"94\":2,\"106\":2,\"108\":1,\"109\":1,\"117\":1}}],[\"pipe创建一个同步的内存管道\",{\"1\":{\"102\":1}}],[\"pipewriter是一个管道的写入端\",{\"1\":{\"93\":1}}],[\"pipewriter\",{\"0\":{\"93\":1},\"1\":{\"93\":4,\"102\":1}}],[\"pipereader是一个管道的读取端\",{\"1\":{\"92\":1}}],[\"pipereader\",{\"0\":{\"92\":1},\"1\":{\"92\":4,\"102\":1}}],[\"pipe\",{\"0\":{\"102\":1},\"1\":{\"63\":1,\"102\":2}}],[\"pipelines\",{\"1\":{\"52\":1}}],[\"process\",{\"1\":{\"162\":2}}],[\"programming\",{\"1\":{\"103\":1}}],[\"propagatecancel\",{\"1\":{\"57\":1,\"58\":1}}],[\"print\",{\"1\":{\"101\":2}}],[\"printf\",{\"1\":{\"65\":1,\"67\":2,\"103\":1,\"104\":1,\"105\":1,\"108\":1,\"109\":1}}],[\"println\",{\"1\":{\"55\":2,\"57\":7,\"58\":2,\"59\":2,\"65\":2,\"104\":2,\"105\":1,\"111\":1,\"118\":2,\"119\":5,\"120\":3,\"121\":1,\"122\":1}}],[\"padding\",{\"1\":{\"230\":4}}],[\"paginate\",{\"1\":{\"229\":1}}],[\"pagesize\",{\"1\":{\"229\":9}}],[\"pagedto\",{\"1\":{\"229\":2}}],[\"page\",{\"1\":{\"32\":1,\"229\":10}}],[\"passed\",{\"1\":{\"58\":1}}],[\"panic\",{\"1\":{\"57\":1,\"58\":1}}],[\"package\",{\"1\":{\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"65\":1,\"66\":1,\"67\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"105\":1,\"107\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1}}],[\"parent\",{\"1\":{\"55\":1,\"57\":5,\"58\":8,\"59\":2}}],[\"png制作\",{\"1\":{\"44\":1}}],[\"h2>\",{\"1\":{\"230\":1}}],[\"h2o\",{\"1\":{\"21\":1}}],[\"http\",{\"1\":{\"230\":2}}],[\"https\",{\"1\":{\"52\":1}}],[\"html>\",{\"1\":{\"230\":2}}],[\"height\",{\"1\":{\"230\":7}}],[\"head>\",{\"1\":{\"230\":1}}],[\"here\",{\"1\":{\"97\":2}}],[\"hello\",{\"1\":{\"65\":1,\"66\":4,\"67\":1,\"113\":1,\"118\":1}}],[\"has\",{\"1\":{\"58\":1}}],[\"handelrequest\",{\"1\":{\"57\":4}}],[\"hope\",{\"1\":{\"33\":1}}],[\"h1\",{\"1\":{\"32\":2}}],[\"ff8c00\",{\"1\":{\"230\":1}}],[\"fff\",{\"1\":{\"230\":2}}],[\"fprint\",{\"1\":{\"102\":1}}],[\"fields\",{\"1\":{\"94\":1}}],[\"filtered\",{\"1\":{\"94\":1}}],[\"first\",{\"1\":{\"32\":1,\"97\":1,\"100\":2}}],[\"face=\",{\"1\":{\"230\":1}}],[\"family\",{\"1\":{\"230\":1}}],[\"fatal函数完成\",{\"1\":{\"96\":1}}],[\"fatal\",{\"1\":{\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"112\":1,\"113\":1}}],[\"false\",{\"1\":{\"58\":1}}],[\"favcontextkey\",{\"1\":{\"55\":4}}],[\"from\",{\"1\":{\"57\":1,\"58\":1,\"112\":1}}],[\"frontmatter\",{\"1\":{\"4\":1,\"10\":1,\"15\":3,\"32\":1,\"33\":1}}],[\"f\",{\"1\":{\"55\":3,\"65\":3,\"66\":3,\"67\":4}}],[\"fmt\",{\"1\":{\"55\":3,\"57\":8,\"58\":3,\"59\":3,\"65\":4,\"67\":3,\"101\":3,\"102\":2,\"103\":2,\"104\":4,\"105\":3,\"108\":2,\"109\":2,\"111\":2,\"118\":3,\"119\":6,\"120\":4,\"121\":2,\"122\":2}}],[\"font>\",{\"1\":{\"230\":4}}],[\"font\",{\"1\":{\"230\":4}}],[\"fontawesome\",{\"1\":{\"42\":1}}],[\"found\",{\"1\":{\"55\":2,\"240\":1}}],[\"for\",{\"1\":{\"52\":1,\"57\":4,\"65\":1,\"117\":1,\"118\":2,\"120\":2}}],[\"func\",{\"1\":{\"50\":5,\"51\":1,\"53\":1,\"54\":1,\"55\":3,\"57\":6,\"58\":5,\"59\":3,\"65\":1,\"66\":1,\"67\":1,\"91\":1,\"92\":3,\"93\":3,\"94\":6,\"96\":2,\"97\":2,\"98\":2,\"99\":2,\"100\":2,\"101\":2,\"102\":3,\"103\":2,\"104\":2,\"105\":2,\"106\":5,\"107\":2,\"108\":2,\"109\":2,\"110\":2,\"111\":2,\"112\":2,\"113\":2,\"117\":2,\"118\":2,\"119\":3,\"120\":3,\"121\":1,\"122\":1,\"229\":3}}],[\"table>\",{\"1\":{\"230\":1}}],[\"tbody>\",{\"1\":{\"230\":1}}],[\"td>\",{\"1\":{\"230\":1}}],[\"tr>\",{\"1\":{\"230\":2}}],[\"trigger\",{\"1\":{\"141\":1}}],[\"true\",{\"1\":{\"57\":1,\"58\":3}}],[\"text\",{\"1\":{\"230\":2}}],[\"teereader返回一个reader\",{\"1\":{\"112\":1}}],[\"teereader\",{\"0\":{\"112\":1},\"1\":{\"112\":2}}],[\"tee\",{\"1\":{\"101\":1}}],[\"test\",{\"1\":{\"57\":1}}],[\"txt初始内容为\",{\"1\":{\"66\":1}}],[\"txt内容更新为\",{\"1\":{\"66\":1}}],[\"txt内容为\",{\"1\":{\"65\":1,\"67\":1}}],[\"txt\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"this\",{\"1\":{\"230\":1}}],[\"third\",{\"1\":{\"100\":2}}],[\"th>\",{\"1\":{\"230\":1}}],[\"thymeleaf\",{\"1\":{\"230\":1}}],[\"th=\",{\"1\":{\"230\":1}}],[\"than\",{\"1\":{\"58\":1,\"104\":2,\"105\":1}}],[\"the\",{\"1\":{\"32\":1,\"58\":2}}],[\"top\",{\"1\":{\"230\":5}}],[\"to\",{\"1\":{\"57\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":2,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":2,\"230\":1}}],[\"todo\",{\"0\":{\"54\":1},\"1\":{\"50\":2,\"54\":4}}],[\"toc\",{\"1\":{\"10\":1}}],[\"type\",{\"1\":{\"50\":1,\"51\":1,\"52\":1,\"55\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"229\":1}}],[\"tip\",{\"1\":{\"157\":1}}],[\"tips\",{\"1\":{\"48\":1,\"62\":1,\"116\":1}}],[\"timestamp\",{\"1\":{\"143\":1}}],[\"timeout\",{\"1\":{\"59\":2}}],[\"timer\",{\"1\":{\"58\":1}}],[\"timerctx\",{\"1\":{\"58\":1}}],[\"time\",{\"1\":{\"50\":2,\"52\":2,\"57\":12,\"58\":9,\"59\":7,\"120\":3}}],[\"title\",{\"1\":{\"32\":3}}],[\"xmlns\",{\"1\":{\"230\":1}}],[\"x锁\",{\"1\":{\"214\":1}}],[\"x\",{\"1\":{\"26\":1,\"230\":1}}],[\"标准库\",{\"0\":{\"46\":1},\"2\":{\"47\":1,\"61\":1,\"115\":1,\"124\":1}}],[\"标签为\",{\"1\":{\"33\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"32\":1}}],[\"标题和页面信息\",{\"1\":{\"10\":1}}],[\"标记\",{\"0\":{\"25\":1}}],[\"脚注\",{\"0\":{\"24\":1}}],[\"的样式\",{\"1\":{\"230\":1}}],[\"的区别是什么\",{\"0\":{\"131\":1,\"149\":1}}],[\"的os线程数\",{\"1\":{\"120\":2}}],[\"的返回值\",{\"1\":{\"78\":1,\"79\":1}}],[\"的含义\",{\"1\":{\"67\":1}}],[\"的实现会阻止返回零字节的计数和一个\",{\"1\":{\"65\":1}}],[\"的字节\",{\"1\":{\"65\":1}}],[\"的父节点\",{\"1\":{\"50\":1}}],[\"的根节点\",{\"1\":{\"50\":1}}],[\"的意思\",{\"1\":{\"48\":1}}],[\"的\",{\"1\":{\"23\":1,\"32\":1,\"33\":1}}],[\"ie=edge\",{\"1\":{\"230\":1}}],[\"i++\",{\"1\":{\"117\":1,\"118\":2,\"120\":2}}],[\"io\",{\"1\":{\"63\":1,\"65\":2,\"96\":3,\"97\":3,\"98\":3,\"99\":4,\"100\":3,\"101\":4,\"102\":5,\"103\":2,\"104\":6,\"105\":5,\"107\":4,\"108\":3,\"109\":3,\"110\":5,\"111\":3,\"112\":5,\"113\":2}}],[\"io包中提供i\",{\"1\":{\"62\":1}}],[\"isolation\",{\"1\":{\"129\":1}}],[\"is\",{\"1\":{\"58\":1,\"97\":1,\"103\":1}}],[\"if\",{\"1\":{\"55\":1,\"57\":1,\"58\":4,\"65\":2,\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":3,\"105\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"112\":1,\"113\":1,\"229\":1}}],[\"import\",{\"1\":{\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"65\":1,\"66\":1,\"67\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1}}],[\"i\",{\"0\":{\"62\":1},\"1\":{\"35\":1,\"117\":3,\"118\":4,\"120\":6,\"162\":1}}],[\"initial\",{\"1\":{\"230\":5}}],[\"instead\",{\"1\":{\"194\":1}}],[\"int64\",{\"1\":{\"67\":2,\"78\":1,\"79\":1,\"81\":1,\"82\":1,\"91\":2,\"94\":6,\"96\":1,\"97\":1,\"98\":2,\"99\":1,\"106\":6,\"107\":2,\"109\":1,\"110\":2,\"111\":1}}],[\"interface\",{\"1\":{\"52\":1,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1}}],[\"int\",{\"1\":{\"50\":1,\"65\":1,\"66\":1,\"67\":1,\"81\":1,\"82\":1,\"87\":1,\"89\":1,\"92\":1,\"93\":1,\"94\":3,\"104\":2,\"105\":1,\"106\":3,\"108\":1,\"109\":1,\"110\":1,\"113\":1,\"117\":2,\"229\":2}}],[\"in\",{\"1\":{\"32\":1,\"103\":1}}],[\"id来强制关闭应用\",{\"1\":{\"162\":1}}],[\"id\",{\"1\":{\"23\":1}}],[\"it\",{\"1\":{\"16\":2,\"57\":1}}],[\"我掌握了计算机的基本原理\",{\"1\":{\"237\":1}}],[\"我已经完成了全部的专业课程学习\",{\"1\":{\"237\":1}}],[\"我叫李亚军\",{\"1\":{\"237\":1}}],[\"我们可以通过将任务分配到不同的cpu逻辑核心上\",{\"1\":{\"120\":1}}],[\"我在右对齐\",{\"1\":{\"22\":1}}],[\"我是居中的\",{\"1\":{\"22\":1}}],[\"上下文键通常有具体的类型struct\",{\"1\":{\"55\":1}}],[\"上下文值只用于传递进程和api的请求范围内的数据\",{\"1\":{\"55\":1}}],[\"上下文值仅用于传输进程和api的请求范围数据\",{\"1\":{\"48\":1}}],[\"上下文的方法可以被多个\",{\"1\":{\"52\":1}}],[\"上下文应该是第一个参数\",{\"1\":{\"48\":1}}],[\"上下文\",{\"1\":{\"48\":1}}],[\"上下角标\",{\"0\":{\"21\":1}}],[\"上一篇\",{\"1\":{\"4\":1}}],[\"详情容器\",{\"1\":{\"19\":1}}],[\"危险容器\",{\"1\":{\"19\":1}}],[\"警告容器\",{\"1\":{\"19\":1}}],[\"=0\",{\"1\":{\"118\":1}}],[\"==\",{\"1\":{\"57\":1,\"58\":2,\"65\":5,\"96\":2,\"98\":2,\"104\":1,\"105\":2,\"229\":1}}],[\"=\",{\"1\":{\"19\":1,\"53\":1,\"54\":1,\"55\":5,\"57\":2,\"58\":7,\"59\":3,\"63\":6,\"65\":4,\"66\":1,\"67\":3,\"81\":1,\"96\":3,\"97\":7,\"98\":3,\"99\":4,\"100\":6,\"101\":4,\"102\":3,\"103\":3,\"104\":11,\"105\":7,\"107\":4,\"108\":5,\"109\":5,\"110\":6,\"111\":2,\"112\":4,\"113\":2,\"117\":4,\"118\":1,\"120\":3,\"229\":6}}],[\"auto\",{\"1\":{\"230\":2}}],[\"atomicity\",{\"1\":{\"129\":1}}],[\"attrs\",{\"0\":{\"23\":1}}],[\"archive\",{\"1\":{\"122\":1}}],[\"an\",{\"1\":{\"97\":1}}],[\"any\",{\"1\":{\"50\":2,\"52\":2,\"55\":1}}],[\"append\",{\"1\":{\"66\":1}}],[\"api\",{\"1\":{\"48\":1}}],[\"after\",{\"1\":{\"58\":1,\"59\":1}}],[\"afterfunc\",{\"1\":{\"58\":1}}],[\"add\",{\"1\":{\"58\":1,\"59\":1,\"119\":1,\"120\":4}}],[\"align\",{\"1\":{\"230\":2}}],[\"align=\",{\"1\":{\"230\":1}}],[\"also\",{\"1\":{\"97\":1}}],[\"already\",{\"1\":{\"58\":2}}],[\"allocfreetrace\",{\"1\":{\"117\":1}}],[\"allocate\",{\"1\":{\"97\":1}}],[\"all\",{\"1\":{\"57\":1,\"230\":1}}],[\"as\",{\"1\":{\"32\":1}}],[\"a\",{\"1\":{\"19\":1,\"65\":1,\"66\":2,\"67\":1,\"103\":1,\"119\":2,\"120\":4}}],[\"与\",{\"1\":{\"19\":1}}],[\"代码就应该调用cancel\",{\"1\":{\"59\":1}}],[\"代码应立即调用cancel\",{\"1\":{\"57\":1,\"58\":1}}],[\"代码应该使用上下文\",{\"1\":{\"54\":1}}],[\"代码块\",{\"0\":{\"20\":1}}],[\"代码\",{\"1\":{\"19\":1}}],[\"信息容器\",{\"1\":{\"19\":1}}],[\"viewport\",{\"1\":{\"230\":1}}],[\"v\",{\"1\":{\"55\":3,\"65\":1,\"67\":2,\"230\":1}}],[\"valign=\",{\"1\":{\"230\":1}}],[\"val\",{\"1\":{\"55\":1}}],[\"value返回与此上下文关联的value\",{\"1\":{\"52\":1}}],[\"value\",{\"1\":{\"50\":1,\"52\":2,\"55\":2}}],[\"var\",{\"1\":{\"53\":1,\"54\":1,\"63\":6,\"101\":1,\"112\":1,\"119\":1,\"120\":1}}],[\"variable\",{\"1\":{\"19\":1}}],[\"vue\",{\"1\":{\"35\":2}}],[\"vuepress\",{\"0\":{\"17\":1},\"1\":{\"13\":2,\"15\":2,\"16\":1,\"17\":2,\"18\":1,\"34\":1}}],[\"提交的事务\",{\"1\":{\"222\":1}}],[\"提高吞吐量和资源的利用率\",{\"1\":{\"209\":1}}],[\"提高系统可用性\",{\"1\":{\"147\":1}}],[\"提高性能并增强容错处理能力\",{\"1\":{\"146\":1}}],[\"提供实用程序完成数据库的批量装载\",{\"1\":{\"169\":1}}],[\"提供数据的持久存储和有效访问\",{\"1\":{\"169\":1}}],[\"提供数据操纵语言dml\",{\"1\":{\"169\":1}}],[\"提供数据定义语言ddl\",{\"1\":{\"169\":1}}],[\"提供业务含义\",{\"1\":{\"139\":1}}],[\"提供的键必须具有可比性\",{\"1\":{\"55\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"18\":1}}],[\"提示\",{\"1\":{\"48\":1}}],[\"提示容器\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"mess\",{\"2\":{\"239\":1}}],[\"mvcc\",{\"1\":{\"143\":1}}],[\"m\",{\"1\":{\"117\":2}}],[\"mb\",{\"1\":{\"117\":2}}],[\"middle\",{\"1\":{\"230\":1}}],[\"minimal\",{\"1\":{\"104\":2,\"105\":1}}],[\"min\",{\"1\":{\"104\":2}}],[\"mind\",{\"1\":{\"103\":1}}],[\"millisecond\",{\"1\":{\"58\":1,\"59\":2}}],[\"multiwriter创建一个writers\",{\"1\":{\"101\":1}}],[\"multiwriter\",{\"0\":{\"101\":1},\"1\":{\"101\":2}}],[\"multireader返回一个reader\",{\"1\":{\"100\":1}}],[\"multireader\",{\"0\":{\"100\":1},\"1\":{\"100\":2}}],[\"multiple\",{\"1\":{\"63\":1}}],[\"mu\",{\"1\":{\"58\":2}}],[\"margin\",{\"1\":{\"230\":4}}],[\"markdown\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1},\"1\":{\"13\":2,\"14\":3,\"15\":1,\"16\":3,\"17\":2,\"18\":1,\"19\":1,\"32\":3,\"33\":1,\"34\":2,\"35\":2},\"2\":{\"30\":1}}],[\"map\",{\"1\":{\"117\":1}}],[\"max\",{\"1\":{\"91\":1}}],[\"make\",{\"1\":{\"65\":1,\"67\":1,\"97\":1,\"104\":3,\"105\":2,\"108\":1,\"109\":1,\"117\":2}}],[\"main\",{\"1\":{\"55\":2,\"57\":2,\"58\":2,\"59\":2,\"65\":2,\"66\":2,\"67\":2,\"96\":2,\"97\":2,\"98\":2,\"99\":2,\"100\":2,\"101\":2,\"102\":2,\"103\":2,\"104\":1,\"105\":2,\"107\":2,\"108\":1,\"109\":2,\"110\":2,\"111\":2,\"112\":2,\"113\":2,\"117\":3,\"118\":2,\"119\":2,\"120\":2,\"121\":2,\"122\":2}}],[\"ms\",{\"1\":{\"33\":1,\"117\":2}}],[\"more\",{\"1\":{\"31\":1}}],[\"md\",{\"1\":{\"18\":1}}],[\"请勿回复<br>\",{\"1\":{\"230\":1}}],[\"请尽快填写验证码完成验证\",{\"1\":{\"230\":1}}],[\"请求进程被阻塞\",{\"1\":{\"153\":1}}],[\"请求进程只能等待\",{\"1\":{\"153\":1}}],[\"请求和保持条件\",{\"1\":{\"153\":1}}],[\"请使用绝对链接\",{\"1\":{\"34\":1}}],[\"请阅读\",{\"1\":{\"17\":1}}],[\"请先阅读\",{\"1\":{\"14\":1}}],[\"对每个undo事务执行回滚操作\",{\"1\":{\"221\":1}}],[\"对每个redo事务重新执行日志文件的登记操作\",{\"1\":{\"221\":1}}],[\"对任何数据读写之前\",{\"1\":{\"218\":1}}],[\"对所设计的物理结构进行评价\",{\"1\":{\"206\":1}}],[\"对不同的用户定义视图\",{\"1\":{\"195\":1}}],[\"对日志的更新操作进行逆操作\",{\"1\":{\"156\":1}}],[\"对数据库的修改将永久保存\",{\"1\":{\"129\":1}}],[\"对读的并行调用和对写的并行调用也是安全的\",{\"1\":{\"102\":1}}],[\"对cancelfunc的后续调用什么也不做\",{\"1\":{\"51\":1}}],[\"对于任意已提交的事务\",{\"1\":{\"211\":1}}],[\"对于一个给定的应用环境\",{\"1\":{\"201\":1}}],[\"对于传输的信息进行加密\",{\"1\":{\"195\":1}}],[\"对于关系数据库而言\",{\"1\":{\"168\":1}}],[\"对于\",{\"1\":{\"34\":1}}],[\"对\",{\"1\":{\"17\":1}}],[\"为什么要并发\",{\"0\":{\"209\":1}}],[\"为什么范式会出现\",{\"0\":{\"197\":1}}],[\"为\",{\"1\":{\"67\":3}}],[\"为了避免分配\",{\"1\":{\"55\":1}}],[\"为了丰富文档写作\",{\"1\":{\"17\":1}}],[\"为每个\",{\"1\":{\"15\":1}}],[\"扩展\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"17\":1}}],[\"中文\",{\"1\":{\"230\":1}}],[\"中写入直到将\",{\"1\":{\"81\":1}}],[\"中写入到基本数据流中\",{\"1\":{\"66\":1}}],[\"中读取数据到对象的数据流中\",{\"1\":{\"78\":1}}],[\"中被写入的字节数n\",{\"1\":{\"66\":1}}],[\"中\",{\"0\":{\"130\":1},\"1\":{\"65\":1,\"79\":1,\"81\":1}}],[\"中设置页面信息\",{\"1\":{\"33\":1}}],[\"中设置页面标题\",{\"1\":{\"32\":1}}],[\"中使用\",{\"1\":{\"19\":1,\"35\":1}}],[\"中的数据写入到对象数据流的\",{\"1\":{\"82\":1}}],[\"中的第一个\",{\"1\":{\"32\":1}}],[\"中的\",{\"1\":{\"17\":1}}],[\"中很重要的一个概念\",{\"1\":{\"15\":1}}],[\"中自定义它们\",{\"1\":{\"10\":1}}],[\"是充分条件\",{\"1\":{\"218\":1}}],[\"是数据在数据库内部的表示方式\",{\"1\":{\"172\":1}}],[\"是数据物理结构和存储方式的描述\",{\"1\":{\"172\":1}}],[\"是数据库的一种自动处理机制\",{\"1\":{\"194\":1}}],[\"是数据库的整体逻辑结构和组织方式的描述\",{\"1\":{\"151\":1,\"172\":1}}],[\"是数据库存储在物理介质上的实际存储结构和存取路径的描述\",{\"1\":{\"151\":1}}],[\"是数据库管理系统中的一种特殊类型的存储过程\",{\"1\":{\"141\":1}}],[\"是对系统的动态描述\",{\"1\":{\"171\":1}}],[\"是对数据的静态描述\",{\"1\":{\"171\":1}}],[\"是一个事务在等待资源的过程中\",{\"1\":{\"215\":1}}],[\"是一个不可分割的执行单元\",{\"1\":{\"128\":1,\"210\":1}}],[\"是一种重要的程序设计系统\",{\"1\":{\"168\":1}}],[\"是一种软件工具\",{\"1\":{\"154\":1}}],[\"是指保护数据库\",{\"1\":{\"189\":1}}],[\"是指数据库中数据的正确性\",{\"1\":{\"189\":1}}],[\"是指系统中的若干进程或线程因争夺资源而陷入一种循环等待的状态\",{\"1\":{\"153\":1}}],[\"是指针移动的偏移量\",{\"1\":{\"67\":1}}],[\"是用户或应用程序能够看到和访问的数据库的部分\",{\"1\":{\"151\":1,\"172\":1}}],[\"是元数据\",{\"1\":{\"139\":1}}],[\"是写入的字节数\",{\"1\":{\"79\":1}}],[\"是读取的字节数\",{\"1\":{\"78\":1}}],[\"是\",{\"1\":{\"15\":1,\"48\":1}}],[\"配置\",{\"0\":{\"15\":1}}],[\"演示\",{\"1\":{\"14\":1}}],[\"和读取时遇到的错误\",{\"1\":{\"81\":1}}],[\"和进程之间传递截止日期\",{\"1\":{\"48\":1}}],[\"和\",{\"0\":{\"149\":1},\"1\":{\"14\":1,\"33\":1,\"65\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"35\":1}}],[\"你需要阅读\",{\"1\":{\"15\":1}}],[\"你应该创建和编写\",{\"1\":{\"13\":1}}],[\"你可以将图片和\",{\"1\":{\"34\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"34\":1}}],[\"你可以在\",{\"1\":{\"32\":1,\"33\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"10\":1}}],[\"你可以标记\",{\"1\":{\"25\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"13\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"4\":1}}],[\"主体部分\",{\"1\":{\"194\":1}}],[\"主要是保证事务的隔离性和数据库的一致性\",{\"1\":{\"209\":1}}],[\"主要作用是保证数据库的安全性\",{\"1\":{\"194\":1}}],[\"主要从\",{\"1\":{\"13\":1}}],[\"主属性\",{\"1\":{\"176\":1}}],[\"主码\",{\"1\":{\"176\":1}}],[\"主键\",{\"1\":{\"138\":1}}],[\"主在结束\",{\"1\":{\"119\":1}}],[\"主goroutine等待子goroutine结束\",{\"1\":{\"119\":1}}],[\"主题扩展了更多\",{\"1\":{\"18\":1}}],[\"主题扩展\",{\"0\":{\"18\":1}}],[\"主题也带有以下元素\",{\"1\":{\"10\":1}}],[\"展示\",{\"0\":{\"13\":1}}],[\"夜间模式按钮\",{\"1\":{\"10\":1}}],[\"文件以读取完毕\",{\"1\":{\"65\":1}}],[\"文件夹的图片\",{\"1\":{\"34\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"34\":1}}],[\"文件\",{\"1\":{\"13\":1}}],[\"文件生成页面\",{\"1\":{\"13\":1}}],[\"文章标题列表\",{\"1\":{\"10\":1}}],[\"文字\",{\"1\":{\"7\":2}}],[\"文字段落\",{\"1\":{\"7\":24}}],[\"布局包括\",{\"1\":{\"10\":1}}],[\"布局\",{\"0\":{\"10\":1},\"2\":{\"12\":1}}],[\"布局与功能禁用\",{\"0\":{\"4\":1}}],[\"22px\",{\"1\":{\"230\":1}}],[\"20px\",{\"1\":{\"230\":2}}],[\"2020\",{\"1\":{\"33\":1}}],[\"255\",{\"1\":{\"230\":3}}],[\"25px\",{\"1\":{\"230\":3}}],[\"211\",{\"1\":{\"230\":2}}],[\"2nf到3nf消除了非主属性对码的传递函数依赖\",{\"1\":{\"198\":1}}],[\"2nf\",{\"1\":{\"198\":1}}],[\"2nf去除非主属性对于主属性的部分依赖\",{\"1\":{\"144\":1}}],[\"2\",{\"0\":{\"51\":1,\"56\":1,\"57\":1,\"58\":2,\"59\":1,\"64\":1,\"65\":1,\"66\":2,\"67\":1,\"68\":1,\"71\":1,\"79\":1,\"82\":1,\"85\":1,\"92\":1,\"97\":1,\"108\":1,\"118\":1},\"1\":{\"7\":14,\"26\":1,\"57\":3,\"67\":1,\"96\":1,\"117\":2,\"118\":2,\"139\":1,\"179\":1}}],[\"1px\",{\"1\":{\"230\":2}}],[\"15px\",{\"1\":{\"230\":1}}],[\"153\",{\"1\":{\"230\":3}}],[\"1nf到2nf消除了非码属性对部分函数的依赖\",{\"1\":{\"198\":1}}],[\"1nf\",{\"1\":{\"198\":1}}],[\"1nf保证原子性\",{\"1\":{\"144\":1}}],[\"13\",{\"0\":{\"113\":1}}],[\"17\",{\"1\":{\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1}}],[\"11\",{\"0\":{\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1},\"1\":{\"117\":2}}],[\"148\",{\"1\":{\"230\":2}}],[\"14px\",{\"1\":{\"230\":1}}],[\"14\",{\"1\":{\"104\":1}}],[\"10px\",{\"1\":{\"230\":2}}],[\"10\",{\"0\":{\"105\":1},\"1\":{\"67\":1,\"109\":1,\"110\":1,\"117\":2,\"229\":1}}],[\"100vh\",{\"1\":{\"230\":1}}],[\"100000000\",{\"1\":{\"120\":2}}],[\"100\",{\"1\":{\"59\":1,\"229\":2}}],[\"12px\",{\"1\":{\"230\":1}}],[\"12\",{\"0\":{\"112\":1},\"1\":{\"65\":1}}],[\"19th\",{\"1\":{\"21\":1}}],[\"1\",{\"0\":{\"49\":1,\"50\":2,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"57\":1,\"63\":1,\"65\":1,\"70\":1,\"78\":1,\"81\":1,\"84\":1,\"91\":1,\"96\":1,\"107\":1,\"117\":1},\"1\":{\"7\":12,\"19\":1,\"24\":1,\"26\":1,\"33\":2,\"35\":2,\"58\":2,\"59\":2,\"67\":1,\"96\":1,\"101\":1,\"117\":3,\"119\":1,\"120\":6,\"139\":1,\"168\":1,\"229\":2,\"230\":2}}],[\"段落\",{\"1\":{\"7\":2}}],[\"密码加密的文章\",{\"0\":{\"7\":1}}],[\"禁用\",{\"2\":{\"6\":1}}],[\"禁用了如下功能\",{\"1\":{\"4\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"35\":1}}],[\"页面内容\",{\"0\":{\"34\":1}}],[\"页面标题\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"页面配置\",{\"0\":{\"31\":1},\"1\":{\"33\":1},\"2\":{\"37\":1}}],[\"页面引入配置\",{\"1\":{\"15\":1}}],[\"页面信息\",{\"0\":{\"33\":1},\"1\":{\"4\":1}}],[\"页脚\",{\"1\":{\"4\":1,\"10\":1}}],[\"评论\",{\"1\":{\"4\":1,\"10\":1}}],[\"贡献者\",{\"1\":{\"4\":1,\"10\":1}}],[\"路径导航\",{\"1\":{\"4\":1,\"10\":1}}],[\"侧边栏\",{\"1\":{\"4\":1,\"10\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
