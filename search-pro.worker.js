const L=Object.entries,st=Object.fromEntries,nt="ENTRIES",T="KEYS",R="VALUES",_="";class k{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case R:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const m=c[h],g=i*a,p=g-i;let l=o[g];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const D=m!==t[F],z=o[p+F]+ +D,A=o[p+F+1]+1,w=o[g+F]+1,V=o[g+F+1]=Math.min(z,A,w);V<l&&(l=V)}if(l>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new k(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new k(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new k(this,R)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)q(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},q=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)q(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",N="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},H=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},mt=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?J(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},U={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},Ft={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},X=Symbol("*"),At=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=dt[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],m=o.get(h);if(m==null)continue;let g=m.size;const p=e._avgFieldLength[h];for(const l of m.keys()){if(!e._documentIds.has(l)){mt(e,h,l,s),g-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=m.get(l),F=e._fieldLength.get(l)[h],D=at(y,g,e._documentCount,F,p,r),z=n*a*f*D,A=d.get(l);if(A){A.score+=z,lt(A.terms,t);const w=H(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:H(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...U.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let g,p;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(g)for(const[l,f]of g){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);B(e,t.term,l,F,f,o,u,d,m)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);B(e,t.term,l,F,f,o,u,d,m)}return m},Q=(e,t,s={})=>{if(t===X)return At(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>Q(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},Z=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===X&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Z(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class zt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...U,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const wt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new zt(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[m,g]of h._documentIds)h._idToShortId.set(g,m);for(const[m,g]of e){const p=new Map;for(const l of Object.keys(g)){let f=g[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(m,p)}return h},j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),bt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),m=Number(a),g=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[m]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:m,index:h,display:g.map(l=>o.c.map(f=>j(f,l))).flat().filter(l=>l!==null)},r]);else{const l=g.map(f=>j(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:m,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=g.map(F=>j(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:m,...c&&{anchor:h},display:y},r])}}}),L(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):bt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},et=(e,t,s={})=>Et(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),v=st(L(JSON.parse("{\"/\":{\"documentCount\":105,\"nextId\":105,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"2\",\"3\":\"2@0\",\"4\":\"3\",\"5\":\"3@0\",\"6\":\"3@1\",\"7\":\"4\",\"8\":\"4@0\",\"9\":\"4@1\",\"10\":\"5\",\"11\":\"5@0\",\"12\":\"5@1\",\"13\":\"6\",\"14\":\"6#markdown-介绍\",\"15\":\"6#markdown-配置\",\"16\":\"6#markdown-扩展\",\"17\":\"6#vuepress-扩展\",\"18\":\"6#主题扩展\",\"19\":\"6#提示容器\",\"20\":\"6#代码块\",\"21\":\"6#上下角标\",\"22\":\"6#自定义对齐\",\"23\":\"6#attrs\",\"24\":\"6#脚注\",\"25\":\"6#标记\",\"26\":\"6#任务列表\",\"27\":\"6#图片增强\",\"28\":\"6#组件\",\"29\":\"6@0\",\"30\":\"6@1\",\"31\":\"7\",\"32\":\"7#页面标题\",\"33\":\"7#页面信息\",\"34\":\"7#页面内容\",\"35\":\"7#组件\",\"36\":\"7@0\",\"37\":\"7@1\",\"38\":\"9\",\"39\":\"9@0\",\"40\":\"10\",\"41\":\"10#图标\",\"42\":\"11\",\"43\":\"11@0\",\"44\":\"12\",\"45\":\"12#_1-错误变量\",\"46\":\"12#_2-基础接口\",\"47\":\"12#_2-1-reader接口\",\"48\":\"12#_2-2-writer接口\",\"49\":\"12#_2-3-seeker接口\",\"50\":\"12#_2-4-closer接口\",\"51\":\"12#_3-组合接口\",\"52\":\"12#_3-1-readwriter接口\",\"53\":\"12#_3-2-readcloser接口\",\"54\":\"12#_3-3-writecloser接口\",\"55\":\"12#_3-4-readwritecloser接口\",\"56\":\"12#_3-5-readseeker接口\",\"57\":\"12#_3-6-writeseeker接口\",\"58\":\"12#_3-7-readwriteseeker接口\",\"59\":\"12#_4-指定读写器读写接口\",\"60\":\"12#_4-1-readerfrom接口\",\"61\":\"12#_4-2-writerto接口\",\"62\":\"12#_5-指定偏移量读写接口\",\"63\":\"12#_5-1-readerat接口\",\"64\":\"12#_5-2-writerat接口\",\"65\":\"12#_6-单个字节读写接口\",\"66\":\"12#_6-1-bytereader接口\",\"67\":\"12#_6-2-bytescanner接口\",\"68\":\"12#_6-3-bytewriter接口\",\"69\":\"12#_6-4-runereader接口\",\"70\":\"12#_6-5-runescanner接口\",\"71\":\"12#_6-6-stringwriter接口\",\"72\":\"12#_7-结构体\",\"73\":\"12#_7-1-limitedreader\",\"74\":\"12#_7-2-pipereader\",\"75\":\"12#_7-3-pipewriter\",\"76\":\"12#_7-4-sectionreader\",\"77\":\"12#_8-供外部调用的函数\",\"78\":\"12#_8-1-copy\",\"79\":\"12#_8-2-copybuffer\",\"80\":\"12#_8-3-copyn\",\"81\":\"12#_8-4-limitreader\",\"82\":\"12#_8-5-multireader\",\"83\":\"12#_8-6-multiwriter\",\"84\":\"12#_8-7-pipe\",\"85\":\"12#_8-8-readall\",\"86\":\"12#_8-9-readatleast\",\"87\":\"12#_8-10-readfull\",\"88\":\"12#_8-11-sectionreader\",\"89\":\"12#_8-11-1-newsectionreader\",\"90\":\"12#_8-11-2-sectionreader-read\",\"91\":\"12#_8-11-3-sectionreader-readat\",\"92\":\"12#_8-11-4-sectionreader-seek\",\"93\":\"12#_8-11-5-sectionreader-size\",\"94\":\"12#_8-12-teereader\",\"95\":\"12#_8-13-writestring\",\"96\":\"12@1\",\"97\":\"13\",\"98\":\"14\",\"99\":\"14#端口占用\",\"100\":\"14@1\",\"101\":\"15\",\"102\":\"16\",\"103\":\"16@1\",\"104\":\"17\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1],\"3\":[null,null,1],\"4\":[1,18],\"5\":[null,null,1],\"6\":[null,null,1],\"7\":[1,7],\"8\":[null,null,1],\"9\":[null,null,1],\"10\":[1,20],\"11\":[null,null,1],\"12\":[null,null,1],\"13\":[2,11],\"14\":[2,8],\"15\":[2,13],\"16\":[2,11],\"17\":[2,10],\"18\":[1,10],\"19\":[1,19],\"20\":[1,1],\"21\":[1,3],\"22\":[1,3],\"23\":[1,5],\"24\":[1,2],\"25\":[1,3],\"26\":[1,6],\"27\":[1,2],\"28\":[1],\"29\":[null,null,1],\"30\":[null,null,1],\"31\":[1,3],\"32\":[1,19],\"33\":[1,20],\"34\":[1,12],\"35\":[1,13],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[1],\"39\":[null,null,1],\"40\":[1],\"41\":[1,1],\"42\":[1],\"43\":[null,null,1],\"44\":[2,8],\"45\":[2,44],\"46\":[2],\"47\":[3,93],\"48\":[2,49],\"49\":[3,56],\"50\":[3,18],\"51\":[2,3],\"52\":[3,7],\"53\":[3,10],\"54\":[2,7],\"55\":[3,8],\"56\":[3,7],\"57\":[3,7],\"58\":[3,7],\"59\":[2],\"60\":[3,21],\"61\":[3,17],\"62\":[2],\"63\":[3,49],\"64\":[3,25],\"65\":[2],\"66\":[3,11],\"67\":[3,11],\"68\":[3,9],\"69\":[3,16],\"70\":[3,12],\"71\":[2,11],\"72\":[2],\"73\":[3,21],\"74\":[3,31],\"75\":[3,34],\"76\":[3,40],\"77\":[2],\"78\":[3,56],\"79\":[3,57],\"80\":[3,45],\"81\":[3,35],\"82\":[3,39],\"83\":[3,46],\"84\":[3,48],\"85\":[2,43],\"86\":[3,60],\"87\":[3,53],\"88\":[3,33],\"89\":[4,37],\"90\":[5,38],\"91\":[5,42],\"92\":[5,47],\"93\":[5,28],\"94\":[3,41],\"95\":[3,31],\"96\":[null,null,3],\"97\":[1],\"98\":[2],\"99\":[1,16],\"100\":[null,null,1],\"101\":[1],\"102\":[2],\"103\":[null,null,1],\"104\":[1,3]},\"averageFieldLength\":[2.05879575708217,18.518679566477505,0.8959587966004382],\"storedFields\":{\"0\":{\"h\":\"简介\"},\"1\":{\"c\":[\"golang\"]},\"2\":{\"h\":\"写作指南\"},\"3\":{\"c\":[\"使用指南\"]},\"4\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"c\":[\"禁用\"]},\"7\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"8\":{\"c\":[\"使用指南\"]},\"9\":{\"c\":[\"加密\"]},\"10\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"11\":{\"c\":[\"指南\"]},\"12\":{\"c\":[\"布局\"]},\"13\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"14\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"15\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"16\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"17\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"18\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"19\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"20\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"21\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"22\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"23\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"24\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"25\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"26\":{\"h\":\"任务列表\",\"t\":[\"[x] 计划 1\",\"[ ] 计划 2\",\"查看详情\"]},\"27\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"28\":{\"h\":\"组件\"},\"29\":{\"c\":[\"使用指南\"]},\"30\":{\"c\":[\"Markdown\"]},\"31\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"32\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 --- \"]},\"33\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"34\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"35\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"36\":{\"c\":[\"使用指南\"]},\"37\":{\"c\":[\"页面配置\",\"使用指南\"]},\"38\":{\"h\":\"杂记\"},\"39\":{\"c\":[\"使用指南\"]},\"40\":{\"h\":\"资源链接\"},\"41\":{\"h\":\"图标\",\"t\":[\"fontawesome\"]},\"42\":{\"h\":\"标准库\"},\"43\":{\"c\":[\"标准库\"]},\"44\":{\"h\":\"I/O标准库\",\"t\":[\"io包中提供I/O原始操作的一系列接口。它主要包装了一些已有的实现，如 os 包中的那些，并将这些抽象成为实用性的功能和一些其他相关的接口。\"]},\"45\":{\"h\":\"1. 错误变量\",\"t\":[\"var EOF = errors.New(“EOF”) 正常输入结束Read返回EOF，如果在一个结构化数据流中EOF在不期望的位置出现了，则应返回错误ErrUnexpectedEOF或者其它给出更多细节的错误。\",\"var ErrClosedPipe = errors.New(“io: read/write on closed pipe”) 当从一个已关闭的Pipe读取或者写入时，会返回ErrClosedPipe。\",\"var ErrNoProgress = errors.New(“multiple Read calls return no data or error”) 某些使用io.Reader接口的客户端如果多次调用Read都不返回数据也不返回错误时，就会返回本错误，一般来说是io.Reader的实现有问题的标志。\",\"var ErrShortBuffer = errors.New(“short buffer”) ErrShortBuffer表示读取操作需要大缓冲，但提供的缓冲不够大。\",\"var ErrShortWrite = errors.New(“short write”) ErrShortWrite表示写入操作写入的数据比提供的少，却没有显式的返回错误。\",\"var ErrUnexpectedEOF = errors.New(“unexpected EOF”) ErrUnexpectedEOF表示在读取一个固定尺寸的块或者数据结构时，在读取未完全时遇到了EOF。\"]},\"46\":{\"h\":\"2. 基础接口\"},\"47\":{\"h\":\"2.1 Reader接口\",\"t\":[\"type Reader interface { Read(p []byte) (n int, err error) } \",\"Read 将 len个字节读取到 p 中。它返回读取的字节数 n（0 <= n <= len）以及任何遇到的错误。即使 Read 返回的 n < len，它也会在调用过程中使用 p的全部作为暂存空间。若一些数据可用但不到 len 个字节，Read 会照例返回可用的东西，而不是等待更多。\",\"当 Read 在成功读取 n > 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数，可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。\",\"调用者应当总在考虑到错误 err 前处理 n > 0 的字节。这样做可以在读取一些字节，以及允许的 EOF 行为后正确地处理I/O错误。\",\"Read 的实现会阻止返回零字节的计数和一个 nil 错误，调用者应将这种情况视作空操作。\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func main() { f, err := os.Open(\\\"a.txt\\\") if err != nil { fmt.Printf(\\\"err: %v\\\\n\\\", err) return } defer f.Close() buf := make([]byte, 12) // 实例化一个长度为4的[]byte for { n, err2 := f.Read(buf) // 将内容读至buf if n == 0 || err2 == io.EOF { fmt.Println(\\\"文件以读取完毕\\\") break } fmt.Println(string(buf[:n])) } } \",\"其中a.txt内容为：\",\" hello world \"]},\"48\":{\"h\":\"2.2 Writer接口\",\"t\":[\"type Writerinterface { Write(p []byte) (n int, err error) } \",\"Write 将 len个字节从 p 中写入到基本数据流中。它返回从 p 中被写入的字节数n（0 <= n <= len）以及任何遇到的引起写入提前停止的错误。若 Write 返回的n < len，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。\",\"实例演示：\",\"package main import ( \\\"os\\\" ) func main() { f, _ := os.OpenFile(\\\"a.txt\\\", os.O_RDWR|os.O_APPEND, 0775) // 以读写模式打开文件，并且在写操作时将数据附加到文件尾部 f.Write([]byte(\\\" hello golang\\\")) f.Close() } \",\"a.txt内容更新为：\",\" hello world hello golang \",\"其中a.txt初始内容为：\",\" hello world \"]},\"49\":{\"h\":\"2.3 Seeker接口\",\"t\":[\"type Seeker interface { Seek(offset int64, whence int) (int64, error) } \",\"Seeker 用来移动数据的读写指针\",\"Seek 设置下一次读写操作的指针位置，每次的读写操作都是从指针位置开始的\",\"whence 的含义：\",\"如果 whence 为 0：表示从数据的开头开始移动指针\",\"如果 whence 为 1：表示从数据的当前指针位置开始移动指针\",\"如果 whence 为 2：表示从数据的尾部开始移动指针\",\"offset 是指针移动的偏移量\",\"返回移动后的指针位置和移动过程中遇到的任何错误\",\"实例演示：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" ) func main() { f, _ := os.Open(\\\"a.txt\\\") // 打开文件后，光标默认在文件开头 f.Seek(3, 0) // 从索引值为3处开始读 buf := make([]byte, 10) // 设置缓冲区 n, _ := f.Read(buf) // 将内容读到缓冲区内 fmt.Printf(\\\"n: %v\\\\n\\\", n) fmt.Printf(\\\"string(buf): %v\\\\n\\\", string(buf)) f.Close() } \",\"其中a.txt内容为：\",\" hello world \"]},\"50\":{\"h\":\"2.4 Closer接口\",\"t\":[\"type Closer interface { Close() error } \",\"Closer关闭的接口, 带有Close() 方法， 但是行为没有定义，所以 可以特定行为来实现 在整个标准库内都没有对Closer的引用，只有实现，用法都是开启某某连接/流，在用完/报错后在进行Close的操作。\"]},\"51\":{\"h\":\"3. 组合接口\",\"t\":[\"组合接口是对多个接口进行了组合，当同时实现多个接口时，可以使用组合接口进行传递\"]},\"52\":{\"h\":\"3.1 ReadWriter接口\",\"t\":[\"type ReadWriter interface { Reader Writer } \",\"ReadWriter接口聚合了基本的读写操作。\"]},\"53\":{\"h\":\"3.2 ReadCloser接口\",\"t\":[\"type ReadCloser interface { Reader Closer } \",\"ReadCloser就是Reader+Closer，例如在ioutil中的NopCloser方法返回的就是一个ReadCloser，但是里面的Close就是个空函数，毫无作用。\"]},\"54\":{\"h\":\"3.3 WriteCloser接口\",\"t\":[\"type WriteCloser interface { Writer Closer } \",\"WriteCloser接口聚合了基本的写入和关闭操作。\"]},\"55\":{\"h\":\"3.4 ReadWriteCloser接口\",\"t\":[\"type ReadWriteCloser interface { Reader Writer Closer } \",\"ReadWriteCloser接口聚合了基本的读写和关闭操作。\"]},\"56\":{\"h\":\"3.5 ReadSeeker接口\",\"t\":[\"type ReadSeeker interface { Reader Seeker } \",\"ReadSeeker接口聚合了基本的读取和移位操作。\"]},\"57\":{\"h\":\"3.6 WriteSeeker接口\",\"t\":[\"type WriteSeeker interface { Writer Seeker } \",\"WriteSeeker接口聚合了基本的写入和移位操作。\"]},\"58\":{\"h\":\"3.7 ReadWriteSeeker接口\",\"t\":[\"type ReadWriteSeeker interface { Reader Writer Seeker } \",\"ReadWriteSeeker接口聚合了基本的读写和移位操作\"]},\"59\":{\"h\":\"4. 指定读写器读写接口\"},\"60\":{\"h\":\"4.1 ReaderFrom接口\",\"t\":[\"type ReaderFrom interface { ReadFrom(r Reader) (n int64, err error) } \",\"ReadFrom 从 r 中读取数据到对象的数据流中 直到 r 返回 EOF 或 r 出现读取错误为止 返回值 n 是读取的字节数 返回值 err 就是 r 的返回值 err\"]},\"61\":{\"h\":\"4.2 WriterTo接口\",\"t\":[\"type WriterTo interface { WriteTo(w Writer) (n int64, err error) } \",\"WriterTo 将对象的数据流写入到 w 中 直到对象的数据流全部写入完毕或遇到写入错误为止 返回值 n 是写入的字节数 返回值 err 就是 w 的返回值 err\"]},\"62\":{\"h\":\"5. 指定偏移量读写接口\"},\"63\":{\"h\":\"5.1 ReaderAt接口\",\"t\":[\"type ReaderAt interface { ReadAt(p []byte, off int64) (n int, err error) } \",\"ReadAt 从对象数据流的 off 处读出数据到 p 中\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始读取\",\"如果对象的数据流只有部分可用，不足以填满 p则 ReadAt 将等待所有数据可用之后，继续向 p 中写入直到将 p 填满后再返回，在这点上 ReadAt 要比 Read 更严格\",\"返回读取的字节数 n 和读取时遇到的错误\",\"如果 n < len，则需要返回一个 err 值来说明为什么没有将 p 填满（比如 EOF）\",\"如果 n > len，而且对象的数据没有全部读完，则err 将返回 nil\",\"如果 n = len，而且对象的数据刚好全部读完，则err 将返回 EOF 或者 nil（不确定）\"]},\"64\":{\"h\":\"5.2 WriterAt接口\",\"t\":[\"type WriterAt interface { WriteAt(p []byte, off int64) (n int, err error) } \",\"WriteAt 将 p 中的数据写入到对象数据流的 off 处\",\"忽略数据的读写指针，从数据的起始位置偏移 off 处开始写入\",\"返回写入的字节数和写入时遇到的错误\",\"如果 n < len，则必须返回一个 err 值来说明为什么没有将 p 完全写入\"]},\"65\":{\"h\":\"6. 单个字节读写接口\"},\"66\":{\"h\":\"6.1 ByteReader接口\",\"t\":[\"type ByteReader interface { ReadByte() (byte, error) } \",\"ByteReader是基本的ReadByte方法的包装。 ReadByte读取输入中的单个字节并返回。如果没有字节可读取，会返回错误。\"]},\"67\":{\"h\":\"6.2 ByteScanner接口\",\"t\":[\"type ByteScanner interface { ByteReader UnreadByte() error } \",\"ByteScanner接口在基本的ReadByte方法之外还添加了UnreadByte方法。\",\"UnreadByte方法让下一次调用ReadByte时返回之前调用ReadByte时返回的同一个字节。连续调用两次UnreadByte方法而中间没有调用ReadByte时，可能会导致错误。\"]},\"68\":{\"h\":\"6.3 ByteWriter接口\",\"t\":[\"type ByteWriter interface { WriteByte(c byte) error } \",\"包装 WriteByte 单个字节写入方法的接口\"]},\"69\":{\"h\":\"6.4 RuneReader接口\",\"t\":[\"type RuneReader interface { ReadRune() (r rune, size int, err error) } \",\"ReadRune 方法的包装，读取单个UTF-8编码的Unicode字符，并返回rune及其字节大小。如果没有可用字符，将设置err\"]},\"70\":{\"h\":\"6.5 RuneScanner接口\",\"t\":[\"type RuneScanner interface { RuneReader UnreadRune() error } \",\"RuneScanner接口在基本的ReadRune方法之外还添加了UnreadRune方法。\",\"UnreadRune方法让下一次调用ReadRune时返回之前调用ReadRune时返回的同一个utf-8字符。连续调用两次UnreadRune方法而中间没有调用ReadRune时，可能会导致错误。\"]},\"71\":{\"h\":\"6.6 StringWriter接口\",\"t\":[\"type StringWriter interface { WriteString(s string) (n int, err error) } \",\"字符串写入方法WriteString的包装\"]},\"72\":{\"h\":\"7. 结构体\"},\"73\":{\"h\":\"7.1 LimitedReader\",\"t\":[\"type LimitedReader struct { R Reader // underlying reader N int64 // max bytes remaining } \",\"LimitedReader从R读取，但将返回的数据量限制为N个字节。每次读取更新N以标记剩余可以读取的字节数。Read在N<=0时或基础R返回EOF时返回EOF。\",\"具体实现方法为：func LimitReader(r Reader, n int64) Reader\"]},\"74\":{\"h\":\"7.2 PipeReader\",\"t\":[\"type PipeReader struct { // 内含隐藏或非导出字段 } \",\"PipeReader是一个管道的读取端。\",\"具体实现方法有：\",\"func (r *PipeReader) Read(data []byte) (n int, err error) Read实现了标准的读取接口：它从管道中读取数据，阻塞直到写入端到达或写入端被关闭。如果用错误关闭写入端，则返回错误为ERR；否则ERR为EOF。\",\"func (r *PipeReader) Close() error Close关闭读取器；关闭后如果对管道的写入端进行写入操作，就会返回(0, ErrClosedPip)。\",\"func (r *PipeReader) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Write时返回的错误改为err。\"]},\"75\":{\"h\":\"7.3 PipeWriter\",\"t\":[\"type PipeWriter struct { // 内含隐藏或非导出字段 } \",\"PipeWriter是一个管道的写入端。 具体实现方法有：\",\"func (w *PipeWriter) Write(data []byte) (n int, err error) Write实现了标准的写接口：它将数据写入管道，直到一个或多个读取端消耗完所有数据或读取端关闭为止。如果以错误关闭读取端，则该错误将作为ERR返回；否则ERR将为ErrClosedPipe。\",\"func (w *PipeWriter) Close() error Close关闭写入器；关闭后如果对管道的读取端进行读取操作，就会返回(0, EOF)。\",\"func (w *PipeWriter) CloseWithError(err error) error CloseWithError类似Close方法，但将调用Read时返回的错误改为err。\",\"注：以上两个结构体PipeWriter与PipeReader是结合使用的需要用Pipe()方法进行创建。\"]},\"76\":{\"h\":\"7.4 SectionReader\",\"t\":[\"type SectionReader struct { // contains filtered or unexported fields } \",\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。 具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法 func (*SectionReader) Size\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"77\":{\"h\":\"8. 供外部调用的函数\"},\"78\":{\"h\":\"8.1 Copy\",\"t\":[\"func Copy(dst Writer, src Reader) (written int64, err error) \",\"将副本从src复制到dst，直到在src上达到EOF或发生错误。它返回复制的字节数和复制时遇到的第一个错误（如果有）。 成功的复制将返回err == nil而不是err == EOF。因为复制被定义为从src读取直到EOF，所以它不会将读取的EOF视为要报告的错误。 如果src实现WriterTo接口，则通过调用src.WriteTo（dst）实现该副本。否则，如果dst实现了ReaderFrom接口，则通过调用dst.ReadFrom（src）实现该副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") if _, err := io.Copy(os.Stdout, r); err != nil { // os.Stdout将内容输出到控制台 log.Fatal(err) // log.Fatal函数完成： // 1. 打印输出err // 2. 退出应用程序 } } \"]},\"79\":{\"h\":\"8.2 CopyBuffer\",\"t\":[\"func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) \",\"CopyBuffer与Copy相同，区别在于CopyBuffer逐步遍历提供的缓冲区（如果需要），而不是分配临时缓冲区。如果buf为nil，则分配一个；如果长度为零，则CopyBuffer会panic报错。 如果src实现WriterTo或dst实现ReaderFrom，则buf将不用于执行复制。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader\\\\n\\\") r2 := strings.NewReader(\\\"second reader\\\\n\\\") buf := make([]byte, 8) // buf is used here... if _, err := io.CopyBuffer(os.Stdout, r1, buf); err != nil { log.Fatal(err) } // ... reused here also. No need to allocate an extra buffer. if _, err := io.CopyBuffer(os.Stdout, r2, buf); err != nil { log.Fatal(err) } } \"]},\"80\":{\"h\":\"8.3 CopyN\",\"t\":[\"func CopyN(dst Writer, src Reader, n int64) (written int64, err error) \",\"CopyN将n个字节（或直到出错）从src复制到dst。它返回复制的字节数以及复制时遇到的最早错误。返回时，只有err == nil时，writte == n。 如果dst实现了ReaderFrom接口，则使用该接口实现副本。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\") if _, err := io.CopyN(os.Stdout, r, 4); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"81\":{\"h\":\"8.4 LimitReader\",\"t\":[\"func LimitReader(r Reader, n int64) Reader \",\"LimitedReader从r读取，但将返回的数据量限制为n个字节。每次读取更新n以标记剩余可以读取的字节数。Read在n<=0时或基础r返回EOF时返回EOF。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") lr := io.LimitReader(r, 4) if _, err := io.Copy(os.Stdout, lr); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"some \"]},\"82\":{\"h\":\"8.5 MultiReader\",\"t\":[\"func MultiReader(readers ...Reader) Reader \",\"MultiReader返回一个Reader，它是所提供的输入阅读器的逻辑串联。它们被顺序读取。一旦所有输入均返回EOF，读取将返回EOF。如果任何读取器返回非零，非EOF错误，则Read将返回该错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r1 := strings.NewReader(\\\"first reader \\\") r2 := strings.NewReader(\\\"second reader \\\") r3 := strings.NewReader(\\\"third reader\\\\n\\\") r := io.MultiReader(r1, r2, r3) if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果：\",\"first reader second reader third reader \"]},\"83\":{\"h\":\"8.6 MultiWriter\",\"t\":[\"func MultiWriter(writers ...Writer) Writer \",\"MultiWriter创建一个Writers，将其写入复制到所有提供的写入器中，类似于Unix tee（1）命令。 每个写入一次写入每个列出的写入器。如果列出的写程序返回错误，则整个写操作将停止并返回错误；它不会在列表中继续下去。\",\"官方示例：\",\"package main import ( \\\"bytes\\\" \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") var buf1, buf2 bytes.Buffer w := io.MultiWriter(&buf1, &buf2) if _, err := io.Copy(w, r); err != nil { log.Fatal(err) } fmt.Print(buf1.String()) fmt.Print(buf2.String()) } \"]},\"84\":{\"h\":\"8.7 Pipe\",\"t\":[\"func Pipe() (*PipeReader, *PipeWriter) \",\"Pipe创建一个同步的内存管道。 可用于连接期望io.Reader的代码和期望io.Writer的代码。\",\"管道上的读和写是一对一匹配的，除非需要多次读取才能使用单次写入。也就是说，每次对PipeWriter的写入都将阻塞，直到它满足从PipeReader读取的一个或多个读取，这些读取会完全消耗已写入的数据。\",\"数据直接从Write复制到相应的Read (或Reads)；没有内部缓冲。 对读的并行调用和对写的并行调用也是安全的：单个调用将按顺序执行。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { r, w := io.Pipe() go func() { fmt.Fprint(w, \\\"some io.Reader stream to be read\\\\n\\\") w.Close() }() if _, err := io.Copy(os.Stdout, r); err != nil { log.Fatal(err) } } \",\"运行结果\",\"some io.Reader stream to be read \"]},\"85\":{\"h\":\"8.8 ReadAll\",\"t\":[\"func ReadAll(r Reader) ([]byte, error) \",\"ReadAll从r读取，直到出现错误或EOF，并返回其读取的数据。成功的调用返回errnil，而不是errEOF。由于ReadAll定义为从src读取直到EOF，因此它不会将读取的EOF视为要报告的错误。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"Go is a general-purpose language designed with systems programming in mind.\\\") b, err := io.ReadAll(r) if err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\", b) } \"]},\"86\":{\"h\":\"8.9 ReadAtLeast\",\"t\":[\"func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error) \",\"ReadAtLeast从r读取到buf，直到它至少读取了min字节。它返回复制的字节数n，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取少于最小字节后发生EOF，则ReadAtLeast返回ErrUnexpectedEOF。如果min大于buf的长度，则ReadAtLeast返回ErrShortBuffer。返回时，当且仅当err == nil时，n> = min。\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 14) if _, err := io.ReadAtLeast(r, buf, 4); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // buffer smaller than minimal read size. shortBuf := make([]byte, 3) if _, err := io.ReadAtLeast(r, shortBuf, 4); err != nil { fmt.Println(\\\"error:\\\", err) } // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadAtLeast(r, longBuf, 64); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"87\":{\"h\":\"8.10 ReadFull\",\"t\":[\"func ReadFull(r Reader, buf []byte) (n int, err error) \",\"ReadFull将r中的len（buf）个字节准确地读取到buf中。它返回复制的字节数，如果读取的字节数少则返回错误。仅当未读取任何字节时，错误才是EOF。如果在读取了一些但不是全部字节后发生EOF，则ReadFull返回ErrUnexpectedEOF。返回时，当且仅当err == nil时，n == len（buf）。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") buf := make([]byte, 4) if _, err := io.ReadFull(r, buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) // minimal read size bigger than io.Reader stream longBuf := make([]byte, 64) if _, err := io.ReadFull(r, longBuf); err != nil { fmt.Println(\\\"error:\\\", err) } } \"]},\"88\":{\"h\":\"8.11 SectionReader\",\"t\":[\"SectionReader在ReaderAt的基础上实现了Read，Seek和ReadAt。\",\"具体实现方法有：\",\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader 结构体SectionReader的创建方法 NewSectionReader返回一个SectionReader，它从r开始读取，偏移量为off，并在n个字节后以EOF停止。\",\"func (s *SectionReader) Read(p []byte) (n int, err error) 实现了接口Reader的Read方法\",\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) 实现了接口ReaderAt的ReadAt方法\",\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) 实现了接口Seeker的Seek方法\",\"func (s *SectionReader) Size() int64 Size返回以字节为单位的片段大小。\"]},\"89\":{\"h\":\"8.11.1 NewSectionReader\",\"t\":[\"func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader \",\"NewSectionReader返回一个SectionReader，它从r开始读取偏移量off，并在n个字节后以EOF停止。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \"]},\"90\":{\"h\":\"8.11.2 SectionReader.Read\",\"t\":[\"func (s *SectionReader) Read(p []byte) (n int, err error) \",\"实现了接口Reader的Read方法\",\"官方示例：\",\"import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 9) if _, err := s.Read(buf); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"91\":{\"h\":\"8.11.3 SectionReader.ReadAt\",\"t\":[\"func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) \",\"实现了接口ReaderAt的ReadAt方法\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"log\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) buf := make([]byte, 6) if _, err := s.ReadAt(buf, 10); err != nil { log.Fatal(err) } fmt.Printf(\\\"%s\\\\n\\\", buf) } \"]},\"92\":{\"h\":\"8.11.4 SectionReader.Seek\",\"t\":[\"func (s *SectionReader) Seek(offset int64, whence int) (int64, error) \",\"实现了接口Seeker的Seek方法\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) if _, err := s.Seek(10, io.SeekStart); err != nil { log.Fatal(err) } if _, err := io.Copy(os.Stdout, s); err != nil { log.Fatal(err) } } \",\"可以看的出来SectionReader是根据ReaderAt实现的，而非Seeker，虽然两者的效果很像，但是ReaderAt读取内容是无视Seeker偏移量的。且在读取数据大小上ReadAt是要比Read严格的，同样的Bytes在Read上即使设大了也会没事，但在ReadAt会报错。\"]},\"93\":{\"h\":\"8.11.5 SectionReader.Size\",\"t\":[\"func (s *SectionReader) Size() int64 \",\"Size返回以字节为单位的片段大小。\",\"官方示例：\",\"package main import ( \\\"fmt\\\" \\\"io\\\" \\\"strings\\\" ) func main() { r := strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") s := io.NewSectionReader(r, 5, 17) fmt.Println(s.Size()) } \"]},\"94\":{\"h\":\"8.12 TeeReader\",\"t\":[\"func TeeReader(r Reader, w Writer) Reader \",\"TeeReader返回一个Reader，该Reader向w写入从r读取的内容。通过r执行的所有r读取均与对w的相应写入匹配。没有内部缓冲-写入必须在读取完成之前完成。写入时遇到的任何错误均报告为读取错误。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" \\\"strings\\\" ) func main() { var r io.Reader = strings.NewReader(\\\"some io.Reader stream to be read\\\\n\\\") r = io.TeeReader(r, os.Stdout) // Everything read from r will be copied to stdout. if _, err := io.ReadAll(r); err != nil { log.Fatal(err) } } \"]},\"95\":{\"h\":\"8.13 WriteString\",\"t\":[\"func WriteString(w Writer, s string) (n int, err error) \",\"WriteString将字符串s的内容写入w，w接受字节片。如果w实现StringWriter，则直接调用其WriteString方法。否则，w.Write只调用一次。\",\"官方示例：\",\"package main import ( \\\"io\\\" \\\"log\\\" \\\"os\\\" ) func main() { if _, err := io.WriteString(os.Stdout, \\\"Hello World\\\"); err != nil { log.Fatal(err) } } \"]},\"96\":{\"c\":[\"I/O\",\"golang\"]},\"97\":{\"h\":\"已整理的杂记\"},\"98\":{\"h\":\"Linux 相关\"},\"99\":{\"h\":\"端口占用\",\"t\":[\"使用ps -ef|grep [占用端口号|进程名称]来查看进程id，获取进程id后使用kill -9 id来强制关闭应用。\",\"使用killall会杀死指定名称的所有进程killall -9 [process_name]。\",\"使用pkill 也会通过进程名来杀死进程，但是可以将信号发给指定用户，较于killall更为灵活 pkill -9 [process_name]。\"]},\"100\":{\"c\":[\"linux\"]},\"101\":{\"h\":\"待整理的杂记\"},\"102\":{\"h\":\"Linux 相关\"},\"103\":{\"c\":[\"linux\"]},\"104\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"待整理的杂记\",{\"0\":{\"101\":1}}],[\"较于killall更为灵活\",{\"1\":{\"99\":1}}],[\"也会通过进程名来杀死进程\",{\"1\":{\"99\":1}}],[\"也就是说\",{\"1\":{\"84\":1}}],[\"获取进程id后使用kill\",{\"1\":{\"99\":1}}],[\"来查看进程id\",{\"1\":{\"99\":1}}],[\"来解析\",{\"1\":{\"16\":1}}],[\"占用端口号|进程名称\",{\"1\":{\"99\":1}}],[\"使用pkill\",{\"1\":{\"99\":1}}],[\"使用ps\",{\"1\":{\"99\":1}}],[\"使用killall会杀死指定名称的所有进程killall\",{\"1\":{\"99\":1}}],[\"使用指南\",{\"1\":{\"33\":2},\"2\":{\"3\":1,\"5\":1,\"8\":1,\"29\":1,\"36\":1,\"37\":1,\"39\":1}}],[\"端口占用\",{\"0\":{\"99\":1}}],[\"相关\",{\"0\":{\"98\":1,\"102\":1}}],[\"相关信息\",{\"1\":{\"15\":1}}],[\"已整理的杂记\",{\"0\":{\"97\":1}}],[\"写入时遇到的任何错误均报告为读取错误\",{\"1\":{\"94\":1}}],[\"写入必须在读取完成之前完成\",{\"1\":{\"94\":1}}],[\"写作日期为\",{\"1\":{\"33\":1}}],[\"写作指南\",{\"0\":{\"2\":1}}],[\"该reader向w写入从r读取的内容\",{\"1\":{\"94\":1}}],[\"同样的bytes在read上即使设大了也会没事\",{\"1\":{\"92\":1}}],[\"同时每个页面包含\",{\"1\":{\"10\":1}}],[\"且在读取数据大小上readat是要比read严格的\",{\"1\":{\"92\":1}}],[\"虽然两者的效果很像\",{\"1\":{\"92\":1}}],[\"仅当未读取任何字节时\",{\"1\":{\"86\":1,\"87\":1}}],[\"9\",{\"0\":{\"86\":1},\"1\":{\"90\":1,\"99\":3}}],[\"general\",{\"1\":{\"85\":1}}],[\"go\",{\"1\":{\"84\":1,\"85\":1}}],[\"golang\",{\"1\":{\"48\":2},\"2\":{\"1\":1,\"96\":1}}],[\"由于readall定义为从src读取直到eof\",{\"1\":{\"85\":1}}],[\"成功的调用返回errnil\",{\"1\":{\"85\":1}}],[\"成功的复制将返回err\",{\"1\":{\"78\":1}}],[\"没有内部缓冲\",{\"1\":{\"84\":1,\"94\":1}}],[\"数据直接从write复制到相应的read\",{\"1\":{\"84\":1}}],[\"除非需要多次读取才能使用单次写入\",{\"1\":{\"84\":1}}],[\"管道上的读和写是一对一匹配的\",{\"1\":{\"84\":1}}],[\"命令\",{\"1\":{\"83\":1}}],[\"类似于unix\",{\"1\":{\"83\":1}}],[\"非eof错误\",{\"1\":{\"82\":1}}],[\"非nil的\",{\"1\":{\"47\":1}}],[\"读取将返回eof\",{\"1\":{\"82\":1}}],[\"读取单个utf\",{\"1\":{\"69\":1}}],[\"运行结果\",{\"1\":{\"80\":1,\"81\":1,\"82\":1,\"84\":1}}],[\"只有err\",{\"1\":{\"80\":1}}],[\"只有实现\",{\"1\":{\"50\":1}}],[\"used\",{\"1\":{\"79\":1}}],[\"unexported\",{\"1\":{\"76\":1}}],[\"unexpected\",{\"1\":{\"45\":1}}],[\"underlying\",{\"1\":{\"73\":1}}],[\"unreadrune方法让下一次调用readrune时返回之前调用readrune时返回的同一个utf\",{\"1\":{\"70\":1}}],[\"unreadrune\",{\"1\":{\"70\":1}}],[\"unreadbyte方法让下一次调用readbyte时返回之前调用readbyte时返回的同一个字节\",{\"1\":{\"67\":1}}],[\"unreadbyte\",{\"1\":{\"67\":1}}],[\"区别在于copybuffer逐步遍历提供的缓冲区\",{\"1\":{\"79\":1}}],[\"退出应用程序\",{\"1\":{\"78\":1}}],[\"官方示例\",{\"1\":{\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"否则\",{\"1\":{\"78\":1,\"95\":1}}],[\"否则err将为errclosedpipe\",{\"1\":{\"75\":1}}],[\"否则err为eof\",{\"1\":{\"74\":1}}],[\"因为复制被定义为从src读取直到eof\",{\"1\":{\"78\":1}}],[\"因此它不会将读取的eof视为要报告的错误\",{\"1\":{\"85\":1}}],[\"因此可以借助于\",{\"1\":{\"16\":1}}],[\"因此\",{\"1\":{\"13\":1}}],[\"供外部调用的函数\",{\"0\":{\"77\":1}}],[\"偏移量为off\",{\"1\":{\"76\":1,\"88\":1}}],[\"注\",{\"1\":{\"75\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"31\":1}}],[\"关闭后如果对管道的读取端进行读取操作\",{\"1\":{\"75\":1}}],[\"关闭后如果对管道的写入端进行写入操作\",{\"1\":{\"74\":1}}],[\"关于这些扩展\",{\"1\":{\"17\":1}}],[\"阻塞直到写入端到达或写入端被关闭\",{\"1\":{\"74\":1}}],[\"具体实现方法有\",{\"1\":{\"74\":1,\"75\":1,\"76\":1,\"88\":1}}],[\"具体实现方法为\",{\"1\":{\"73\":1}}],[\"内含隐藏或非导出字段\",{\"1\":{\"74\":1,\"75\":1}}],[\"内容\",{\"1\":{\"16\":1}}],[\"linux\",{\"0\":{\"98\":1,\"102\":1},\"2\":{\"100\":1,\"103\":1}}],[\"limitreader\",{\"0\":{\"81\":1},\"1\":{\"73\":1,\"81\":2}}],[\"limitedreader从r读取\",{\"1\":{\"73\":1,\"81\":1}}],[\"limitedreader\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"longbuf\",{\"1\":{\"86\":2,\"87\":2}}],[\"log\",{\"1\":{\"78\":3,\"79\":3,\"80\":2,\"81\":2,\"82\":2,\"83\":2,\"84\":2,\"85\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"94\":2,\"95\":2}}],[\"language\",{\"1\":{\"85\":1}}],[\"lr\",{\"1\":{\"81\":2}}],[\"len个字节从\",{\"1\":{\"48\":1}}],[\"len个字节读取到\",{\"1\":{\"47\":1}}],[\"len\",{\"1\":{\"47\":3,\"48\":2,\"63\":3,\"64\":1,\"87\":1}}],[\"结构体sectionreader的创建方法\",{\"1\":{\"76\":1,\"88\":1}}],[\"结构体\",{\"0\":{\"72\":1}}],[\"字符串写入方法writestring的包装\",{\"1\":{\"71\":1}}],[\"连续调用两次unreadrune方法而中间没有调用readrune时\",{\"1\":{\"70\":1}}],[\"连续调用两次unreadbyte方法而中间没有调用readbyte时\",{\"1\":{\"67\":1}}],[\"8\",{\"0\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1},\"1\":{\"79\":1}}],[\"8字符\",{\"1\":{\"70\":1}}],[\"8编码的unicode字符\",{\"1\":{\"69\":1}}],[\"单个调用将按顺序执行\",{\"1\":{\"84\":1}}],[\"单个字节写入方法的接口\",{\"1\":{\"68\":1}}],[\"单个字节读写接口\",{\"0\":{\"65\":1}}],[\"单词\",{\"1\":{\"23\":1}}],[\"完全写入\",{\"1\":{\"64\":1}}],[\"而非seeker\",{\"1\":{\"92\":1}}],[\"而不是erreof\",{\"1\":{\"85\":1}}],[\"而不是分配临时缓冲区\",{\"1\":{\"79\":1}}],[\"而不是等待更多\",{\"1\":{\"47\":1}}],[\"而且对象的数据刚好全部读完\",{\"1\":{\"63\":1}}],[\"而且对象的数据没有全部读完\",{\"1\":{\"63\":1}}],[\"比如\",{\"1\":{\"63\":1}}],[\"填满\",{\"1\":{\"63\":1}}],[\"填满后再返回\",{\"1\":{\"63\":1}}],[\"值来说明为什么没有将\",{\"1\":{\"63\":1,\"64\":1}}],[\"则直接调用其writestring方法\",{\"1\":{\"95\":1}}],[\"则readfull返回errunexpectedeof\",{\"1\":{\"87\":1}}],[\"则readatleast返回errshortbuffer\",{\"1\":{\"86\":1}}],[\"则readatleast返回errunexpectedeof\",{\"1\":{\"86\":1}}],[\"则read将返回该错误\",{\"1\":{\"82\":1}}],[\"则整个写操作将停止并返回错误\",{\"1\":{\"83\":1}}],[\"则使用该接口实现副本\",{\"1\":{\"80\":1}}],[\"则buf将不用于执行复制\",{\"1\":{\"79\":1}}],[\"则copybuffer会panic报错\",{\"1\":{\"79\":1}}],[\"则分配一个\",{\"1\":{\"79\":1}}],[\"则通过调用dst\",{\"1\":{\"78\":1}}],[\"则通过调用src\",{\"1\":{\"78\":1}}],[\"则该错误将作为err返回\",{\"1\":{\"75\":1}}],[\"则返回错误为err\",{\"1\":{\"74\":1}}],[\"则必须返回一个\",{\"1\":{\"64\":1}}],[\"则err\",{\"1\":{\"63\":2}}],[\"则需要返回一个\",{\"1\":{\"63\":1}}],[\"则应返回错误errunexpectedeof或者其它给出更多细节的错误\",{\"1\":{\"45\":1}}],[\"更严格\",{\"1\":{\"63\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"10\":1}}],[\"更新时间\",{\"1\":{\"4\":1}}],[\"要比\",{\"1\":{\"63\":1}}],[\"继续向\",{\"1\":{\"63\":1}}],[\"不确定\",{\"1\":{\"63\":1}}],[\"不足以填满\",{\"1\":{\"63\":1}}],[\"不能修改此切片的数据\",{\"1\":{\"48\":1}}],[\"处开始写入\",{\"1\":{\"64\":1}}],[\"处开始读取\",{\"1\":{\"63\":1}}],[\"处\",{\"1\":{\"64\":1}}],[\"处读出数据到\",{\"1\":{\"63\":1}}],[\"忽略数据的读写指针\",{\"1\":{\"63\":1,\"64\":1}}],[\"出现读取错误为止\",{\"1\":{\"60\":1}}],[\"或reads\",{\"1\":{\"84\":1}}],[\"或直到出错\",{\"1\":{\"80\":1}}],[\"或者\",{\"1\":{\"63\":1}}],[\"或\",{\"1\":{\"60\":1}}],[\"直到它至少读取了min字节\",{\"1\":{\"86\":1}}],[\"直到它满足从pipereader读取的一个或多个读取\",{\"1\":{\"84\":1}}],[\"直到出现错误或eof\",{\"1\":{\"85\":1}}],[\"直到在src上达到eof或发生错误\",{\"1\":{\"78\":1}}],[\"直到一个或多个读取端消耗完所有数据或读取端关闭为止\",{\"1\":{\"75\":1}}],[\"直到对象的数据流全部写入完毕或遇到写入错误为止\",{\"1\":{\"61\":1}}],[\"直到\",{\"1\":{\"60\":1}}],[\"从src复制到dst\",{\"1\":{\"80\":1}}],[\"从数据的起始位置偏移\",{\"1\":{\"63\":1,\"64\":1}}],[\"从对象数据流的\",{\"1\":{\"63\":1}}],[\"从\",{\"1\":{\"60\":1}}],[\"从索引值为3处开始读\",{\"1\":{\"49\":1}}],[\"指定偏移量读写接口\",{\"0\":{\"62\":1}}],[\"指定读写器读写接口\",{\"0\":{\"59\":1}}],[\"指南\",{\"2\":{\"11\":1}}],[\"7\",{\"0\":{\"58\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"84\":1}}],[\"64\",{\"1\":{\"86\":2,\"87\":1}}],[\"6\",{\"0\":{\"57\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"83\":1},\"1\":{\"91\":1}}],[\"5\",{\"0\":{\"56\":1,\"62\":1,\"63\":1,\"64\":1,\"70\":1,\"82\":1,\"93\":1},\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"毫无作用\",{\"1\":{\"53\":1}}],[\"例如在ioutil中的nopcloser方法返回的就是一个readcloser\",{\"1\":{\"53\":1}}],[\"组合接口是对多个接口进行了组合\",{\"1\":{\"51\":1}}],[\"组合接口\",{\"0\":{\"51\":1}}],[\"组件\",{\"0\":{\"28\":1,\"35\":1},\"1\":{\"35\":1}}],[\"报错后在进行close的操作\",{\"1\":{\"50\":1}}],[\"流\",{\"1\":{\"50\":1}}],[\"用法都是开启某某连接\",{\"1\":{\"50\":1}}],[\"用来移动数据的读写指针\",{\"1\":{\"49\":1}}],[\"所以它不会将读取的eof视为要报告的错误\",{\"1\":{\"78\":1}}],[\"所以\",{\"1\":{\"50\":1}}],[\"但在readat会报错\",{\"1\":{\"92\":1}}],[\"但将调用read时返回的错误改为err\",{\"1\":{\"75\":1}}],[\"但将调用write时返回的错误改为err\",{\"1\":{\"74\":1}}],[\"但将返回的数据量限制为n个字节\",{\"1\":{\"73\":1,\"81\":1}}],[\"但是可以将信号发给指定用户\",{\"1\":{\"99\":1}}],[\"但是readerat读取内容是无视seeker偏移量的\",{\"1\":{\"92\":1}}],[\"但是里面的close就是个空函数\",{\"1\":{\"53\":1}}],[\"但是行为没有定义\",{\"1\":{\"50\":1}}],[\"但提供的缓冲不够大\",{\"1\":{\"45\":1}}],[\"方法进行创建\",{\"1\":{\"75\":1}}],[\"方法的包装\",{\"1\":{\"69\":1}}],[\"方法\",{\"1\":{\"50\":1}}],[\"带有close\",{\"1\":{\"50\":1}}],[\"404\",{\"1\":{\"104\":1}}],[\"4\",{\"0\":{\"50\":1,\"55\":1,\"59\":1,\"60\":1,\"61\":1,\"69\":1,\"76\":1,\"81\":1,\"92\":1},\"1\":{\"80\":1,\"81\":1,\"86\":2,\"87\":1}}],[\"设置缓冲区\",{\"1\":{\"49\":1}}],[\"设置下一次读写操作的指针位置\",{\"1\":{\"49\":1}}],[\"光标默认在文件开头\",{\"1\":{\"49\":1}}],[\"打印输出err\",{\"1\":{\"78\":1}}],[\"打印按钮\",{\"1\":{\"10\":1}}],[\"打开文件后\",{\"1\":{\"49\":1}}],[\"表示从数据的尾部开始移动指针\",{\"1\":{\"49\":1}}],[\"表示从数据的当前指针位置开始移动指针\",{\"1\":{\"49\":1}}],[\"表示从数据的开头开始移动指针\",{\"1\":{\"49\":1}}],[\"每次对pipewriter的写入都将阻塞\",{\"1\":{\"84\":1}}],[\"每次读取更新n以标记剩余可以读取的字节数\",{\"1\":{\"73\":1,\"81\":1}}],[\"每次的读写操作都是从指针位置开始的\",{\"1\":{\"49\":1}}],[\"每个写入一次写入每个列出的写入器\",{\"1\":{\"83\":1}}],[\"每个\",{\"1\":{\"35\":1}}],[\"3\",{\"0\":{\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":2,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"68\":1,\"75\":1,\"80\":1,\"91\":1},\"1\":{\"49\":1,\"86\":1}}],[\"并返回其读取的数据\",{\"1\":{\"85\":1}}],[\"并返回rune及其字节大小\",{\"1\":{\"69\":1}}],[\"并在n个字节后以eof停止\",{\"1\":{\"76\":1,\"88\":1,\"89\":1}}],[\"并且在写操作时将数据附加到文件尾部\",{\"1\":{\"48\":1}}],[\"并将这些抽象成为实用性的功能和一些其他相关的接口\",{\"1\":{\"44\":1}}],[\"r3\",{\"1\":{\"82\":2}}],[\"r2\",{\"1\":{\"79\":2,\"82\":2}}],[\"r1\",{\"1\":{\"79\":2,\"82\":2}}],[\"runescanner\",{\"1\":{\"70\":1}}],[\"runescanner接口在基本的readrune方法之外还添加了unreadrune方法\",{\"1\":{\"70\":1}}],[\"runescanner接口\",{\"0\":{\"70\":1}}],[\"rune\",{\"1\":{\"69\":1}}],[\"runereader\",{\"1\":{\"69\":1,\"70\":1}}],[\"runereader接口\",{\"0\":{\"69\":1}}],[\"r\",{\"1\":{\"60\":5,\"69\":1,\"73\":2,\"74\":3,\"76\":1,\"78\":2,\"80\":2,\"81\":3,\"82\":2,\"83\":2,\"84\":2,\"85\":3,\"86\":5,\"87\":4,\"88\":1,\"89\":3,\"90\":2,\"91\":2,\"92\":2,\"93\":2,\"94\":6}}],[\"rdwr|os\",{\"1\":{\"48\":1}}],[\"reused\",{\"1\":{\"79\":1}}],[\"remaining\",{\"1\":{\"73\":1}}],[\"return\",{\"1\":{\"45\":1,\"47\":1}}],[\"readfull将r中的len\",{\"1\":{\"87\":1}}],[\"readfull\",{\"0\":{\"87\":1},\"1\":{\"87\":3}}],[\"readfrom\",{\"1\":{\"60\":2,\"78\":1}}],[\"readall从r读取\",{\"1\":{\"85\":1}}],[\"readall\",{\"0\":{\"85\":1},\"1\":{\"85\":2,\"94\":1}}],[\"readatleast从r读取到buf\",{\"1\":{\"86\":1}}],[\"readatleast\",{\"0\":{\"86\":1},\"1\":{\"86\":4}}],[\"readat\",{\"0\":{\"91\":1},\"1\":{\"63\":4,\"76\":1,\"88\":1,\"91\":2}}],[\"read实现了标准的读取接口\",{\"1\":{\"74\":1}}],[\"read在n<=0时或基础r返回eof时返回eof\",{\"1\":{\"73\":1,\"81\":1}}],[\"readrune\",{\"1\":{\"69\":2}}],[\"readbyte读取输入中的单个字节并返回\",{\"1\":{\"66\":1}}],[\"readbyte\",{\"1\":{\"66\":1}}],[\"readseeker\",{\"1\":{\"56\":1}}],[\"readseeker接口聚合了基本的读取和移位操作\",{\"1\":{\"56\":1}}],[\"readseeker接口\",{\"0\":{\"56\":1}}],[\"readwriteseeker\",{\"1\":{\"58\":1}}],[\"readwriteseeker接口聚合了基本的读写和移位操作\",{\"1\":{\"58\":1}}],[\"readwriteseeker接口\",{\"0\":{\"58\":1}}],[\"readwritecloser\",{\"1\":{\"55\":1}}],[\"readwritecloser接口聚合了基本的读写和关闭操作\",{\"1\":{\"55\":1}}],[\"readwritecloser接口\",{\"0\":{\"55\":1}}],[\"readwriter\",{\"1\":{\"52\":1}}],[\"readwriter接口聚合了基本的读写操作\",{\"1\":{\"52\":1}}],[\"readwriter接口\",{\"0\":{\"52\":1}}],[\"readcloser就是reader+closer\",{\"1\":{\"53\":1}}],[\"readcloser\",{\"1\":{\"53\":1}}],[\"readcloser接口\",{\"0\":{\"53\":1}}],[\"reader的代码和期望io\",{\"1\":{\"84\":1}}],[\"reader的实现有问题的标志\",{\"1\":{\"45\":1}}],[\"readers\",{\"1\":{\"82\":1}}],[\"readerat\",{\"1\":{\"63\":1,\"76\":1,\"88\":1,\"89\":1}}],[\"readerat接口\",{\"0\":{\"63\":1}}],[\"readerfrom\",{\"1\":{\"60\":1}}],[\"readerfrom接口\",{\"0\":{\"60\":1}}],[\"reader\",{\"1\":{\"47\":2,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"58\":1,\"60\":1,\"73\":4,\"78\":2,\"79\":3,\"80\":2,\"81\":3,\"82\":8,\"83\":1,\"84\":2,\"85\":1,\"86\":3,\"87\":3,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":4}}],[\"reader接口\",{\"0\":{\"47\":1}}],[\"reader接口的客户端如果多次调用read都不返回数据也不返回错误时\",{\"1\":{\"45\":1}}],[\"read\",{\"0\":{\"90\":1},\"1\":{\"45\":2,\"47\":8,\"49\":1,\"63\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":2,\"86\":3,\"87\":2,\"88\":1,\"89\":1,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"94\":2}}],[\"regarded\",{\"1\":{\"32\":1}}],[\"即便它是临时的\",{\"1\":{\"48\":1}}],[\"即使\",{\"1\":{\"47\":1}}],[\"若\",{\"1\":{\"48\":1}}],[\"若一些数据可用但不到\",{\"1\":{\"47\":1}}],[\"其中a\",{\"1\":{\"47\":1,\"48\":1,\"49\":1}}],[\"smaller\",{\"1\":{\"86\":1}}],[\"systems\",{\"1\":{\"85\":1}}],[\"stdout将内容输出到控制台\",{\"1\":{\"78\":1}}],[\"stdout\",{\"1\":{\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"84\":1,\"89\":1,\"92\":1,\"94\":2,\"95\":1}}],[\"stream\",{\"1\":{\"78\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":2,\"86\":2,\"87\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1}}],[\"struct\",{\"1\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"strings\",{\"1\":{\"78\":2,\"79\":3,\"80\":2,\"81\":2,\"82\":4,\"83\":2,\"85\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":2,\"91\":2,\"92\":2,\"93\":2,\"94\":2}}],[\"stringwriter\",{\"1\":{\"71\":1}}],[\"stringwriter接口\",{\"0\":{\"71\":1}}],[\"string\",{\"1\":{\"47\":1,\"49\":2,\"71\":1,\"83\":2,\"95\":1}}],[\"some\",{\"1\":{\"78\":1,\"80\":2,\"81\":2,\"83\":1,\"84\":2,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1}}],[\"src\",{\"1\":{\"78\":2,\"79\":1,\"80\":1}}],[\"second\",{\"1\":{\"79\":1,\"82\":2}}],[\"sectionreader在readerat的基础上实现了read\",{\"1\":{\"76\":1,\"88\":1}}],[\"sectionreader\",{\"0\":{\"76\":1,\"88\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1},\"1\":{\"76\":7,\"88\":5,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"seekstart\",{\"1\":{\"92\":1}}],[\"seek和readat\",{\"1\":{\"76\":1,\"88\":1}}],[\"seek\",{\"0\":{\"92\":1},\"1\":{\"49\":3,\"76\":1,\"88\":1,\"92\":2}}],[\"seeker\",{\"1\":{\"49\":2,\"56\":1,\"57\":1,\"58\":1}}],[\"seeker接口\",{\"0\":{\"49\":1}}],[\"s\",{\"1\":{\"71\":1,\"76\":4,\"85\":1,\"86\":1,\"87\":1,\"88\":4,\"89\":2,\"90\":4,\"91\":4,\"92\":4,\"93\":3,\"95\":1}}],[\"size返回以字节为单位的片段大小\",{\"1\":{\"76\":1,\"88\":1,\"93\":1}}],[\"size\",{\"0\":{\"93\":1},\"1\":{\"69\":1,\"76\":2,\"86\":2,\"87\":1,\"88\":1,\"93\":2}}],[\"shortbuf\",{\"1\":{\"86\":2}}],[\"short\",{\"1\":{\"45\":2}}],[\"||\",{\"1\":{\"47\":1}}],[\"designed\",{\"1\":{\"85\":1}}],[\"defer\",{\"1\":{\"47\":1}}],[\"dst\",{\"1\":{\"78\":2,\"79\":1,\"80\":1}}],[\"data\",{\"1\":{\"45\":1,\"74\":1,\"75\":1}}],[\"实现该副本\",{\"1\":{\"78\":2}}],[\"实现了接口seeker的seek方法\",{\"1\":{\"76\":1,\"88\":1,\"92\":1}}],[\"实现了接口readerat的readat方法\",{\"1\":{\"76\":1,\"88\":1,\"91\":1}}],[\"实现了接口reader的read方法\",{\"1\":{\"76\":1,\"88\":1,\"90\":1}}],[\"实例化一个长度为4的\",{\"1\":{\"47\":1}}],[\"实例演示\",{\"1\":{\"47\":1,\"48\":1,\"49\":1}}],[\"实际的文章内容\",{\"1\":{\"7\":1}}],[\"调用者应将这种情况视作空操作\",{\"1\":{\"47\":1}}],[\"调用者应当总在考虑到错误\",{\"1\":{\"47\":1}}],[\"行为后正确地处理i\",{\"1\":{\"47\":1}}],[\"前处理\",{\"1\":{\"47\":1}}],[\"都应当返回\",{\"1\":{\"47\":1}}],[\"下一个\",{\"1\":{\"47\":1}}],[\"下一篇\",{\"1\":{\"4\":1}}],[\"无论如何\",{\"1\":{\"47\":1}}],[\"就会返回\",{\"1\":{\"74\":1,\"75\":1}}],[\"就会返回本错误\",{\"1\":{\"45\":1}}],[\"就是\",{\"1\":{\"47\":1,\"60\":1,\"61\":1}}],[\"可用于连接期望io\",{\"1\":{\"84\":1}}],[\"可能会导致错误\",{\"1\":{\"67\":1,\"70\":1}}],[\"可能的返回不是\",{\"1\":{\"47\":1}}],[\"可以看的出来sectionreader是根据readerat实现的\",{\"1\":{\"92\":1}}],[\"可以使用组合接口进行传递\",{\"1\":{\"51\":1}}],[\"可以特定行为来实现\",{\"1\":{\"50\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"13\":1}}],[\"这些读取会完全消耗已写入的数据\",{\"1\":{\"84\":1}}],[\"这样做可以在读取一些字节\",{\"1\":{\"47\":1}}],[\"这种一般情况的一个例子就是\",{\"1\":{\"47\":1}}],[\"这意味着你可以在\",{\"1\":{\"35\":1}}],[\"错误才是eof\",{\"1\":{\"86\":1,\"87\":1}}],[\"错误\",{\"1\":{\"47\":1}}],[\"错误或从随后的调用中返回错误\",{\"1\":{\"47\":1}}],[\"错误变量\",{\"0\":{\"45\":1}}],[\"情况\",{\"1\":{\"47\":1}}],[\">\",{\"1\":{\"47\":2,\"63\":1}}],[\"当且仅当err\",{\"1\":{\"86\":1,\"87\":1}}],[\"当同时实现多个接口时\",{\"1\":{\"51\":1}}],[\"当\",{\"1\":{\"47\":1}}],[\"当从一个已关闭的pipe读取或者写入时\",{\"1\":{\"45\":1}}],[\"个字节准确地读取到buf中\",{\"1\":{\"87\":1}}],[\"个字节后遇到一个错误或\",{\"1\":{\"47\":1}}],[\"个字节\",{\"1\":{\"47\":1}}],[\"<\",{\"1\":{\"47\":1,\"48\":1,\"63\":1,\"64\":1}}],[\"<=\",{\"1\":{\"47\":2,\"48\":2}}],[\"返回时\",{\"1\":{\"80\":1,\"86\":1,\"87\":1}}],[\"返回写入的字节数和写入时遇到的错误\",{\"1\":{\"64\":1}}],[\"返回读取的字节数\",{\"1\":{\"63\":1}}],[\"返回值\",{\"1\":{\"60\":2,\"61\":2}}],[\"返回\",{\"1\":{\"60\":1}}],[\"返回移动后的指针位置和移动过程中遇到的任何错误\",{\"1\":{\"49\":1}}],[\"返回的n\",{\"1\":{\"48\":1}}],[\"返回的\",{\"1\":{\"47\":1}}],[\"返回顶部按钮\",{\"1\":{\"4\":1,\"10\":1}}],[\"以上两个结构体pipewriter与pipereader是结合使用的需要用pipe\",{\"1\":{\"75\":1}}],[\"以读写模式打开文件\",{\"1\":{\"48\":1}}],[\"以及任何遇到的引起写入提前停止的错误\",{\"1\":{\"48\":1}}],[\"以及任何遇到的错误\",{\"1\":{\"47\":1}}],[\"以及允许的\",{\"1\":{\"47\":1}}],[\"以便\",{\"1\":{\"13\":1}}],[\"0775\",{\"1\":{\"48\":1}}],[\"0\",{\"1\":{\"47\":6,\"48\":1,\"49\":2,\"74\":1,\"75\":1}}],[\"它不会在列表中继续下去\",{\"1\":{\"83\":1}}],[\"它们被顺序读取\",{\"1\":{\"82\":1}}],[\"它是所提供的输入阅读器的逻辑串联\",{\"1\":{\"82\":1}}],[\"它从r开始读取偏移量off\",{\"1\":{\"89\":1}}],[\"它从r开始读取\",{\"1\":{\"76\":1,\"88\":1}}],[\"它从管道中读取数据\",{\"1\":{\"74\":1}}],[\"它将数据写入管道\",{\"1\":{\"75\":1}}],[\"它就必须返回一个非nil的错误\",{\"1\":{\"48\":1}}],[\"它就会返回读取的字节数\",{\"1\":{\"47\":1}}],[\"它返回复制的字节数\",{\"1\":{\"87\":1}}],[\"它返回复制的字节数n\",{\"1\":{\"86\":1}}],[\"它返回复制的字节数以及复制时遇到的最早错误\",{\"1\":{\"80\":1}}],[\"它返回复制的字节数和复制时遇到的第一个错误\",{\"1\":{\"78\":1}}],[\"它返回从\",{\"1\":{\"48\":1}}],[\"它返回读取的字节数\",{\"1\":{\"47\":1}}],[\"它会从相同的调用中返回\",{\"1\":{\"47\":1}}],[\"它也会在调用过程中使用\",{\"1\":{\"47\":1}}],[\"它主要包装了一些已有的实现\",{\"1\":{\"44\":1}}],[\"将其写入复制到所有提供的写入器中\",{\"1\":{\"83\":1}}],[\"将副本从src复制到dst\",{\"1\":{\"78\":1}}],[\"将设置err\",{\"1\":{\"69\":1}}],[\"将返回\",{\"1\":{\"63\":2}}],[\"将等待所有数据可用之后\",{\"1\":{\"63\":1}}],[\"将对象的数据流写入到\",{\"1\":{\"61\":1}}],[\"将内容读到缓冲区内\",{\"1\":{\"49\":1}}],[\"将内容读至buf\",{\"1\":{\"47\":1}}],[\"将\",{\"1\":{\"47\":1,\"48\":1,\"64\":1}}],[\"基础接口\",{\"0\":{\"46\":1}}],[\"在这点上\",{\"1\":{\"63\":1}}],[\"在用完\",{\"1\":{\"50\":1}}],[\"在整个标准库内都没有对closer的引用\",{\"1\":{\"50\":1}}],[\"在输入流结束时会返回一个非零的字节数\",{\"1\":{\"47\":1}}],[\"在成功读取\",{\"1\":{\"47\":1}}],[\"在读取未完全时遇到了eof\",{\"1\":{\"45\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"4\":1}}],[\"却没有显式的返回错误\",{\"1\":{\"45\":1}}],[\"bigger\",{\"1\":{\"86\":1,\"87\":1}}],[\"b\",{\"1\":{\"85\":2}}],[\"break\",{\"1\":{\"47\":1}}],[\"buf2\",{\"1\":{\"83\":3}}],[\"buf1\",{\"1\":{\"83\":3}}],[\"buf\",{\"1\":{\"47\":3,\"49\":4,\"79\":5,\"86\":4,\"87\":6,\"90\":3,\"91\":3}}],[\"buffer\",{\"1\":{\"45\":1,\"79\":1,\"83\":1,\"86\":1}}],[\"bytes\",{\"1\":{\"73\":1,\"83\":2}}],[\"bytescanner\",{\"1\":{\"67\":1}}],[\"bytescanner接口在基本的readbyte方法之外还添加了unreadbyte方法\",{\"1\":{\"67\":1}}],[\"bytescanner接口\",{\"0\":{\"67\":1}}],[\"bytewriter\",{\"1\":{\"68\":1}}],[\"bytewriter接口\",{\"0\":{\"68\":1}}],[\"bytereader是基本的readbyte方法的包装\",{\"1\":{\"66\":1}}],[\"bytereader\",{\"1\":{\"66\":1,\"67\":1}}],[\"bytereader接口\",{\"0\":{\"66\":1}}],[\"byte\",{\"1\":{\"47\":3,\"48\":2,\"49\":1,\"63\":1,\"64\":1,\"66\":1,\"68\":1,\"74\":1,\"75\":1,\"76\":2,\"79\":2,\"85\":1,\"86\":4,\"87\":3,\"88\":2,\"90\":2,\"91\":2}}],[\"be\",{\"1\":{\"32\":1,\"78\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":2,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":2}}],[\"一旦所有输入均返回eof\",{\"1\":{\"82\":1}}],[\"一般来说是io\",{\"1\":{\"45\":1}}],[\"一个拥有\",{\"1\":{\"23\":1}}],[\"某些使用io\",{\"1\":{\"45\":1}}],[\"name\",{\"1\":{\"99\":2}}],[\"n>\",{\"1\":{\"86\":1}}],[\"need\",{\"1\":{\"79\":1}}],[\"newreader\",{\"1\":{\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":3,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1}}],[\"newsectionreader返回一个sectionreader\",{\"1\":{\"76\":1,\"88\":1,\"89\":1}}],[\"newsectionreader\",{\"0\":{\"89\":1},\"1\":{\"76\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"new\",{\"1\":{\"45\":6}}],[\"nil时\",{\"1\":{\"80\":1,\"86\":1,\"87\":1}}],[\"nil而不是err\",{\"1\":{\"78\":1}}],[\"nil\",{\"1\":{\"47\":3,\"63\":2,\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":2,\"94\":1,\"95\":1}}],[\"n\",{\"1\":{\"47\":11,\"48\":2,\"49\":5,\"60\":2,\"61\":2,\"63\":5,\"64\":2,\"71\":1,\"73\":2,\"74\":1,\"75\":1,\"76\":3,\"78\":1,\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"83\":1,\"84\":1,\"86\":3,\"87\":4,\"88\":3,\"89\":2,\"90\":3,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"not\",{\"1\":{\"104\":1}}],[\"no\",{\"1\":{\"45\":1,\"79\":1}}],[\"会返回错误\",{\"1\":{\"66\":1}}],[\"会返回errclosedpipe\",{\"1\":{\"45\":1}}],[\"会照例返回可用的东西\",{\"1\":{\"47\":1}}],[\"会使用\",{\"1\":{\"16\":1}}],[\"copied\",{\"1\":{\"94\":1}}],[\"copyn将n个字节\",{\"1\":{\"80\":1}}],[\"copyn\",{\"0\":{\"80\":1},\"1\":{\"80\":2}}],[\"copybuffer与copy相同\",{\"1\":{\"79\":1}}],[\"copybuffer\",{\"0\":{\"79\":1},\"1\":{\"79\":3}}],[\"copy\",{\"0\":{\"78\":1},\"1\":{\"78\":2,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"89\":1,\"92\":1}}],[\"contains\",{\"1\":{\"76\":1}}],[\"const\",{\"1\":{\"19\":1}}],[\"c\",{\"1\":{\"68\":1}}],[\"close关闭写入器\",{\"1\":{\"75\":1}}],[\"close关闭读取器\",{\"1\":{\"74\":1}}],[\"closewitherror类似close方法\",{\"1\":{\"74\":1,\"75\":1}}],[\"closewitherror\",{\"1\":{\"74\":1,\"75\":1}}],[\"closer关闭的接口\",{\"1\":{\"50\":1}}],[\"closer\",{\"1\":{\"50\":1,\"53\":1,\"54\":1,\"55\":1}}],[\"closer接口\",{\"0\":{\"50\":1}}],[\"close\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"74\":1,\"75\":1,\"84\":1}}],[\"closed\",{\"1\":{\"45\":1}}],[\"calls\",{\"1\":{\"45\":1}}],[\"w接受字节片\",{\"1\":{\"95\":1}}],[\"with\",{\"1\":{\"85\":1}}],[\"will\",{\"1\":{\"32\":1,\"94\":1}}],[\"writte\",{\"1\":{\"80\":1}}],[\"written\",{\"1\":{\"78\":1,\"79\":1,\"80\":1}}],[\"write只调用一次\",{\"1\":{\"95\":1}}],[\"write实现了标准的写接口\",{\"1\":{\"75\":1}}],[\"writestring将字符串s的内容写入w\",{\"1\":{\"95\":1}}],[\"writestring\",{\"0\":{\"95\":1},\"1\":{\"71\":1,\"95\":2}}],[\"writeseeker\",{\"1\":{\"57\":1}}],[\"writeseeker接口聚合了基本的写入和移位操作\",{\"1\":{\"57\":1}}],[\"writeseeker接口\",{\"0\":{\"57\":1}}],[\"writebyte\",{\"1\":{\"68\":2}}],[\"writeat\",{\"1\":{\"64\":2}}],[\"writeto\",{\"1\":{\"61\":1,\"78\":1}}],[\"writecloser\",{\"1\":{\"54\":1}}],[\"writecloser接口聚合了基本的写入和关闭操作\",{\"1\":{\"54\":1}}],[\"writecloser接口\",{\"0\":{\"54\":1}}],[\"writer的代码\",{\"1\":{\"84\":1}}],[\"writers\",{\"1\":{\"83\":1}}],[\"writerat\",{\"1\":{\"64\":1}}],[\"writerat接口\",{\"0\":{\"64\":1}}],[\"writerto\",{\"1\":{\"61\":2}}],[\"writerto接口\",{\"0\":{\"61\":1}}],[\"writer\",{\"1\":{\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"61\":1,\"78\":1,\"79\":1,\"80\":1,\"83\":2,\"94\":1,\"95\":1}}],[\"writerinterface\",{\"1\":{\"48\":1}}],[\"writer接口\",{\"0\":{\"48\":1}}],[\"write\",{\"1\":{\"45\":2,\"48\":5,\"75\":1}}],[\"w\",{\"1\":{\"61\":3,\"75\":3,\"83\":2,\"84\":3,\"94\":1,\"95\":2}}],[\"whence\",{\"1\":{\"49\":5,\"76\":1,\"88\":1,\"92\":1}}],[\"world\",{\"1\":{\"47\":1,\"48\":2,\"49\":1,\"95\":1}}],[\"正常输入结束read返回eof\",{\"1\":{\"45\":1}}],[\"ef|grep\",{\"1\":{\"99\":1}}],[\"everything\",{\"1\":{\"94\":1}}],[\"extra\",{\"1\":{\"79\":1}}],[\"errclosedpip\",{\"1\":{\"74\":1}}],[\"errclosedpipe\",{\"1\":{\"45\":1}}],[\"err2\",{\"1\":{\"47\":2}}],[\"err\",{\"1\":{\"47\":8,\"48\":1,\"60\":3,\"61\":3,\"63\":2,\"64\":2,\"69\":1,\"71\":1,\"74\":2,\"75\":2,\"76\":2,\"78\":4,\"79\":7,\"80\":4,\"81\":3,\"82\":3,\"83\":3,\"84\":3,\"85\":3,\"86\":10,\"87\":7,\"88\":2,\"89\":3,\"90\":4,\"91\":4,\"92\":6,\"94\":3,\"95\":4}}],[\"errunexpectedeof表示在读取一个固定尺寸的块或者数据结构时\",{\"1\":{\"45\":1}}],[\"errunexpectedeof\",{\"1\":{\"45\":1}}],[\"errshortwrite表示写入操作写入的数据比提供的少\",{\"1\":{\"45\":1}}],[\"errshortwrite\",{\"1\":{\"45\":1}}],[\"errshortbuffer表示读取操作需要大缓冲\",{\"1\":{\"45\":1}}],[\"errshortbuffer\",{\"1\":{\"45\":1}}],[\"error\",{\"1\":{\"45\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":4,\"75\":4,\"76\":3,\"78\":1,\"79\":1,\"80\":1,\"85\":1,\"86\":3,\"87\":2,\"88\":3,\"90\":1,\"91\":1,\"92\":1,\"95\":1}}],[\"errors\",{\"1\":{\"45\":6}}],[\"errnoprogress\",{\"1\":{\"45\":1}}],[\"eof\",{\"1\":{\"45\":3,\"47\":5,\"60\":1,\"63\":2,\"75\":1,\"78\":1}}],[\"enhance\",{\"1\":{\"18\":1}}],[\"包装\",{\"1\":{\"68\":1}}],[\"包中的那些\",{\"1\":{\"44\":1}}],[\"包含\",{\"1\":{\"19\":1}}],[\"如果w实现stringwriter\",{\"1\":{\"95\":1}}],[\"如果min大于buf的长度\",{\"1\":{\"86\":1}}],[\"如果在读取了一些但不是全部字节后发生eof\",{\"1\":{\"87\":1}}],[\"如果在读取少于最小字节后发生eof\",{\"1\":{\"86\":1}}],[\"如果在一个结构化数据流中eof在不期望的位置出现了\",{\"1\":{\"45\":1}}],[\"如果读取的字节数少则返回错误\",{\"1\":{\"86\":1,\"87\":1}}],[\"如果列出的写程序返回错误\",{\"1\":{\"83\":1}}],[\"如果任何读取器返回非零\",{\"1\":{\"82\":1}}],[\"如果src实现writerto或dst实现readerfrom\",{\"1\":{\"79\":1}}],[\"如果src实现writerto接口\",{\"1\":{\"78\":1}}],[\"如果长度为零\",{\"1\":{\"79\":1}}],[\"如果buf为nil\",{\"1\":{\"79\":1}}],[\"如果需要\",{\"1\":{\"79\":1}}],[\"如果dst实现了readerfrom接口\",{\"1\":{\"78\":1,\"80\":1}}],[\"如果有\",{\"1\":{\"78\":1}}],[\"如果以错误关闭读取端\",{\"1\":{\"75\":1}}],[\"如果用错误关闭写入端\",{\"1\":{\"74\":1}}],[\"如果没有可用字符\",{\"1\":{\"69\":1}}],[\"如果没有字节可读取\",{\"1\":{\"66\":1}}],[\"如果对象的数据流只有部分可用\",{\"1\":{\"63\":1}}],[\"如果\",{\"1\":{\"49\":3,\"63\":3,\"64\":1}}],[\"如果你不了解它\",{\"1\":{\"15\":1}}],[\"如果你是一个新手\",{\"1\":{\"14\":1}}],[\"如\",{\"1\":{\"44\":1}}],[\"off\",{\"1\":{\"63\":3,\"64\":3,\"76\":2,\"88\":2,\"89\":1,\"91\":1}}],[\"offset\",{\"1\":{\"49\":2,\"76\":1,\"88\":1,\"92\":1}}],[\"o\",{\"1\":{\"48\":2},\"2\":{\"96\":1}}],[\"openfile\",{\"1\":{\"48\":1}}],[\"open\",{\"1\":{\"47\":1,\"49\":1}}],[\"o错误\",{\"1\":{\"47\":1}}],[\"or\",{\"1\":{\"45\":1,\"76\":1}}],[\"on\",{\"1\":{\"45\":1}}],[\"os\",{\"1\":{\"44\":1,\"47\":2,\"48\":3,\"49\":2,\"78\":3,\"79\":3,\"80\":2,\"81\":2,\"82\":2,\"84\":2,\"89\":2,\"92\":2,\"94\":2,\"95\":2}}],[\"o原始操作的一系列接口\",{\"1\":{\"44\":1}}],[\"o标准库\",{\"0\":{\"44\":1}}],[\"图标\",{\"0\":{\"41\":1}}],[\"图片引入\",{\"1\":{\"34\":1}}],[\"图片增强\",{\"0\":{\"27\":1}}],[\"资源链接\",{\"0\":{\"40\":1}}],[\"杂记\",{\"0\":{\"38\":1}}],[\"+\",{\"1\":{\"35\":1}}],[\"进行引用\",{\"1\":{\"34\":1}}],[\"分类为\",{\"1\":{\"33\":1}}],[\"日\",{\"1\":{\"33\":1}}],[\"月\",{\"1\":{\"33\":1}}],[\"年\",{\"1\":{\"33\":1}}],[\"作者设置为\",{\"1\":{\"33\":1}}],[\"pkill\",{\"1\":{\"99\":1}}],[\"process\",{\"1\":{\"99\":2}}],[\"programming\",{\"1\":{\"85\":1}}],[\"print\",{\"1\":{\"83\":2}}],[\"println\",{\"1\":{\"47\":2,\"86\":2,\"87\":1,\"93\":1}}],[\"printf\",{\"1\":{\"47\":1,\"49\":2,\"85\":1,\"86\":1,\"87\":1,\"90\":1,\"91\":1}}],[\"purpose\",{\"1\":{\"85\":1}}],[\"public\",{\"1\":{\"34\":1}}],[\"p则\",{\"1\":{\"63\":1}}],[\"package\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"89\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"page\",{\"1\":{\"32\":1}}],[\"p的全部作为暂存空间\",{\"1\":{\"47\":1}}],[\"p\",{\"1\":{\"47\":2,\"48\":3,\"63\":5,\"64\":3,\"76\":2,\"88\":2,\"90\":1,\"91\":1}}],[\"pipe创建一个同步的内存管道\",{\"1\":{\"84\":1}}],[\"pipewriter是一个管道的写入端\",{\"1\":{\"75\":1}}],[\"pipewriter\",{\"0\":{\"75\":1},\"1\":{\"75\":4,\"84\":1}}],[\"pipereader是一个管道的读取端\",{\"1\":{\"74\":1}}],[\"pipereader\",{\"0\":{\"74\":1},\"1\":{\"74\":4,\"84\":1}}],[\"pipe\",{\"0\":{\"84\":1},\"1\":{\"45\":1,\"84\":2}}],[\"plugin\",{\"1\":{\"18\":1}}],[\"here\",{\"1\":{\"79\":2}}],[\"hello\",{\"1\":{\"47\":1,\"48\":4,\"49\":1,\"95\":1}}],[\"hope\",{\"1\":{\"33\":1}}],[\"h1\",{\"1\":{\"32\":2}}],[\"h2o\",{\"1\":{\"21\":1}}],[\"from\",{\"1\":{\"94\":1}}],[\"frontmatter\",{\"1\":{\"4\":1,\"10\":1,\"15\":3,\"32\":1,\"33\":1}}],[\"fprint\",{\"1\":{\"84\":1}}],[\"fatal函数完成\",{\"1\":{\"78\":1}}],[\"fatal\",{\"1\":{\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":2,\"94\":1,\"95\":1}}],[\"fields\",{\"1\":{\"76\":1}}],[\"filtered\",{\"1\":{\"76\":1}}],[\"first\",{\"1\":{\"32\":1,\"79\":1,\"82\":2}}],[\"found\",{\"1\":{\"104\":1}}],[\"for\",{\"1\":{\"47\":1}}],[\"fontawesome\",{\"1\":{\"41\":1}}],[\"f\",{\"1\":{\"47\":3,\"48\":3,\"49\":4}}],[\"func\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"73\":1,\"74\":3,\"75\":3,\"76\":6,\"78\":2,\"79\":2,\"80\":2,\"81\":2,\"82\":2,\"83\":2,\"84\":3,\"85\":2,\"86\":2,\"87\":2,\"88\":5,\"89\":2,\"90\":2,\"91\":2,\"92\":2,\"93\":2,\"94\":2,\"95\":2}}],[\"fmt\",{\"1\":{\"47\":4,\"49\":3,\"83\":3,\"84\":2,\"85\":2,\"86\":4,\"87\":3,\"90\":2,\"91\":2,\"93\":2}}],[\"teereader返回一个reader\",{\"1\":{\"94\":1}}],[\"teereader\",{\"0\":{\"94\":1},\"1\":{\"94\":2}}],[\"tee\",{\"1\":{\"83\":1}}],[\"than\",{\"1\":{\"86\":2,\"87\":1}}],[\"third\",{\"1\":{\"82\":2}}],[\"the\",{\"1\":{\"32\":1}}],[\"to\",{\"1\":{\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":2,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":2}}],[\"toc\",{\"1\":{\"10\":1}}],[\"txt初始内容为\",{\"1\":{\"48\":1}}],[\"txt内容更新为\",{\"1\":{\"48\":1}}],[\"txt内容为\",{\"1\":{\"47\":1,\"49\":1}}],[\"txt\",{\"1\":{\"47\":1,\"48\":1,\"49\":1}}],[\"type\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"title\",{\"1\":{\"32\":3}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"27\":1}}],[\"计划\",{\"1\":{\"26\":2}}],[\"x\",{\"1\":{\"26\":1}}],[\"任务列表\",{\"0\":{\"26\":1}}],[\"重要的内容\",{\"1\":{\"25\":1}}],[\"标准库\",{\"0\":{\"42\":1},\"2\":{\"43\":1}}],[\"标签为\",{\"1\":{\"33\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"32\":1}}],[\"标题和页面信息\",{\"1\":{\"10\":1}}],[\"标记\",{\"0\":{\"25\":1}}],[\"此文字有脚注^first\",{\"1\":{\"24\":1}}],[\"脚注\",{\"0\":{\"24\":1}}],[\"的返回值\",{\"1\":{\"60\":1,\"61\":1}}],[\"的含义\",{\"1\":{\"49\":1}}],[\"的实现会阻止返回零字节的计数和一个\",{\"1\":{\"47\":1}}],[\"的字节\",{\"1\":{\"47\":1}}],[\"的\",{\"1\":{\"23\":1,\"32\":1,\"33\":1}}],[\"is\",{\"1\":{\"79\":1,\"85\":1}}],[\"if\",{\"1\":{\"47\":2,\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":2,\"94\":1,\"95\":1}}],[\"import\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"io\",{\"1\":{\"45\":1,\"47\":2,\"78\":3,\"79\":3,\"80\":3,\"81\":4,\"82\":3,\"83\":4,\"84\":5,\"85\":2,\"86\":6,\"87\":5,\"89\":4,\"90\":3,\"91\":3,\"92\":5,\"93\":3,\"94\":5,\"95\":2}}],[\"io包中提供i\",{\"1\":{\"44\":1}}],[\"i\",{\"0\":{\"44\":1},\"1\":{\"35\":1},\"2\":{\"96\":1}}],[\"int64\",{\"1\":{\"49\":2,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"73\":2,\"76\":6,\"78\":1,\"79\":1,\"80\":2,\"81\":1,\"88\":6,\"89\":2,\"91\":1,\"92\":2,\"93\":1}}],[\"int\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"63\":1,\"64\":1,\"69\":1,\"71\":1,\"74\":1,\"75\":1,\"76\":3,\"86\":2,\"87\":1,\"88\":3,\"90\":1,\"91\":1,\"92\":1,\"95\":1}}],[\"interface\",{\"1\":{\"47\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"in\",{\"1\":{\"32\":1,\"85\":1}}],[\"id来强制关闭应用\",{\"1\":{\"99\":1}}],[\"id\",{\"1\":{\"23\":1}}],[\"it\",{\"1\":{\"16\":2}}],[\"我在右对齐\",{\"1\":{\"22\":1}}],[\"我是居中的\",{\"1\":{\"22\":1}}],[\"自定义对齐\",{\"0\":{\"22\":1}}],[\"自定义标题\",{\"1\":{\"19\":5}}],[\"上下角标\",{\"0\":{\"21\":1}}],[\"上一篇\",{\"1\":{\"4\":1}}],[\"查看详情\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1}}],[\"详情容器\",{\"1\":{\"19\":1}}],[\"危险容器\",{\"1\":{\"19\":1}}],[\"警告容器\",{\"1\":{\"19\":1}}],[\"==\",{\"1\":{\"47\":5,\"78\":2,\"80\":2,\"86\":1,\"87\":2}}],[\"=\",{\"1\":{\"19\":1,\"45\":6,\"47\":4,\"48\":1,\"49\":3,\"63\":1,\"78\":3,\"79\":7,\"80\":3,\"81\":4,\"82\":6,\"83\":4,\"84\":3,\"85\":3,\"86\":11,\"87\":7,\"89\":4,\"90\":5,\"91\":5,\"92\":6,\"93\":2,\"94\":4,\"95\":2}}],[\"an\",{\"1\":{\"79\":1}}],[\"allocate\",{\"1\":{\"79\":1}}],[\"also\",{\"1\":{\"79\":1}}],[\"append\",{\"1\":{\"48\":1}}],[\"as\",{\"1\":{\"32\":1}}],[\"attrs\",{\"0\":{\"23\":1}}],[\"a\",{\"1\":{\"19\":1,\"47\":1,\"48\":2,\"49\":1,\"85\":1}}],[\"与\",{\"1\":{\"19\":1}}],[\"代码块\",{\"0\":{\"20\":1}}],[\"代码\",{\"1\":{\"19\":1}}],[\"信息容器\",{\"1\":{\"19\":1}}],[\"v\",{\"1\":{\"47\":1,\"49\":2}}],[\"var\",{\"1\":{\"45\":6,\"83\":1,\"94\":1}}],[\"variable\",{\"1\":{\"19\":1}}],[\"vue\",{\"1\":{\"35\":2}}],[\"vuepress\",{\"0\":{\"17\":1},\"1\":{\"13\":2,\"15\":2,\"16\":1,\"17\":2,\"18\":1,\"34\":1}}],[\"安全的在\",{\"1\":{\"19\":1}}],[\"提示容器\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"18\":1}}],[\"minimal\",{\"1\":{\"86\":2,\"87\":1}}],[\"min\",{\"1\":{\"86\":2}}],[\"mind\",{\"1\":{\"85\":1}}],[\"multiwriter创建一个writers\",{\"1\":{\"83\":1}}],[\"multiwriter\",{\"0\":{\"83\":1},\"1\":{\"83\":2}}],[\"multireader返回一个reader\",{\"1\":{\"82\":1}}],[\"multireader\",{\"0\":{\"82\":1},\"1\":{\"82\":2}}],[\"multiple\",{\"1\":{\"45\":1}}],[\"max\",{\"1\":{\"73\":1}}],[\"make\",{\"1\":{\"47\":1,\"49\":1,\"79\":1,\"86\":3,\"87\":2,\"90\":1,\"91\":1}}],[\"main\",{\"1\":{\"47\":2,\"48\":2,\"49\":2,\"78\":2,\"79\":2,\"80\":2,\"81\":2,\"82\":2,\"83\":2,\"84\":2,\"85\":2,\"86\":1,\"87\":2,\"89\":2,\"90\":1,\"91\":2,\"92\":2,\"93\":2,\"94\":2,\"95\":2}}],[\"markdown\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1},\"1\":{\"13\":2,\"14\":3,\"15\":1,\"16\":3,\"17\":2,\"18\":1,\"19\":1,\"32\":3,\"33\":1,\"34\":2,\"35\":2},\"2\":{\"30\":1}}],[\"ms\",{\"1\":{\"33\":1}}],[\"more\",{\"1\":{\"31\":1}}],[\"md\",{\"1\":{\"18\":1}}],[\"请使用绝对链接\",{\"1\":{\"34\":1}}],[\"请阅读\",{\"1\":{\"17\":1}}],[\"请先阅读\",{\"1\":{\"14\":1}}],[\"语法\",{\"1\":{\"18\":1,\"35\":1}}],[\"语法进行了扩展\",{\"1\":{\"17\":1}}],[\"语法扩展\",{\"1\":{\"16\":1}}],[\"对读的并行调用和对写的并行调用也是安全的\",{\"1\":{\"84\":1}}],[\"对于\",{\"1\":{\"34\":1}}],[\"对\",{\"1\":{\"17\":1}}],[\"为\",{\"1\":{\"49\":3}}],[\"为了丰富文档写作\",{\"1\":{\"17\":1}}],[\"为每个\",{\"1\":{\"15\":1}}],[\"插件来实现\",{\"1\":{\"16\":1}}],[\"扩展\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"17\":1}}],[\"中写入直到将\",{\"1\":{\"63\":1}}],[\"中写入到基本数据流中\",{\"1\":{\"48\":1}}],[\"中读取数据到对象的数据流中\",{\"1\":{\"60\":1}}],[\"中被写入的字节数n\",{\"1\":{\"48\":1}}],[\"中\",{\"1\":{\"47\":1,\"61\":1,\"63\":1}}],[\"中设置页面信息\",{\"1\":{\"33\":1}}],[\"中设置页面标题\",{\"1\":{\"32\":1}}],[\"中使用\",{\"1\":{\"19\":1,\"35\":1}}],[\"中的数据写入到对象数据流的\",{\"1\":{\"64\":1}}],[\"中的第一个\",{\"1\":{\"32\":1}}],[\"中的\",{\"1\":{\"17\":1}}],[\"中很重要的一个概念\",{\"1\":{\"15\":1}}],[\"中自定义它们\",{\"1\":{\"10\":1}}],[\"是写入的字节数\",{\"1\":{\"61\":1}}],[\"是读取的字节数\",{\"1\":{\"60\":1}}],[\"是指针移动的偏移量\",{\"1\":{\"49\":1}}],[\"是\",{\"1\":{\"15\":1}}],[\"通过r执行的所有r读取均与对w的相应写入匹配\",{\"1\":{\"94\":1}}],[\"通过\",{\"1\":{\"15\":1,\"18\":1}}],[\"配置\",{\"0\":{\"15\":1}}],[\"演示\",{\"1\":{\"14\":1}}],[\"和读取时遇到的错误\",{\"1\":{\"63\":1}}],[\"和\",{\"1\":{\"14\":1,\"33\":1,\"47\":1}}],[\"还不会编写\",{\"1\":{\"14\":1}}],[\"介绍\",{\"0\":{\"14\":1},\"1\":{\"14\":1,\"15\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"35\":1}}],[\"你需要阅读\",{\"1\":{\"15\":1}}],[\"你应该创建和编写\",{\"1\":{\"13\":1}}],[\"你可以将图片和\",{\"1\":{\"34\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"34\":1}}],[\"你可以在\",{\"1\":{\"32\":1,\"33\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"10\":1}}],[\"你可以标记\",{\"1\":{\"25\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"13\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"4\":1}}],[\"主题扩展了更多\",{\"1\":{\"18\":1}}],[\"主题扩展\",{\"0\":{\"18\":1}}],[\"主题也带有以下元素\",{\"1\":{\"10\":1}}],[\"主要从\",{\"1\":{\"13\":1}}],[\"展示\",{\"0\":{\"13\":1}}],[\"夜间模式按钮\",{\"1\":{\"10\":1}}],[\"文件以读取完毕\",{\"1\":{\"47\":1}}],[\"文件夹的图片\",{\"1\":{\"34\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"34\":1}}],[\"文件\",{\"1\":{\"13\":1}}],[\"文件生成页面\",{\"1\":{\"13\":1}}],[\"文章标题列表\",{\"1\":{\"10\":1}}],[\"文字\",{\"1\":{\"7\":2}}],[\"文字段落\",{\"1\":{\"7\":24}}],[\"布局包括\",{\"1\":{\"10\":1}}],[\"布局\",{\"0\":{\"10\":1},\"2\":{\"12\":1}}],[\"布局与功能禁用\",{\"0\":{\"4\":1}}],[\"加密\",{\"2\":{\"9\":1}}],[\"2020\",{\"1\":{\"33\":1}}],[\"2\",{\"0\":{\"46\":1,\"47\":1,\"48\":2,\"49\":1,\"50\":1,\"53\":1,\"61\":1,\"64\":1,\"67\":1,\"74\":1,\"79\":1,\"90\":1},\"1\":{\"7\":14,\"26\":1,\"49\":1,\"78\":1}}],[\"13\",{\"0\":{\"95\":1}}],[\"17\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"11\",{\"0\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"14\",{\"1\":{\"86\":1}}],[\"10\",{\"0\":{\"87\":1},\"1\":{\"49\":1,\"91\":1,\"92\":1}}],[\"12\",{\"0\":{\"94\":1},\"1\":{\"47\":1}}],[\"19th\",{\"1\":{\"21\":1}}],[\"1\",{\"0\":{\"45\":1,\"47\":1,\"52\":1,\"60\":1,\"63\":1,\"66\":1,\"73\":1,\"78\":1,\"89\":1},\"1\":{\"7\":12,\"19\":1,\"26\":1,\"33\":2,\"35\":2,\"49\":1,\"78\":1,\"83\":1}}],[\"段落\",{\"1\":{\"7\":2}}],[\"密码加密的文章\",{\"0\":{\"7\":1}}],[\"禁用\",{\"2\":{\"6\":1}}],[\"禁用了如下功能\",{\"1\":{\"4\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"35\":1}}],[\"页面内容\",{\"0\":{\"34\":1}}],[\"页面标题\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"页面配置\",{\"0\":{\"31\":1},\"1\":{\"33\":1},\"2\":{\"37\":1}}],[\"页面引入配置\",{\"1\":{\"15\":1}}],[\"页面信息\",{\"0\":{\"33\":1},\"1\":{\"4\":1}}],[\"页脚\",{\"1\":{\"4\":1,\"10\":1}}],[\"评论\",{\"1\":{\"4\":1,\"10\":1}}],[\"链接\",{\"1\":{\"4\":1,\"19\":1}}],[\"编辑此页链接\",{\"1\":{\"4\":1}}],[\"贡献者\",{\"1\":{\"4\":1,\"10\":1}}],[\"路径导航\",{\"1\":{\"4\":1,\"10\":1}}],[\"侧边栏\",{\"1\":{\"4\":1,\"10\":1}}],[\"导航栏\",{\"1\":{\"4\":1,\"10\":1}}],[\"本页面就是一个示例\",{\"1\":{\"4\":1}}],[\"简介\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,wt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(et(t,v[s],n)):e==="search"?self.postMessage(tt(t,v[s],n)):self.postMessage({suggestions:et(t,v[s],n),results:tt(t,v[s],n)})};
//# sourceMappingURL=index.js.map
