import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,b as i,e as t}from"./app-BVV_bYVj.js";const s={},n=t('<h3 id="描述一下数据库的锁机制" tabindex="-1"><a class="header-anchor" href="#描述一下数据库的锁机制"><span>描述一下数据库的锁机制</span></a></h3><h3 id="什么是事务" tabindex="-1"><a class="header-anchor" href="#什么是事务"><span>什么是事务？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。</p></details><h3 id="什么是事务的acid特性-恢复技术能保证事务的哪些特性" tabindex="-1"><a class="header-anchor" href="#什么是事务的acid特性-恢复技术能保证事务的哪些特性"><span>什么是事务的<code>ACID</code>特性？恢复技术能保证事务的哪些特性？</span></a></h3><details class="hint-container details"><summary>答案</summary><ol><li><strong>原子性（Atomicity）</strong>：事务是一个不可分割的工作单元，要么全部执行成功，要么全部失败回滚，不存在部分执行的情况。</li><li><strong>一致性（Consistency）</strong>：事务执行前后，数据库从一个一致性状态转移到另一个一致性状态（读取数据是一样的）</li><li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，每个事务的操作应该与其他事务相互隔离，互不干扰，避免并发执行时数据不一致的问题。</li><li><strong>持久性（Durability）</strong>：一旦事务提交成功，对数据库的修改将永久保存，即使系统发生故障，数据也不会丢失。</li></ol><p>恢复技术通过日志记录和检查点等机制来保证事务的持久性特性。当系统发生故障时，恢复技术可以确保以下特性：</p><ol><li><strong>原子性</strong>：通过事务日志和回滚操作，可以确保事务要么完全执行成功，要么完全回滚，避免部分执行的情况。</li><li><strong>持久性</strong>：通过事务日志和数据备份等手段，可以确保即使系统崩溃，已提交的事务对数据库的修改也能够永久保存。</li></ol></details><h3 id="在sql中-定义事务的一般有哪些" tabindex="-1"><a class="header-anchor" href="#在sql中-定义事务的一般有哪些"><span>在<code>SQL</code>中，定义事务的一般有哪些？</span></a></h3><h3 id="数据库中的b-s-c-s的区别是什么" tabindex="-1"><a class="header-anchor" href="#数据库中的b-s-c-s的区别是什么"><span>数据库中的<code>B/S</code>，<code>C/S</code>的区别是什么？</span></a></h3><h3 id="存储过程和函数分别是什么" tabindex="-1"><a class="header-anchor" href="#存储过程和函数分别是什么"><span>存储过程和函数分别是什么？</span></a></h3><h3 id="什么是索引-其作用是" tabindex="-1"><a class="header-anchor" href="#什么是索引-其作用是"><span>什么是索引？其作用是？</span></a></h3><h3 id="什么是主键和外键-他们的特点和用途是什么" tabindex="-1"><a class="header-anchor" href="#什么是主键和外键-他们的特点和用途是什么"><span>什么是主键和外键？他们的特点和用途是什么？</span></a></h3><h3 id="什么是基本表-什么是视图-两者的区别和联系是什么" tabindex="-1"><a class="header-anchor" href="#什么是基本表-什么是视图-两者的区别和联系是什么"><span>什么是基本表？什么是视图？两者的区别和联系是什么？</span></a></h3><h3 id="视图有哪些优点" tabindex="-1"><a class="header-anchor" href="#视图有哪些优点"><span>视图有哪些优点？</span></a></h3><h3 id="什么是e-r图-e-r模型向关系模型的转换规则是什么-e-r图的设计原则是什么" tabindex="-1"><a class="header-anchor" href="#什么是e-r图-e-r模型向关系模型的转换规则是什么-e-r图的设计原则是什么"><span>什么是E-R图？E-R模型向关系模型的转换规则是什么？E-R图的设计原则是什么？</span></a></h3><h3 id="简述数据库软件系统建立流程" tabindex="-1"><a class="header-anchor" href="#简述数据库软件系统建立流程"><span>简述数据库软件系统建立流程</span></a></h3><details class="hint-container details"><summary>答案</summary><ol><li><strong>需求分析</strong>： <ul><li>确定系统的需求和目标，包括功能需求、性能需求、安全需求等。</li></ul></li><li><strong>概念设计</strong>： <ul><li>根据需求分析的结果，设计数据库系统的概念模型，包括实体关系图（ER图）、数据流程图等。</li><li>确定数据库中的实体、属性、关系等基本结构。</li></ul></li><li><strong>逻辑设计</strong>： <ul><li>将概念模型转换为数据库模式，设计数据库表结构、字段、关系等。</li><li>确定数据的存储方式、数据类型、主键、外键等约束。</li><li>模型优化</li></ul></li><li><strong>物理设计</strong>： <ul><li>根据逻辑设计结果选择合适的数据库管理系统（DBMS）。</li><li>设计物理存储结构，包括表空间、索引、分区等。</li><li>考虑性能优化和扩展性，确定数据备份和恢复策略。</li></ul></li><li><strong>实施和编码</strong>： <ul><li>根据物理设计结果，在选定的DBMS上创建数据库和表结构。</li><li>编写数据库操作的存储过程、触发器、视图等。</li><li>进行数据导入和数据转换。</li></ul></li><li><strong>测试</strong>： <ul><li>进行单元测试、集成测试和系统测试，确保数据库系统的功能和性能符合需求。</li><li>进行性能测试、安全测试、容错测试等。</li></ul></li><li><strong>部署和维护</strong>： <ul><li>部署数据库系统到生产环境，并进行系统上线。</li><li>监控数据库性能，定期备份数据，保证系统的稳定性和安全性。</li><li>定期进行维护工作，如优化查询、清理无用数据、更新数据库结构等。</li></ul></li></ol></details><h3 id="什么是数据字典-其作用是什么" tabindex="-1"><a class="header-anchor" href="#什么是数据字典-其作用是什么"><span>什么是数据字典？其作用是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>数据字典是描述数据库中数据元素的集合，是元数据（元数据是数据的数据，用来管理数据），不是数据本身。</p><p>其包括 1.数据项 2.数据结构 3.数据流 4.数据存储 5.处理过程</p><p>其作用包括定义数据元素、描述属性、说明数据关系、提供业务含义，并帮助数据库管理和维护。有助于确保数据的准确性、完整性和一致性。</p></details><h3 id="什么是游标-其作用是什么" tabindex="-1"><a class="header-anchor" href="#什么是游标-其作用是什么"><span>什么是游标？其作用是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>游标是系统为用户开放的缓冲区,用于存放<code>SQL</code>语句的执行结果。</p><p>游标通常用于遍历查询结果集，允许应用程序逐行处理查询结果。</p><p>游标的作用包括：</p><ol><li><p>逐行处理数据：游标允许程序逐行访问查询结果集中的数据，这对于需要逐行处理数据的情况非常有用，比如在编写存储过程或批处理作业时。</p></li><li><p>定位和导航：游标提供了定位和导航查询结果集的能力，允许程序员在结果集中移动到特定的行或记录。</p></li><li><p>数据检索：通过游标，可以在结果集中检索数据，以便在应用程序中进行处理、分析或展示。</p></li><li><p>数据更新：游标还可以用于在结果集中更新、删除或插入数据，允许应用程序对查询结果进行修改。</p></li></ol><p>游标操作通常比批量操作效率低，且可能会引起性能问题。开发中尽量使用批操作来替代游标</p></details><h3 id="什么是触发器-有什么功能" tabindex="-1"><a class="header-anchor" href="#什么是触发器-有什么功能"><span>什么是触发器？有什么功能？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>触发器（Trigger）是数据库管理系统中的一种特殊类型的存储过程，它会在特定的数据库操作（如插入、更新、删除）发生时自动执行。触发器与表相关联，当满足触发条件时，触发器会被触发执行，从而执行预定义的操作。</p><p>触发器的主要功能包括：</p><ol><li><strong>数据约束</strong>：可以用来实施数据完整性约束，如检查插入、更新或删除操作是否符合特定条件。</li><li><strong>自动化任务</strong>：可以在特定数据库操作发生时自动执行一系列操作，如更新其他表、记录日志、发送通知等。</li><li><strong>审计跟踪</strong>：可以用来跟踪数据库操作，记录操作历史以及审计信息。</li><li><strong>复杂业务逻辑</strong>：可以用于实现复杂的业务逻辑，确保特定操作的一致性和正确性。</li><li><strong>数据同步</strong>：可以用于在多个表之间保持数据同步。</li></ol><p>触发器在数据库中起到了重要作用，可以帮助确保数据的完整性、一致性和安全性，同时简化开发人员的工作，减少重复性代码的编写。</p></details><h3 id="数据库并发操作带来的数据不一致包括哪些-产生不一致的原因是什么" tabindex="-1"><a class="header-anchor" href="#数据库并发操作带来的数据不一致包括哪些-产生不一致的原因是什么"><span>数据库并发操作带来的数据不一致包括哪些？产生不一致的原因是什么？</span></a></h3><h3 id="数据库并发控制的主要技术有哪些" tabindex="-1"><a class="header-anchor" href="#数据库并发控制的主要技术有哪些"><span>数据库并发控制的主要技术有哪些？</span></a></h3><h3 id="什么是数据库范式-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是数据库范式-有什么作用"><span>什么是数据库范式？有什么作用？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li><p>1NF保证原子性</p></li><li><p>2NF去除非主属性对于主属性的部分依赖</p></li><li><p>3NF去除非主属性对于主属性的传递依赖</p></li><li><p>BCNF去除主属性对于主键的部分依赖与传递依赖(<strong>左边都是码</strong>)</p></li><li><p>4NF消除表中的多值依赖(非平凡且非函数依赖的多值依赖)</p></li></ul></details><h3 id="什么是数据库的完整性-其目的是什么-数据库完整性有哪些" tabindex="-1"><a class="header-anchor" href="#什么是数据库的完整性-其目的是什么-数据库完整性有哪些"><span>什么是数据库的完整性？其目的是什么？数据库完整性有哪些？</span></a></h3><h3 id="登记日志文件的时候为什么必须要先写日志文件-后写数据库" tabindex="-1"><a class="header-anchor" href="#登记日志文件的时候为什么必须要先写日志文件-后写数据库"><span>登记日志文件的时候为什么必须要先写日志文件，后写数据库？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>日志文件是用来记录事务对数据库的更新操作的文件。</p><p>先写入日志文件，再写入数据库，可以确保数据的一致性、完整性和可靠性。</p><p>先写入日志文件也可以作为备份机制，提高性能并增强容错处理能力。</p></details><h3 id="什么是数据库镜像-它有什么用途" tabindex="-1"><a class="header-anchor" href="#什么是数据库镜像-它有什么用途"><span>什么是数据库镜像？它有什么用途？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>数据库镜像是一种技术，用于创建一个数据库的实时副本，保证镜像数据和主数据的一致性。</p><p>作用</p><ol><li>提高系统可用性</li><li>灾难恢复</li><li>负载均衡</li><li>实时备份</li><li>升级测试</li></ol></details><h3 id="什么是数据仓库" tabindex="-1"><a class="header-anchor" href="#什么是数据仓库"><span>什么是数据仓库？</span></a></h3><h3 id="数据库语句delete和drop的区别是什么" tabindex="-1"><a class="header-anchor" href="#数据库语句delete和drop的区别是什么"><span>数据库语句<code>delete</code>和<code>drop</code>的区别是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><ol><li>DELETE用于删除行级别的记录，而DROP用于删除表级别的对象。简单来说，DELETE删除的是表中的数据，而DROP则删除整个表及其关联的数据和对象。</li><li>用DELETE之后，被删除的记录将被移除，但表结构和其它数据不受影响。这意味着可以在以后再重新插入数据。使用DROP后，将导致整个表和所有其它数据库对象丢失，除非您事先备份了它们，否则就是很难去恢复。</li><li>使用DELETE之后，被删除的记录仍旧保存在数据库日志中，可以通过恢复日志来找回它们。但是，在使用DROP后，已删除的数据无法被恢复，甚至在备份中也无法找回。</li><li>DELETE删除表中的数据时，表文件在磁盘上所占空间不会变小，存储空间不会被释放，只是把删除的数据行设置为不可见，而DROP语句删除表结构及所有数据，并将表所占用的空间全部释放。</li><li>DELETE属于数据库DML操作语言，会走事务，执行时会触发触发器，而DROP语句是一个DDL操作，用于直接删除一个或多个表、索引、视图等对象。</li></ol></details><h3 id="什么是数据库系统模式" tabindex="-1"><a class="header-anchor" href="#什么是数据库系统模式"><span>什么是数据库系统模式？</span></a></h3><h3 id="数据库的三级模式和是什么-数据库系统的三级模式结构" tabindex="-1"><a class="header-anchor" href="#数据库的三级模式和是什么-数据库系统的三级模式结构"><span>数据库的三级模式和是什么？数据库系统的三级模式结构</span></a></h3><details class="hint-container details"><summary>答案</summary><p>外模式（视图）内模式（物理存储）</p></details><h3 id="什么是数据库的两级映像和数据库的数据独立性" tabindex="-1"><a class="header-anchor" href="#什么是数据库的两级映像和数据库的数据独立性"><span>什么是数据库的两级映像和数据库的数据独立性？</span></a></h3><h3 id="数据库的活锁与死锁是什么" tabindex="-1"><a class="header-anchor" href="#数据库的活锁与死锁是什么"><span>数据库的活锁与死锁是什么？</span></a></h3><h3 id="数据库的dba和dbms的作用是什么" tabindex="-1"><a class="header-anchor" href="#数据库的dba和dbms的作用是什么"><span>数据库的DBA和DBMS的作用是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><ol><li>数据库管理员（DBA）负责管理数据库系统，包括设计、安全、性能优化和故障排除。</li><li>数据库管理系统（DBMS）是一种软件工具，用于管理和操作数据库，包括数据的定义、创建、维护和控制访问。</li></ol></details><h3 id="故障恢复" tabindex="-1"><a class="header-anchor" href="#故障恢复"><span>故障恢复</span></a></h3><h4 id="事务故障的恢复" tabindex="-1"><a class="header-anchor" href="#事务故障的恢复"><span>事务故障的恢复</span></a></h4><ol><li>反向扫描日志，直到故障事务的开始标志</li><li>对日志的更新操作进行逆操作</li></ol><h4 id="系统故障的恢复" tabindex="-1"><a class="header-anchor" href="#系统故障的恢复"><span>系统故障的恢复</span></a></h4><div class="hint-container info"><p class="hint-container-title">tip</p><p>系统故障的恢复由系统在重新启动后自动完成。</p></div><p>做法</p><ol><li>UNDO故障发生时未完成的事务</li><li>REDO已完成的事务</li></ol><p>步骤</p><ol><li>正向扫描日志文件，故障前开始前已经提交的事务，加入重做队列。还未完成的事务，加入撤销队列</li><li>撤销事务进行撤销处理 （反向扫描）</li><li>重做事务进行重做处理 （正向扫描）</li></ol><h4 id="介质故障的恢复" tabindex="-1"><a class="header-anchor" href="#介质故障的恢复"><span>介质故障的恢复</span></a></h4><p>装入副本，重做事务</p>',51);function r(d,o){return e(),a("div",null,[i(" ### TODO 看看转储 "),n])}const p=l(s,[["render",r],["__file","database.html.vue"]]),m=JSON.parse('{"path":"/notes/order/database.html","title":"数据库","lang":"zh-CN","frontmatter":{"title":"数据库","icon":"fa-solid fa-database","category":"note","tag":["database"],"description":"描述一下数据库的锁机制 什么是事务？ 答案 事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。 什么是事务的ACID特性？恢复技术能保证事务的哪些特性？ 答案 原子性（Atomicity）：事务是一个不可分割的工作单元，要么全部执行成功，要么全部失败回滚，不存...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/notes/order/database.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"数据库"}],["meta",{"property":"og:description","content":"描述一下数据库的锁机制 什么是事务？ 答案 事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。 什么是事务的ACID特性？恢复技术能保证事务的哪些特性？ 答案 原子性（Atomicity）：事务是一个不可分割的工作单元，要么全部执行成功，要么全部失败回滚，不存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T07:18:53.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:modified_time","content":"2024-03-12T07:18:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-12T07:18:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":3,"title":"描述一下数据库的锁机制","slug":"描述一下数据库的锁机制","link":"#描述一下数据库的锁机制","children":[]},{"level":3,"title":"什么是事务？","slug":"什么是事务","link":"#什么是事务","children":[]},{"level":3,"title":"什么是事务的ACID特性？恢复技术能保证事务的哪些特性？","slug":"什么是事务的acid特性-恢复技术能保证事务的哪些特性","link":"#什么是事务的acid特性-恢复技术能保证事务的哪些特性","children":[]},{"level":3,"title":"在SQL中，定义事务的一般有哪些？","slug":"在sql中-定义事务的一般有哪些","link":"#在sql中-定义事务的一般有哪些","children":[]},{"level":3,"title":"数据库中的B/S，C/S的区别是什么？","slug":"数据库中的b-s-c-s的区别是什么","link":"#数据库中的b-s-c-s的区别是什么","children":[]},{"level":3,"title":"存储过程和函数分别是什么？","slug":"存储过程和函数分别是什么","link":"#存储过程和函数分别是什么","children":[]},{"level":3,"title":"什么是索引？其作用是？","slug":"什么是索引-其作用是","link":"#什么是索引-其作用是","children":[]},{"level":3,"title":"什么是主键和外键？他们的特点和用途是什么？","slug":"什么是主键和外键-他们的特点和用途是什么","link":"#什么是主键和外键-他们的特点和用途是什么","children":[]},{"level":3,"title":"什么是基本表？什么是视图？两者的区别和联系是什么？","slug":"什么是基本表-什么是视图-两者的区别和联系是什么","link":"#什么是基本表-什么是视图-两者的区别和联系是什么","children":[]},{"level":3,"title":"视图有哪些优点？","slug":"视图有哪些优点","link":"#视图有哪些优点","children":[]},{"level":3,"title":"什么是E-R图？E-R模型向关系模型的转换规则是什么？E-R图的设计原则是什么？","slug":"什么是e-r图-e-r模型向关系模型的转换规则是什么-e-r图的设计原则是什么","link":"#什么是e-r图-e-r模型向关系模型的转换规则是什么-e-r图的设计原则是什么","children":[]},{"level":3,"title":"简述数据库软件系统建立流程","slug":"简述数据库软件系统建立流程","link":"#简述数据库软件系统建立流程","children":[]},{"level":3,"title":"什么是数据字典？其作用是什么？","slug":"什么是数据字典-其作用是什么","link":"#什么是数据字典-其作用是什么","children":[]},{"level":3,"title":"什么是游标？其作用是什么？","slug":"什么是游标-其作用是什么","link":"#什么是游标-其作用是什么","children":[]},{"level":3,"title":"什么是触发器？有什么功能？","slug":"什么是触发器-有什么功能","link":"#什么是触发器-有什么功能","children":[]},{"level":3,"title":"数据库并发操作带来的数据不一致包括哪些？产生不一致的原因是什么？","slug":"数据库并发操作带来的数据不一致包括哪些-产生不一致的原因是什么","link":"#数据库并发操作带来的数据不一致包括哪些-产生不一致的原因是什么","children":[]},{"level":3,"title":"数据库并发控制的主要技术有哪些？","slug":"数据库并发控制的主要技术有哪些","link":"#数据库并发控制的主要技术有哪些","children":[]},{"level":3,"title":"什么是数据库范式？有什么作用？","slug":"什么是数据库范式-有什么作用","link":"#什么是数据库范式-有什么作用","children":[]},{"level":3,"title":"什么是数据库的完整性？其目的是什么？数据库完整性有哪些？","slug":"什么是数据库的完整性-其目的是什么-数据库完整性有哪些","link":"#什么是数据库的完整性-其目的是什么-数据库完整性有哪些","children":[]},{"level":3,"title":"登记日志文件的时候为什么必须要先写日志文件，后写数据库？","slug":"登记日志文件的时候为什么必须要先写日志文件-后写数据库","link":"#登记日志文件的时候为什么必须要先写日志文件-后写数据库","children":[]},{"level":3,"title":"什么是数据库镜像？它有什么用途？","slug":"什么是数据库镜像-它有什么用途","link":"#什么是数据库镜像-它有什么用途","children":[]},{"level":3,"title":"什么是数据仓库？","slug":"什么是数据仓库","link":"#什么是数据仓库","children":[]},{"level":3,"title":"数据库语句delete和drop的区别是什么？","slug":"数据库语句delete和drop的区别是什么","link":"#数据库语句delete和drop的区别是什么","children":[]},{"level":3,"title":"什么是数据库系统模式？","slug":"什么是数据库系统模式","link":"#什么是数据库系统模式","children":[]},{"level":3,"title":"数据库的三级模式和是什么？数据库系统的三级模式结构","slug":"数据库的三级模式和是什么-数据库系统的三级模式结构","link":"#数据库的三级模式和是什么-数据库系统的三级模式结构","children":[]},{"level":3,"title":"什么是数据库的两级映像和数据库的数据独立性？","slug":"什么是数据库的两级映像和数据库的数据独立性","link":"#什么是数据库的两级映像和数据库的数据独立性","children":[]},{"level":3,"title":"数据库的活锁与死锁是什么？","slug":"数据库的活锁与死锁是什么","link":"#数据库的活锁与死锁是什么","children":[]},{"level":3,"title":"数据库的DBA和DBMS的作用是什么？","slug":"数据库的dba和dbms的作用是什么","link":"#数据库的dba和dbms的作用是什么","children":[]},{"level":3,"title":"故障恢复","slug":"故障恢复","link":"#故障恢复","children":[]}],"git":{"createdTime":1710221104000,"updatedTime":1710227933000,"contributors":[{"name":"liyajun","email":"332209078@qq.com","commits":3}]},"readingTime":{"minutes":9.45,"words":2836},"filePathRelative":"notes/order/database.md","localizedDate":"2024年3月12日","autoDesc":true,"excerpt":"<!-- ### TODO 看看转储 -->\\n<h3>描述一下数据库的锁机制</h3>\\n<h3>什么是事务？</h3>\\n<details class=\\"hint-container details\\"><summary>答案</summary>\\n<p>事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。</p>\\n</details>\\n<h3>什么是事务的<code>ACID</code>特性？恢复技术能保证事务的哪些特性？</h3>\\n<details class=\\"hint-container details\\"><summary>答案</summary>\\n<ol>\\n<li><strong>原子性（Atomicity）</strong>：事务是一个不可分割的工作单元，要么全部执行成功，要么全部失败回滚，不存在部分执行的情况。</li>\\n<li><strong>一致性（Consistency）</strong>：事务执行前后，数据库从一个一致性状态转移到另一个一致性状态（读取数据是一样的）</li>\\n<li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，每个事务的操作应该与其他事务相互隔离，互不干扰，避免并发执行时数据不一致的问题。</li>\\n<li><strong>持久性（Durability）</strong>：一旦事务提交成功，对数据库的修改将永久保存，即使系统发生故障，数据也不会丢失。</li>\\n</ol>\\n<p>恢复技术通过日志记录和检查点等机制来保证事务的持久性特性。当系统发生故障时，恢复技术可以确保以下特性：</p>\\n<ol>\\n<li><strong>原子性</strong>：通过事务日志和回滚操作，可以确保事务要么完全执行成功，要么完全回滚，避免部分执行的情况。</li>\\n<li><strong>持久性</strong>：通过事务日志和数据备份等手段，可以确保即使系统崩溃，已提交的事务对数据库的修改也能够永久保存。</li>\\n</ol>\\n</details>"}');export{p as comp,m as data};
