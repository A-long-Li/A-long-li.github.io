import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-BHLaVnwX.js";const e={},o=t(`<h1 id="认识gin" tabindex="-1"><a class="header-anchor" href="#认识gin"><span>认识gin</span></a></h1><p><strong>go的框架其实是可以理解为库，并不是用了某一个框架就不能用别的框架，可以选择性的使用各个库中的优秀组件，进行组合</strong></p><h2 id="_2-gin介绍" tabindex="-1"><a class="header-anchor" href="#_2-gin介绍"><span>2. gin介绍</span></a></h2><p>特性：</p><p><strong>快速</strong></p><p>基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</p><p><strong>支持中间件</strong></p><p>传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p><p><strong>Crash 处理</strong></p><p>Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</p><p><strong>JSON 验证</strong></p><p>Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</p><p><strong>路由组</strong></p><p>更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</p><p><strong>错误管理</strong></p><p>Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</p><p><strong>内置渲染</strong></p><p>Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</p><p><strong>可扩展性</strong></p><p>新建一个中间件非常简单。</p><h2 id="_3-快速入门" tabindex="-1"><a class="header-anchor" href="#_3-快速入门"><span>3. 快速入门</span></a></h2><p>go版本需求：go1.13及以上</p><p>环境：windows 11</p><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><pre class="language-cmd"><code>D:\\go\\project&gt;mkdir ginlearn
D:\\go\\project&gt;cd ginlearn
D:\\go\\project\\ginlearn&gt;go work init
D:\\go\\project\\ginlearn&gt;mkdir helloworld
D:\\go\\project\\ginlearn&gt;cd helloworld
D:\\go\\project\\ginlearn\\helloworld&gt;go mod init test.com/helloworld
go: creating new go.mod: module test.com/helloworld
D:\\go\\project\\ginlearn\\helloworld&gt;cd ..
D:\\go\\project\\ginlearn&gt;go work use ./helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用goland（vscode）打开</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS D:<span class="token punctuation">\\</span>go<span class="token punctuation">\\</span>project<span class="token punctuation">\\</span>ginlearn<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> .<span class="token punctuation">\\</span>helloworld<span class="token punctuation">\\</span>
<span class="token comment">#下载并安装gin</span>
PS D:<span class="token punctuation">\\</span>go<span class="token punctuation">\\</span>project<span class="token punctuation">\\</span>ginlearn<span class="token punctuation">\\</span>helloworld<span class="token operator">&gt;</span> go get <span class="token parameter variable">-u</span> github.com/gin-gonic/gin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例程序：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 监听并在 0.0.0.0:8080 上启动服务</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，postman进行测试</p><p><strong>简单的代码就实现了一个http的服务</strong></p>`,30),p=[o];function i(c,l){return a(),s("div",null,p)}const u=n(e,[["render",i],["__file","01.html.vue"]]),d=JSON.parse('{"path":"/golang/gin/01.html","title":"认识gin","lang":"zh-CN","frontmatter":{"title":"认识gin","icon":"fab fa-golang","category":"golang","order":1,"tag":["gin","golang"],"description":"认识gin go的框架其实是可以理解为库，并不是用了某一个框架就不能用别的框架，可以选择性的使用各个库中的优秀组件，进行组合 2. gin介绍 特性： 快速 基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。 支持中间件 传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gin/01.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"认识gin"}],["meta",{"property":"og:description","content":"认识gin go的框架其实是可以理解为库，并不是用了某一个框架就不能用别的框架，可以选择性的使用各个库中的优秀组件，进行组合 2. gin介绍 特性： 快速 基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。 支持中间件 传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gin"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"认识gin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"2. gin介绍","slug":"_2-gin介绍","link":"#_2-gin介绍","children":[]},{"level":2,"title":"3. 快速入门","slug":"_3-快速入门","link":"#_3-快速入门","children":[]}],"git":{"createdTime":1712589804000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":2}]},"readingTime":{"minutes":1.71,"words":513},"filePathRelative":"golang/gin/01.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<p><strong>go的框架其实是可以理解为库，并不是用了某一个框架就不能用别的框架，可以选择性的使用各个库中的优秀组件，进行组合</strong></p>\\n<h2>2. gin介绍</h2>\\n<p>特性：</p>\\n<p><strong>快速</strong></p>\\n<p>基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</p>\\n<p><strong>支持中间件</strong></p>\\n<p>传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p>\\n<p><strong>Crash 处理</strong></p>"}');export{u as comp,d as data};
