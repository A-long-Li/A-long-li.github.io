import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,d as s,f as n,a as l,e as a}from"./app-CWz2CPII.js";const i={},u=a(`<h1 id="模型定义" tabindex="-1"><a class="header-anchor" href="#模型定义"><span>模型定义</span></a></h1><p>前面入门案例中，我们定义了User结构体用来和数据表users做映射，User结构体，我们称之为数据模型，在gorm框架中，操作数据库需要预先定义模型。</p><p>底层都是使用的golang的database标准库，利用反射原理，执行读写操作时，将结构体翻译为sql语句，并将结果转化为对应的模型。</p><h2 id="_1-模型定义" tabindex="-1"><a class="header-anchor" href="#_1-模型定义"><span>1. 模型定义</span></a></h2><p>假设有一个商品表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>goods<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;自增ID，商品Id&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>price<span class="token punctuation">\`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品价格&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>type_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品类型Id&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>createtime<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上述表翻译为模型后，如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Good <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id         <span class="token builtin">int</span>  <span class="token comment">//表字段名为：id</span>
	Name       <span class="token builtin">string</span> <span class="token comment">//表字段名为：name</span>
	Price      <span class="token builtin">float64</span> <span class="token comment">//表字段名为：price</span>
	TypeId     <span class="token builtin">int</span>  <span class="token comment">//表字段名为：type_id</span>
	CreateTime <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;column:createtime&quot;\`</span>  <span class="token comment">//表字段名为：createtime</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认gorm对struct字段名使用<strong>Snake Case</strong>命名风格转换成mysql表字段名(需要转换成小写字母)。</p><blockquote><p>Snake Case命名风格，就是各个单词之间用下划线（_）分隔，例如： CreateTime的Snake Case风格命名为create_time</p></blockquote><p>同时默认情况下，使用<code>ID</code>做为其主键，使用结构体名称的<code>Snake Case</code>风格的复数形式做为表名，使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间。</p><h2 id="_2-模型标签" tabindex="-1"><a class="header-anchor" href="#_2-模型标签"><span>2. 模型标签</span></a></h2><p>标签定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token string">\`gorm:&quot;标签内容&quot;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>标签定义部分，多个标签定义可以使用分号（;）分隔</strong></p><p>gorm常用标签如下：</p><table><thead><tr><th style="text-align:left;">标签</th><th style="text-align:left;">说明</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">column</td><td style="text-align:left;">指定列名</td><td style="text-align:left;"><code>gorm:&quot;column:createtime&quot;</code></td></tr><tr><td style="text-align:left;">primaryKey</td><td style="text-align:left;">指定主键</td><td style="text-align:left;"><code>gorm:&quot;column:id; PRIMARY_KEY&quot;</code></td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">忽略字段</td><td style="text-align:left;"><code>gorm:&quot;-&quot;</code> 可以忽略struct字段，被忽略的字段不参与gorm的读写操作</td></tr></tbody></table><p>其他的可以查看官方文档：<code>https://gorm.io/zh_CN/docs/models.html#embedded_struct</code></p><h2 id="_3-表名映射" tabindex="-1"><a class="header-anchor" href="#_3-表名映射"><span>3. 表名映射</span></a></h2><ul><li><p>复数表名，比如结构体User，默认的表名为users</p></li><li><p>实现Tabler接口 （<code>TableName</code> 不支持动态变化，它会被缓存下来以便后续使用。）</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Tabler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// TableName 会将 User 的表名重写为 \`profiles\`</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;profiles&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>动态表名，使用Scopes</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UserTable</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
    <span class="token keyword">if</span> user<span class="token punctuation">.</span>Admin <span class="token punctuation">{</span>
      <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;admin_users&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Scopes</span><span class="token punctuation">(</span><span class="token function">UserTable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>临时表名</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;deleted_users&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_4-model" tabindex="-1"><a class="header-anchor" href="#_4-model"><span>4. Model</span></a></h2><p>GORM 定义一个 <code>gorm.Model</code> 结构体，其包括字段 <code>ID</code>、<code>CreatedAt</code>、<code>UpdatedAt</code>、<code>DeletedAt</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// gorm.Model 的定义</span>
<span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">uint</span>           <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  UpdatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">\`gorm:&quot;index&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GORM 约定使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 追踪创建/更新时间。如果定义了这种字段，GORM 在创建、更新时会自动填充当前时间。</p><p>要使用不同名称的字段，您可以配置 autoCreateTime、autoUpdateTime 标签</p><p>如果想要保存 UNIX（毫/纳）秒时间戳，而不是 time，只需简单地将 time.Time 修改为 int 即可。</p><p>例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  CreatedAt time<span class="token punctuation">.</span>Time <span class="token comment">// 默认创建时间字段， 在创建时，如果该字段值为零值，则使用当前时间填充</span>
  UpdatedAt <span class="token builtin">int</span>       <span class="token comment">// 默认更新时间字段， 在创建时该字段值为零值或者在更新时，使用当前时间戳秒数填充</span>
  Updated   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoUpdateTime:nano&quot;\`</span> <span class="token comment">// 自定义字段， 使用时间戳填纳秒数充更新时间</span>
  Updated   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoUpdateTime:milli&quot;\`</span> <span class="token comment">//自定义字段， 使用时间戳毫秒数填充更新时间</span>
  Created   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoCreateTime&quot;\`</span>      <span class="token comment">//自定义字段， 使用时间戳秒数填充创建时间</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将它嵌入到您的结构体中，以包含这几个字段，比如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">uint</span>           <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  UpdatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">\`gorm:&quot;index&quot;\`</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于正常的结构体字段，你也可以通过标签 <code>embedded</code> 将其嵌入，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name  <span class="token builtin">string</span>
    Email <span class="token builtin">string</span> 
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID      <span class="token builtin">int</span>
  Author  Author <span class="token string">\`gorm:&quot;embedded&quot;\`</span>
  Upvotes <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID    <span class="token builtin">int64</span>
  Name  <span class="token builtin">string</span>
  Email <span class="token builtin">string</span>
  Upvotes  <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用标签 <code>embeddedPrefix</code> 来为 db 中的字段名添加前缀，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID      <span class="token builtin">int</span>
  Author  Author <span class="token string">\`gorm:&quot;embedded;embeddedPrefix:author_&quot;\`</span>
  Upvotes <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID          <span class="token builtin">int64</span>
  AuthorName  <span class="token builtin">string</span>
  AuthorEmail <span class="token builtin">string</span>
  Upvotes     <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-数据库连接" tabindex="-1"><a class="header-anchor" href="#_5-数据库连接"><span>5. 数据库连接</span></a></h2><p>GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server</p><p>连接数据库主要是两个步骤：</p><ul><li>配置DSN (Data Source Name)</li><li>使用gorm.Open连接数据库</li></ul><h3 id="_5-1-dsn" tabindex="-1"><a class="header-anchor" href="#_5-1-dsn"><span>5.1 DSN</span></a></h3><p>gorm库使用dsn作为连接数据库的参数，dsn翻译过来就叫数据源名称，用来描述数据库连接信息。一般都包含数据库连接地址，账号，密码之类的信息。</p><p>格式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span>username<span class="token punctuation">[</span><span class="token punctuation">:</span>password<span class="token punctuation">]</span>@<span class="token punctuation">]</span><span class="token punctuation">[</span>protocol<span class="token punctuation">[</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">/</span>dbname<span class="token punctuation">[</span>?param1<span class="token operator">=</span>value1<span class="token operator">&amp;</span><span class="token operator">...</span><span class="token operator">&amp;</span>paramN<span class="token operator">=</span>valueN<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mysql的dsn的一些例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//mysql dsn格式</span>
<span class="token comment">//涉及参数:</span>
<span class="token comment">//username   数据库账号</span>
<span class="token comment">//password   数据库密码</span>
<span class="token comment">//host       数据库连接地址，可以是Ip或者域名</span>
<span class="token comment">//port       数据库端口</span>
<span class="token comment">//Dbname     数据库名</span>
username<span class="token punctuation">:</span>password@<span class="token function">tcp</span><span class="token punctuation">(</span>host<span class="token punctuation">:</span>port<span class="token punctuation">)</span><span class="token operator">/</span>Dbname?charset<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span>True<span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local

<span class="token comment">//填上参数后的例子</span>
<span class="token comment">//username = root</span>
<span class="token comment">//password = 123456</span>
<span class="token comment">//host     = localhost</span>
<span class="token comment">//port     = 3306</span>
<span class="token comment">//Dbname   = gorm</span>
<span class="token comment">//后面K/V键值对参数含义为：</span>
<span class="token comment">//  charset=utf8 客户端字符集为utf8</span>
<span class="token comment">//  parseTime=true 支持把数据库datetime和date类型转换为golang的time.Time类型</span>
<span class="token comment">//  loc=Local 使用系统本地时区</span>
root<span class="token punctuation">:</span><span class="token number">123456</span>@<span class="token function">tcp</span><span class="token punctuation">(</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token operator">/</span>gorm?charset<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span>True<span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local

<span class="token comment">//gorm 设置mysql连接超时参数</span>
<span class="token comment">//开发的时候经常需要设置数据库连接超时参数，gorm是通过dsn的timeout参数配置</span>
<span class="token comment">//例如，设置10秒后连接超时，timeout=10s</span>
<span class="token comment">//下面是完成的例子</span>
root<span class="token punctuation">:</span><span class="token number">123456</span>@<span class="token function">tcp</span><span class="token punctuation">(</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token operator">/</span>gorm?charset<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span>True<span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local<span class="token operator">&amp;</span>timeout<span class="token operator">=</span>10s

<span class="token comment">//设置读写超时时间</span>
<span class="token comment">// readTimeout - 读超时时间，0代表不限制</span>
<span class="token comment">// writeTimeout - 写超时时间，0代表不限制</span>
root<span class="token punctuation">:</span><span class="token number">123456</span>@<span class="token function">tcp</span><span class="token punctuation">(</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token operator">/</span>gorm?charset<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span>True<span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local<span class="token operator">&amp;</span>timeout<span class="token operator">=</span>10s<span class="token operator">&amp;</span>readTimeout<span class="token operator">=</span>30s<span class="token operator">&amp;</span>writeTimeout<span class="token operator">=</span>60s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要支持完整的 UTF-8 编码，您需要将 <code>charset=utf8</code> 更改为 <code>charset=utf8mb4</code></p><h3 id="_5-2-连接数据库" tabindex="-1"><a class="header-anchor" href="#_5-2-连接数据库"><span>5.2 连接数据库</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/mysql&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span>
  dsn <span class="token operator">:=</span> <span class="token string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>
  db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),r={href:"https://github.com/go-gorm/mysql",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// DSN data source name</span>
  DefaultStringSize<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token comment">// string 类型字段的默认长度</span>
  DisableDatetimePrecision<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span>
  DontSupportRenameIndex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span>
  DontSupportRenameColumn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 用 \`change\` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span>
  SkipInitializeWithVersion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 根据当前 MySQL 版本自动配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GORM 允许通过 <code>DriverName</code> 选项自定义 MySQL 驱动，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token boolean">_</span> <span class="token string">&quot;example.com/my_mysql_driver&quot;</span>
  <span class="token string">&quot;gorm.io/driver/mysql&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DriverName<span class="token punctuation">:</span> <span class="token string">&quot;my_mysql_driver&quot;</span><span class="token punctuation">,</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// data source name, 详情参考：https://github.com/go-sql-driver/mysql#dsn-data-source-name</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-调试模式" tabindex="-1"><a class="header-anchor" href="#_5-3-调试模式"><span>5.3 调试模式</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-4-连接池配置" tabindex="-1"><a class="header-anchor" href="#_5-4-连接池配置"><span>5.4 连接池配置</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	sqlDB<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//设置数据库连接池参数</span>
    sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>   <span class="token comment">//设置数据库连接池最大连接数</span>
    sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">//连接池最大允许的空闲连接数，如果没有sql任务需要执行的连接数大于20，超过的连接会被连接池关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function k(m,v){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("MySQL 驱动程序提供了 "),s("a",r,[n("一些高级配置"),l(e)]),n(" 可以在初始化过程中使用，例如：")]),d])}const y=t(i,[["render",k],["__file","02.html.vue"]]),h=JSON.parse('{"path":"/golang/gorm/02.html","title":"模型定义","lang":"zh-CN","frontmatter":{"title":"模型定义","icon":"fab fa-golang","category":"golang","order":2,"tag":["gorm","golang"],"description":"模型定义 前面入门案例中，我们定义了User结构体用来和数据表users做映射，User结构体，我们称之为数据模型，在gorm框架中，操作数据库需要预先定义模型。 底层都是使用的golang的database标准库，利用反射原理，执行读写操作时，将结构体翻译为sql语句，并将结果转化为对应的模型。 1. 模型定义 假设有一个商品表 将上述表翻译为模型后...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gorm/02.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"模型定义"}],["meta",{"property":"og:description","content":"模型定义 前面入门案例中，我们定义了User结构体用来和数据表users做映射，User结构体，我们称之为数据模型，在gorm框架中，操作数据库需要预先定义模型。 底层都是使用的golang的database标准库，利用反射原理，执行读写操作时，将结构体翻译为sql语句，并将结果转化为对应的模型。 1. 模型定义 假设有一个商品表 将上述表翻译为模型后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gorm"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模型定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. 模型定义","slug":"_1-模型定义","link":"#_1-模型定义","children":[]},{"level":2,"title":"2. 模型标签","slug":"_2-模型标签","link":"#_2-模型标签","children":[]},{"level":2,"title":"3. 表名映射","slug":"_3-表名映射","link":"#_3-表名映射","children":[]},{"level":2,"title":"4. Model","slug":"_4-model","link":"#_4-model","children":[]},{"level":2,"title":"5. 数据库连接","slug":"_5-数据库连接","link":"#_5-数据库连接","children":[{"level":3,"title":"5.1 DSN","slug":"_5-1-dsn","link":"#_5-1-dsn","children":[]},{"level":3,"title":"5.2 连接数据库","slug":"_5-2-连接数据库","link":"#_5-2-连接数据库","children":[]},{"level":3,"title":"5.3 调试模式","slug":"_5-3-调试模式","link":"#_5-3-调试模式","children":[]},{"level":3,"title":"5.4 连接池配置","slug":"_5-4-连接池配置","link":"#_5-4-连接池配置","children":[]}]}],"git":{"createdTime":1712590397000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":1}]},"readingTime":{"minutes":6.12,"words":1836},"filePathRelative":"golang/gorm/02.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<p>前面入门案例中，我们定义了User结构体用来和数据表users做映射，User结构体，我们称之为数据模型，在gorm框架中，操作数据库需要预先定义模型。</p>\\n<p>底层都是使用的golang的database标准库，利用反射原理，执行读写操作时，将结构体翻译为sql语句，并将结果转化为对应的模型。</p>\\n<h2>1. 模型定义</h2>\\n<p>假设有一个商品表</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>goods<span class=\\"token punctuation\\">`</span></span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'自增ID，商品Id\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>name<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">30</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'商品名\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>price<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">decimal</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">unsigned</span>  <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'商品价格\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>type_id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'商品类型Id\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>createtime<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'创建时间\'</span><span class=\\"token punctuation\\">,</span>\\n   <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">ENGINE</span><span class=\\"token operator\\">=</span><span class=\\"token keyword\\">InnoDB</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CHARSET</span><span class=\\"token operator\\">=</span>utf8mb4\\n</code></pre></div>"}');export{y as comp,h as data};
