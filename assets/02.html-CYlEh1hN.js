import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-COH3GpKD.js";const p={},o=t(`<h1 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h1><p>路由是URI到函数的映射。</p><p>一个URI含: <code>http://localhost:8080/user/find?id=11</code></p><ul><li>协议，比如http，https等</li><li>ip端口或者域名，比如127.0.0.1:8080或者<code>www.test.com</code></li><li>path，比如 /path</li><li>query，比如 ?query</li></ul><p>同时访问的时候，还需要指明HTTP METHOD，比如</p><ul><li><p>GET</p><p>GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</p></li><li><p>POST</p><p>POST方法用于将实体提交到指定的资源，通常会导致在服务器上的状态变化</p></li><li><p>HEAD</p><p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</p></li><li><p>PUT</p><p>PUT方法用请求有效载荷替换目标资源的所有当前表示</p></li><li><p>DELETE</p><p>DELETE方法删除指定的资源</p></li><li><p>CONNECT</p><p>CONNECT方法建立一个到由目标资源标识的服务器的隧道。</p></li><li><p>OPTIONS</p><p>OPTIONS方法用于描述目标资源的通信选项。</p></li><li><p>TRACE</p><p>TRACE方法沿着到目标资源的路径执行一个消息环回测试。</p></li><li><p>PATCH</p><p>PATCH方法用于对资源应用部分修改。</p></li></ul><blockquote><p>使用的时候，应该尽量遵循其语义</p></blockquote><h2 id="_1-restful-api规范" tabindex="-1"><a class="header-anchor" href="#_1-restful-api规范"><span>1. RESTful API规范</span></a></h2><p>RESTful API 的规范建议我们使用特定的HTTP方法来对服务器上的资源进行操作。</p><p>比如：</p><ol><li>GET，表示读取服务器上的资源</li><li>POST，表示在服务器上创建资源</li><li>PUT,表示更新或者替换服务器上的资源</li><li>DELETE，表示删除服务器上的资源</li><li>PATCH，表示更新/修改资源的一部分</li></ol><h2 id="_2-请求方法" tabindex="-1"><a class="header-anchor" href="#_2-请求方法"><span>2. 请求方法</span></a></h2><p>比如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">&quot;/delete&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;delete&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">&quot;/put&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;put&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要支持所有：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">&quot;/any&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;any&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要支持其中的几种：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>   r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//数组 map list 结构体</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//数组 map list 结构体</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-uri" tabindex="-1"><a class="header-anchor" href="#_3-uri"><span>3. URI</span></a></h2><p>URI书写的时候，我们不需要关心scheme和authority这两部分，我们主要通过path和query两部分的书写来进行资源的定位。</p><ul><li><p>静态url，比如<code>/hello</code>，<code>/user/find</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/user/find&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>路径参数，比如<code>/user/find/:id</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/user/find/:id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		param <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>模糊匹配，比如<code>/user/*path</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/user/*path&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		param <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-处理函数" tabindex="-1"><a class="header-anchor" href="#_4-处理函数"><span>4. 处理函数</span></a></h2><p>定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上下文的参数，获取http的请求参数，响应http请求等。</p><h2 id="_5-分组路由" tabindex="-1"><a class="header-anchor" href="#_5-分组路由"><span>5. 分组路由</span></a></h2><p>在进行开发的时候，我们往往要进行模块的划分，比如用户模块，以user开发，商品模块，以goods开头。</p><p>或者进行多版本开发，不同版本之间路径是一致的，这种时候，就可以用到分组路由了。</p><p>比如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>   ug <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ug<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;find&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;user find&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		ug<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;user save&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	gg <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/goods&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		gg<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;find&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;goods find&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		gg<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;goods save&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),e=[o];function c(i,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","02.html.vue"]]),d=JSON.parse('{"path":"/golang/gin/02.html","title":"路由","lang":"zh-CN","frontmatter":{"title":"路由","icon":"fab fa-golang","category":"golang","order":2,"tag":["gin","golang"],"description":"路由 路由是URI到函数的映射。 一个URI含: http://localhost:8080/user/find?id=11 协议，比如http，https等 ip端口或者域名，比如127.0.0.1:8080或者www.test.com path，比如 /path query，比如 ?query 同时访问的时候，还需要指明HTTP METHOD，比如...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gin/02.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"路由"}],["meta",{"property":"og:description","content":"路由 路由是URI到函数的映射。 一个URI含: http://localhost:8080/user/find?id=11 协议，比如http，https等 ip端口或者域名，比如127.0.0.1:8080或者www.test.com path，比如 /path query，比如 ?query 同时访问的时候，还需要指明HTTP METHOD，比如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gin"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路由\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. RESTful API规范","slug":"_1-restful-api规范","link":"#_1-restful-api规范","children":[]},{"level":2,"title":"2. 请求方法","slug":"_2-请求方法","link":"#_2-请求方法","children":[]},{"level":2,"title":"3. URI","slug":"_3-uri","link":"#_3-uri","children":[]},{"level":2,"title":"4. 处理函数","slug":"_4-处理函数","link":"#_4-处理函数","children":[]},{"level":2,"title":"5. 分组路由","slug":"_5-分组路由","link":"#_5-分组路由","children":[]}],"git":{"createdTime":1712589804000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":2}]},"readingTime":{"minutes":2.58,"words":774},"filePathRelative":"golang/gin/02.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<p>路由是URI到函数的映射。</p>\\n<p>一个URI含:  <code>http://localhost:8080/user/find?id=11</code></p>\\n<ul>\\n<li>协议，比如http，https等</li>\\n<li>ip端口或者域名，比如127.0.0.1:8080或者<code>www.test.com</code></li>\\n<li>path，比如 /path</li>\\n<li>query，比如 ?query</li>\\n</ul>\\n<p>同时访问的时候，还需要指明HTTP METHOD，比如</p>\\n<ul>\\n<li>\\n<p>GET</p>\\n<p>GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</p>\\n</li>\\n<li>\\n<p>POST</p>\\n<p>POST方法用于将实体提交到指定的资源，通常会导致在服务器上的状态变化</p>\\n</li>\\n<li>\\n<p>HEAD</p>\\n<p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</p>\\n</li>\\n<li>\\n<p>PUT</p>\\n<p>PUT方法用请求有效载荷替换目标资源的所有当前表示</p>\\n</li>\\n<li>\\n<p>DELETE</p>\\n<p>DELETE方法删除指定的资源</p>\\n</li>\\n<li>\\n<p>CONNECT</p>\\n<p>CONNECT方法建立一个到由目标资源标识的服务器的隧道。</p>\\n</li>\\n<li>\\n<p>OPTIONS</p>\\n<p>OPTIONS方法用于描述目标资源的通信选项。</p>\\n</li>\\n<li>\\n<p>TRACE</p>\\n<p>TRACE方法沿着到目标资源的路径执行一个消息环回测试。</p>\\n</li>\\n<li>\\n<p>PATCH</p>\\n<p>PATCH方法用于对资源应用部分修改。</p>\\n</li>\\n</ul>"}');export{k as comp,d as data};
