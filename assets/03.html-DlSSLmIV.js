import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-QLWppOx0.js";const p={},e=t(`<h1 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h1><h2 id="_1-插入数据" tabindex="-1"><a class="header-anchor" href="#_1-插入数据"><span>1. 插入数据</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
	Username<span class="token punctuation">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
	Password<span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
	CreateTime<span class="token punctuation">:</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

user<span class="token punctuation">.</span>ID             <span class="token comment">// 返回插入数据的主键</span>
result<span class="token punctuation">.</span>Error        <span class="token comment">// 返回 error</span>
result<span class="token punctuation">.</span>RowsAffected <span class="token comment">// 返回插入记录的条数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-用指定的字段创建" tabindex="-1"><a class="header-anchor" href="#_1-1-用指定的字段创建"><span>1.1 用指定的字段创建：</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-忽略字段" tabindex="-1"><a class="header-anchor" href="#_1-2-忽略字段"><span>1.2 忽略字段</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-批量插入" tabindex="-1"><a class="header-anchor" href="#_1-3-批量插入"><span>1.3 批量插入：</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span><span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>ID <span class="token comment">// 1,2,3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>CreateInBatches</code> 分批创建时，你可以指定每批的数量，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span><span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu_1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu_10000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// 数量为 100</span>
db<span class="token punctuation">.</span><span class="token function">CreateInBatches</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-使用map创建" tabindex="-1"><a class="header-anchor" href="#_1-4-使用map创建"><span>1.4 使用map创建：</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  <span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// batch insert from \`[]map[string]interface{}{}\`</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu_1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu_2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map创建注意，主键不会被填充。</p><h3 id="_1-5-sql表达式" tabindex="-1"><a class="header-anchor" href="#_1-5-sql表达式"><span>1.5 sql表达式：</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> clause<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span>SQL<span class="token punctuation">:</span> <span class="token string">&quot;md5(?)&quot;</span><span class="token punctuation">,</span> Vars<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-使用原生sql语句" tabindex="-1"><a class="header-anchor" href="#_1-6-使用原生sql语句"><span>1.6 使用原生sql语句：</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (username,password,createtime) values (?,?,?)&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-更新数据" tabindex="-1"><a class="header-anchor" href="#_2-更新数据"><span>2. 更新数据</span></a></h2><p>在创建一个表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>goods<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品id&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>title<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>price<span class="token punctuation">\`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0.00</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品价格&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>stock<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品库存&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品类型&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商品创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> dao

<span class="token keyword">import</span> <span class="token string">&quot;time&quot;</span>

<span class="token keyword">type</span> Goods <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id         <span class="token builtin">int</span>
	Title      <span class="token builtin">string</span>
	Price      <span class="token builtin">float64</span>
	Stock      <span class="token builtin">int</span>
	Type       <span class="token builtin">int</span>
	CreateTime time<span class="token punctuation">.</span>Time
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v Goods<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;goods&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">SaveGoods</span><span class="token punctuation">(</span>goods Goods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	DB<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> dao

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;testing&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestSaveGoods</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span>
		Title<span class="token punctuation">:</span>      <span class="token string">&quot;毛巾&quot;</span><span class="token punctuation">,</span>
		Price<span class="token punctuation">:</span>      <span class="token number">25</span><span class="token punctuation">,</span>
		Stock<span class="token punctuation">:</span>      <span class="token number">100</span><span class="token punctuation">,</span>
		Type<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>
		CreateTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token function">SaveGoods</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-保存数据" tabindex="-1"><a class="header-anchor" href="#_2-1-保存数据"><span>2.1 保存数据</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>

	goods<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token comment">//UPDATE \`goods\` SET \`title\`=&#39;毛巾&#39;,\`price\`=100.000000,\`stock\`=100,\`type\`=0,\`create_time  \`=&#39;2022-11-25 13:03:48&#39; WHERE \`id\` = 1</span>
	DB<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-更新单个列" tabindex="-1"><a class="header-anchor" href="#_2-2-更新单个列"><span>2.2 更新单个列</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
	DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-更新多列" tabindex="-1"><a class="header-anchor" href="#_2-3-更新多列"><span>2.3 更新多列</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>    goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
    <span class="token comment">//更新非零值的字段  也可以使用map</span>
	DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Goods<span class="token punctuation">{</span>
		Title<span class="token punctuation">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
		Stock<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-更新选定的字段" tabindex="-1"><a class="header-anchor" href="#_2-4-更新选定的字段"><span>2.4 更新选定的字段</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
	DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Goods<span class="token punctuation">{</span>
		Title<span class="token punctuation">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
		Stock<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>排除：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
	DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Goods<span class="token punctuation">{</span>
		Title<span class="token punctuation">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
		Stock<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以组合使用</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>gorm更新必须带条件进行更新，否则会返回错误<code>gorm.ErrMissingWhereClause</code>，或者启用 <code>AllowGlobalUpdate</code> 模式</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Session<span class="token punctuation">{</span>AllowGlobalUpdate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-表达式" tabindex="-1"><a class="header-anchor" href="#_2-5-表达式"><span>2.5 表达式</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">,</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;stock + 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">:</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;stock + 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-子查询更新" tabindex="-1"><a class="header-anchor" href="#_2-6-子查询更新"><span>2.6 子查询更新</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>  goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
	DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id=?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-删除数据" tabindex="-1"><a class="header-anchor" href="#_3-删除数据"><span>3. 删除数据</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	goods <span class="token operator">:=</span> Goods<span class="token punctuation">{</span><span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
	DB<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//根据主键删除</span>
DB<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Goods<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的道理，不带条件不能进行删除，必须加一些条件，或者使用原生 SQL，或者启用 <code>AllowGlobalUpdate</code> 模式</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Session<span class="token punctuation">{</span>AllowGlobalUpdate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM users</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-查询数据" tabindex="-1"><a class="header-anchor" href="#_4-查询数据"><span>4. 查询数据</span></a></h2><h3 id="_4-1-查询函数" tabindex="-1"><a class="header-anchor" href="#_4-1-查询函数"><span>4.1 查询函数</span></a></h3><ul><li><p>Take：查询一条记录</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>First: 根据主键正序排序后，查询第一条数据</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Last：根据主键倒序排序后，查询最后一条记录</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Find：查询多条记录</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Pluck：查询一列值</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> titles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Goods<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pluck</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>titles<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>当 First、Last、Take 方法找不到记录时，GORM 会返回 ErrRecordNotFound 错误，可以通过对比<code>gorm.ErrRecordNotFound</code>进行判断，或者使用Find和Limit的组合进行查询。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-where" tabindex="-1"><a class="header-anchor" href="#_4-2-where"><span>4.2 where</span></a></h3><p>通过db.Where函数设置条件</p><p>函数说明： <code>db.Where(query interface{}, args ...interface{})</code></p><p>参数说明:</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">query</td><td style="text-align:left;">sql语句的where子句, where子句中使用问号(?)代替参数值，则表示通过args参数绑定参数</td></tr><tr><td style="text-align:left;">args</td><td style="text-align:left;">where子句绑定的参数，可以绑定多个参数</td></tr></tbody></table><p>比如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id in (?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-select" tabindex="-1"><a class="header-anchor" href="#_4-3-select"><span>4.3 select</span></a></h3><p>设置select子句, 指定返回的字段</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> goods Goods
DB<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以写聚合函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> total <span class="token builtin">int</span>
DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Goods<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;count(*) as total&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pluck</span><span class="token punctuation">(</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-order" tabindex="-1"><a class="header-anchor" href="#_4-4-order"><span>4.4 order</span></a></h3><p>排序</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> goods <span class="token punctuation">[</span><span class="token punctuation">]</span>Goods
	DB<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;id desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-分页" tabindex="-1"><a class="header-anchor" href="#_4-5-分页"><span>4.5 分页</span></a></h3><p>通过limit和Offset实现</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> goods <span class="token punctuation">[</span><span class="token punctuation">]</span>Goods
DB<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;create_time desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-count" tabindex="-1"><a class="header-anchor" href="#_4-6-count"><span>4.6 count</span></a></h3><p>返回查询匹配的行数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> total <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span>
DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Goods<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>total<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-分组" tabindex="-1"><a class="header-anchor" href="#_4-7-分组"><span>4.7 分组</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//统计每个商品分类下面有多少个商品</span>
<span class="token comment">//定一个Result结构体类型，用来保存查询结果</span>
<span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Type  <span class="token builtin">int</span>
    Total <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result
<span class="token comment">//等价于: SELECT type, count(*) as  total FROM \`goods\` GROUP BY type HAVING (total &gt; 0)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Goods<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;type, count(*) as  total&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">&quot;total &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span>

<span class="token comment">//scan类似Find都是用于执行查询语句，然后把查询结果赋值给结构体变量，区别在于scan不会从传递进来的结构体变量提取表名.</span>
<span class="token comment">//这里因为我们重新定义了一个结构体用于保存结果，但是这个结构体并没有绑定goods表，所以这里只能使用scan查询函数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Group函数必须搭配Select函数一起使用</strong></p><h3 id="_4-8-直接执行sql语句" tabindex="-1"><a class="header-anchor" href="#_4-8-直接执行sql语句"><span>4.8 直接执行sql语句</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>sql <span class="token operator">:=</span> <span class="token string">&quot;SELECT type, count(*) as  total FROM \`goods\` where create_time &gt; ? GROUP BY type HAVING (total &gt; 0)&quot;</span>
<span class="token comment">//因为sql语句使用了一个问号(?)作为绑定参数, 所以需要传递一个绑定参数(Raw第二个参数).</span>
<span class="token comment">//Raw函数支持绑定多个参数</span>
db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;2022-11-06 00:00:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","03.html.vue"]]),k=JSON.parse('{"path":"/golang/gorm/03.html","title":"增删改查","lang":"zh-CN","frontmatter":{"title":"增删改查","icon":"fab fa-golang","category":"golang","order":3,"tag":["gorm","golang"],"description":"增删改查 1. 插入数据 1.1 用指定的字段创建： 1.2 忽略字段 1.3 批量插入： 使用 CreateInBatches 分批创建时，你可以指定每批的数量，例如： 1.4 使用map创建： map创建注意，主键不会被填充。 1.5 sql表达式： 1.6 使用原生sql语句： 2. 更新数据 在创建一个表 2.1 保存数据 2.2 更新单个列 ...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gorm/03.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"增删改查"}],["meta",{"property":"og:description","content":"增删改查 1. 插入数据 1.1 用指定的字段创建： 1.2 忽略字段 1.3 批量插入： 使用 CreateInBatches 分批创建时，你可以指定每批的数量，例如： 1.4 使用map创建： map创建注意，主键不会被填充。 1.5 sql表达式： 1.6 使用原生sql语句： 2. 更新数据 在创建一个表 2.1 保存数据 2.2 更新单个列 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gorm"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"增删改查\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. 插入数据","slug":"_1-插入数据","link":"#_1-插入数据","children":[{"level":3,"title":"1.1 用指定的字段创建：","slug":"_1-1-用指定的字段创建","link":"#_1-1-用指定的字段创建","children":[]},{"level":3,"title":"1.2 忽略字段","slug":"_1-2-忽略字段","link":"#_1-2-忽略字段","children":[]},{"level":3,"title":"1.3 批量插入：","slug":"_1-3-批量插入","link":"#_1-3-批量插入","children":[]},{"level":3,"title":"1.4 使用map创建：","slug":"_1-4-使用map创建","link":"#_1-4-使用map创建","children":[]},{"level":3,"title":"1.5 sql表达式：","slug":"_1-5-sql表达式","link":"#_1-5-sql表达式","children":[]},{"level":3,"title":"1.6 使用原生sql语句：","slug":"_1-6-使用原生sql语句","link":"#_1-6-使用原生sql语句","children":[]}]},{"level":2,"title":"2. 更新数据","slug":"_2-更新数据","link":"#_2-更新数据","children":[{"level":3,"title":"2.1 保存数据","slug":"_2-1-保存数据","link":"#_2-1-保存数据","children":[]},{"level":3,"title":"2.2 更新单个列","slug":"_2-2-更新单个列","link":"#_2-2-更新单个列","children":[]},{"level":3,"title":"2.3 更新多列","slug":"_2-3-更新多列","link":"#_2-3-更新多列","children":[]},{"level":3,"title":"2.4 更新选定的字段","slug":"_2-4-更新选定的字段","link":"#_2-4-更新选定的字段","children":[]},{"level":3,"title":"2.5 表达式","slug":"_2-5-表达式","link":"#_2-5-表达式","children":[]},{"level":3,"title":"2.6 子查询更新","slug":"_2-6-子查询更新","link":"#_2-6-子查询更新","children":[]}]},{"level":2,"title":"3. 删除数据","slug":"_3-删除数据","link":"#_3-删除数据","children":[]},{"level":2,"title":"4. 查询数据","slug":"_4-查询数据","link":"#_4-查询数据","children":[{"level":3,"title":"4.1 查询函数","slug":"_4-1-查询函数","link":"#_4-1-查询函数","children":[]},{"level":3,"title":"4.2 where","slug":"_4-2-where","link":"#_4-2-where","children":[]},{"level":3,"title":"4.3 select","slug":"_4-3-select","link":"#_4-3-select","children":[]},{"level":3,"title":"4.4 order","slug":"_4-4-order","link":"#_4-4-order","children":[]},{"level":3,"title":"4.5 分页","slug":"_4-5-分页","link":"#_4-5-分页","children":[]},{"level":3,"title":"4.6 count","slug":"_4-6-count","link":"#_4-6-count","children":[]},{"level":3,"title":"4.7 分组","slug":"_4-7-分组","link":"#_4-7-分组","children":[]},{"level":3,"title":"4.8 直接执行sql语句","slug":"_4-8-直接执行sql语句","link":"#_4-8-直接执行sql语句","children":[]}]}],"git":{"createdTime":1712590397000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1308},"filePathRelative":"golang/gorm/03.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<h2>1. 插入数据</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>user <span class=\\"token operator\\">:=</span> User<span class=\\"token punctuation\\">{</span>\\n\\tUsername<span class=\\"token punctuation\\">:</span><span class=\\"token string\\">\\"zhangsan\\"</span><span class=\\"token punctuation\\">,</span>\\n\\tPassword<span class=\\"token punctuation\\">:</span><span class=\\"token string\\">\\"123456\\"</span><span class=\\"token punctuation\\">,</span>\\n\\tCreateTime<span class=\\"token punctuation\\">:</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Now</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Unix</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\ndb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Create</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>user<span class=\\"token punctuation\\">)</span>\\n\\nuser<span class=\\"token punctuation\\">.</span>ID             <span class=\\"token comment\\">// 返回插入数据的主键</span>\\nresult<span class=\\"token punctuation\\">.</span>Error        <span class=\\"token comment\\">// 返回 error</span>\\nresult<span class=\\"token punctuation\\">.</span>RowsAffected <span class=\\"token comment\\">// 返回插入记录的条数</span>\\n</code></pre></div>"}');export{r as comp,k as data};
