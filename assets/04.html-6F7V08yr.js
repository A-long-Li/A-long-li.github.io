import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-COH3GpKD.js";const e={},p=t(`<h1 id="事务和hook" tabindex="-1"><a class="header-anchor" href="#事务和hook"><span>事务和Hook</span></a></h1><h2 id="_1-会话session" tabindex="-1"><a class="header-anchor" href="#_1-会话session"><span>1. 会话Session</span></a></h2><p>为了避免共用db导致的一些问题，gorm提供了会话模式，通过新建session的形式，将db的操作分离，互不影响。</p><p>创建session的时候，有一些配置：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Session 配置</span>
<span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  DryRun                   <span class="token builtin">bool</span>   <span class="token comment">//生成 SQL 但不执行</span>
  PrepareStmt              <span class="token builtin">bool</span>   <span class="token comment">//预编译模式</span>
  NewDB                    <span class="token builtin">bool</span>  <span class="token comment">//新db 不带之前的条件</span>
  Initialized              <span class="token builtin">bool</span>  <span class="token comment">//初始化新的db</span>
  SkipHooks                <span class="token builtin">bool</span>  <span class="token comment">//跳过钩子</span>
  SkipDefaultTransaction   <span class="token builtin">bool</span>  <span class="token comment">//禁用默认事务</span>
  DisableNestedTransaction <span class="token builtin">bool</span>  <span class="token comment">//禁用嵌套事务</span>
  AllowGlobalUpdate        <span class="token builtin">bool</span>  <span class="token comment">//允许不带条件的更新</span>
  FullSaveAssociations     <span class="token builtin">bool</span>  <span class="token comment">//允许更新关联数据</span>
  QueryFields              <span class="token builtin">bool</span>  <span class="token comment">//select（字段）</span>
  Context                  context<span class="token punctuation">.</span>Context
  Logger                   logger<span class="token punctuation">.</span>Interface
  NowFunc                  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time <span class="token comment">//允许改变 GORM 获取当前时间的实现</span>
  CreateBatchSize          <span class="token builtin">int</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如说可以禁用默认的事务，从而提供性能，官方说大致能提升30%左右：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 持续会话模式</span>
tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>SkipDefaultTransaction<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如使用<code>PreparedStmt</code> 在执行任何 SQL 时都会创建一个 prepared statement 并将其缓存，以提高后续的效率</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 会话模式</span>
tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>PrepareStmt<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

<span class="token comment">// returns prepared statements manager</span>
stmtManger<span class="token punctuation">,</span> ok <span class="token operator">:=</span> tx<span class="token punctuation">.</span>ConnPool<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>PreparedStmtDB<span class="token punctuation">)</span>

<span class="token comment">// 关闭 *当前会话* 的预编译模式</span>
stmtManger<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 为 *当前会话* 预编译 SQL</span>
stmtManger<span class="token punctuation">.</span>PreparedSQL <span class="token comment">// =&gt; []string{}</span>

<span class="token comment">// 为当前数据库连接池的（所有会话）开启预编译模式</span>
stmtManger<span class="token punctuation">.</span>Stmts <span class="token comment">// map[string]*sql.Stmt</span>

<span class="token keyword">for</span> sql<span class="token punctuation">,</span> stmt <span class="token operator">:=</span> <span class="token keyword">range</span> stmtManger<span class="token punctuation">.</span>Stmts <span class="token punctuation">{</span>
  sql  <span class="token comment">// 预编译 SQL</span>
  stmt <span class="token comment">// 预编译模式</span>
  stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭预编译模式</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有，gorm的db默认是协程安全的，如果使用初始化参数，则db不在协程安全：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Session<span class="token punctuation">{</span>Initialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如context：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>timeoutCtx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>Context<span class="token punctuation">:</span> timeoutCtx<span class="token punctuation">}</span><span class="token punctuation">)</span>

tx<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span class="token comment">// 带有 context timeoutCtx 的查询操作</span>
tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 带有 context timeoutCtx 的更新操作</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-事务" tabindex="-1"><a class="header-anchor" href="#_2-事务"><span>2. 事务</span></a></h2><h3 id="_2-1-自动事务" tabindex="-1"><a class="header-anchor" href="#_2-1-自动事务"><span>2.1 自动事务</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#39;tx&#39; 而不是 &#39;db&#39;）</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Giraffe&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回任何错误都会回滚事务</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Lion&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回 nil 提交事务</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-嵌套事务" tabindex="-1"><a class="header-anchor" href="#_2-2-嵌套事务"><span>2.2 嵌套事务</span></a></h3><p>GORM 支持嵌套事务，您可以回滚较大事务内执行的一部分操作，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user1<span class="token punctuation">)</span>

  tx<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx2 <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    tx2<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rollback user2&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Rollback user2</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  tx<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx2 <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    tx2<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user3<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Commit user1, user3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-手动事务" tabindex="-1"><a class="header-anchor" href="#_2-3-手动事务"><span>2.3 手动事务</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 开始事务</span>
tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#39;tx&#39; 而不是 &#39;db&#39;）</span>
tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// ...</span>

<span class="token comment">// 遇到错误时回滚事务</span>
tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 否则，提交事务</span>
tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 开启事务</span>
tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//在事务中执行数据库操作，使用的是tx变量，不是db。</span>
<span class="token comment">//库存减一</span>
<span class="token comment">//等价于: UPDATE \`goods\` SET \`stock\` = stock - 1  WHERE \`goods\`.\`id\` = &#39;2&#39; and stock &gt; 0</span>
<span class="token comment">//RowsAffected用于返回sql执行后影响的行数</span>
rowsAffected <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;stock &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">,</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;stock - 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>RowsAffected
<span class="token keyword">if</span> rowsAffected <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果更新库存操作，返回影响行数为0，说明没有库存了，结束下单流程</span>
    <span class="token comment">//这里回滚作用不大，因为前面没成功执行什么数据库更新操作，也没什么数据需要回滚。</span>
    <span class="token comment">//这里就是举个例子，事务中可以执行多个sql语句，错误了可以回滚事务</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>保存订单<span class="token punctuation">)</span><span class="token punctuation">.</span>Error

<span class="token comment">//保存订单失败，则回滚事务</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-保存点" tabindex="-1"><a class="header-anchor" href="#_2-4-保存点"><span>2.4 保存点</span></a></h3><p>GORM 提供了 <code>SavePoint</code>、<code>Rollbackto</code> 方法，来提供保存点以及回滚至保存点功能，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user1<span class="token punctuation">)</span>

tx<span class="token punctuation">.</span><span class="token function">SavePoint</span><span class="token punctuation">(</span><span class="token string">&quot;sp1&quot;</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span>
tx<span class="token punctuation">.</span><span class="token function">RollbackTo</span><span class="token punctuation">(</span><span class="token string">&quot;sp1&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Rollback user2</span>

tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Commit user1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-hook" tabindex="-1"><a class="header-anchor" href="#_3-hook"><span>3. Hook</span></a></h2><p>Hook 是在创建、查询、更新、删除等操作之前、之后调用的函数。</p><p>如果您已经为模型定义了指定的方法，它会在创建、更新、查询、删除时自动被调用。如果任何回调返回错误，GORM 将停止后续的操作并回滚事务。</p><p>钩子方法的函数签名应该是 <code>func(*gorm.DB) error</code></p><h3 id="_3-1-创建" tabindex="-1"><a class="header-anchor" href="#_3-1-创建"><span>3.1 创建</span></a></h3><p>创建时可用的 hook</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 开始事务</span>
BeforeSave
BeforeCreate
<span class="token comment">// 关联前的 save</span>
<span class="token comment">// 插入记录至 db</span>
<span class="token comment">// 关联后的 save</span>
AfterCreate
AfterSave
<span class="token comment">// 提交或回滚事务</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">BeforeCreate</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  u<span class="token punctuation">.</span>UUID <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t save invalid data&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AfterCreate</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> u<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 GORM 中保存、删除操作会默认运行在事务上， 因此在事务完成之前该事务中所作的更改是不可见的，如果您的钩子返回了任何错误，则修改将被回滚。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AfterCreate</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rollback invalid user&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-更新" tabindex="-1"><a class="header-anchor" href="#_3-2-更新"><span>3.2 更新</span></a></h3><p>更新时可用的 hook</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 开始事务</span>
BeforeSave
BeforeUpdate
<span class="token comment">// 关联前的 save</span>
<span class="token comment">// 更新 db</span>
<span class="token comment">// 关联后的 save</span>
AfterUpdate
AfterSave
<span class="token comment">// 提交或回滚事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">BeforeUpdate</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> u<span class="token punctuation">.</span><span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;read only user&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在同一个事务中更新数据</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AfterUpdate</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> u<span class="token punctuation">.</span>Confirmed <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;user_id = ?&quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;verfied&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-删除" tabindex="-1"><a class="header-anchor" href="#_3-3-删除"><span>3.3 删除</span></a></h3><p>删除时可用的 hook</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 开始事务</span>
BeforeDelete
<span class="token comment">// 删除 db 中的数据</span>
AfterDelete
<span class="token comment">// 提交或回滚事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 在同一个事务中更新数据</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AfterDelete</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> u<span class="token punctuation">.</span>Confirmed <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;user_id = ?&quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-查询" tabindex="-1"><a class="header-anchor" href="#_3-4-查询"><span>3.4 查询</span></a></h3><p>查询时可用的 hook</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 从 db 中加载数据</span>
<span class="token comment">// Preloading (eager loading)</span>
AfterFind
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AfterFind</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> u<span class="token punctuation">.</span>MemberShip <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
    u<span class="token punctuation">.</span>MemberShip <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","04.html.vue"]]),k=JSON.parse('{"path":"/golang/gorm/04.html","title":"事务和Hook","lang":"zh-CN","frontmatter":{"title":"事务和Hook","icon":"fab fa-golang","category":"golang","order":4,"tag":["gorm","golang"],"description":"事务和Hook 1. 会话Session 为了避免共用db导致的一些问题，gorm提供了会话模式，通过新建session的形式，将db的操作分离，互不影响。 创建session的时候，有一些配置： 比如说可以禁用默认的事务，从而提供性能，官方说大致能提升30%左右： 比如使用PreparedStmt 在执行任何 SQL 时都会创建一个 prepared...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gorm/04.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"事务和Hook"}],["meta",{"property":"og:description","content":"事务和Hook 1. 会话Session 为了避免共用db导致的一些问题，gorm提供了会话模式，通过新建session的形式，将db的操作分离，互不影响。 创建session的时候，有一些配置： 比如说可以禁用默认的事务，从而提供性能，官方说大致能提升30%左右： 比如使用PreparedStmt 在执行任何 SQL 时都会创建一个 prepared..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gorm"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务和Hook\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. 会话Session","slug":"_1-会话session","link":"#_1-会话session","children":[]},{"level":2,"title":"2. 事务","slug":"_2-事务","link":"#_2-事务","children":[{"level":3,"title":"2.1 自动事务","slug":"_2-1-自动事务","link":"#_2-1-自动事务","children":[]},{"level":3,"title":"2.2 嵌套事务","slug":"_2-2-嵌套事务","link":"#_2-2-嵌套事务","children":[]},{"level":3,"title":"2.3 手动事务","slug":"_2-3-手动事务","link":"#_2-3-手动事务","children":[]},{"level":3,"title":"2.4 保存点","slug":"_2-4-保存点","link":"#_2-4-保存点","children":[]}]},{"level":2,"title":"3. Hook","slug":"_3-hook","link":"#_3-hook","children":[{"level":3,"title":"3.1 创建","slug":"_3-1-创建","link":"#_3-1-创建","children":[]},{"level":3,"title":"3.2 更新","slug":"_3-2-更新","link":"#_3-2-更新","children":[]},{"level":3,"title":"3.3 删除","slug":"_3-3-删除","link":"#_3-3-删除","children":[]},{"level":3,"title":"3.4 查询","slug":"_3-4-查询","link":"#_3-4-查询","children":[]}]}],"git":{"createdTime":1712590397000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":1}]},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"golang/gorm/04.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<h2>1. 会话Session</h2>\\n<p>为了避免共用db导致的一些问题，gorm提供了会话模式，通过新建session的形式，将db的操作分离，互不影响。</p>\\n<p>创建session的时候，有一些配置：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Session 配置</span>\\n<span class=\\"token keyword\\">type</span> Session <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n  DryRun                   <span class=\\"token builtin\\">bool</span>   <span class=\\"token comment\\">//生成 SQL 但不执行</span>\\n  PrepareStmt              <span class=\\"token builtin\\">bool</span>   <span class=\\"token comment\\">//预编译模式</span>\\n  NewDB                    <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//新db 不带之前的条件</span>\\n  Initialized              <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//初始化新的db</span>\\n  SkipHooks                <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//跳过钩子</span>\\n  SkipDefaultTransaction   <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//禁用默认事务</span>\\n  DisableNestedTransaction <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//禁用嵌套事务</span>\\n  AllowGlobalUpdate        <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//允许不带条件的更新</span>\\n  FullSaveAssociations     <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//允许更新关联数据</span>\\n  QueryFields              <span class=\\"token builtin\\">bool</span>  <span class=\\"token comment\\">//select（字段）</span>\\n  Context                  context<span class=\\"token punctuation\\">.</span>Context\\n  Logger                   logger<span class=\\"token punctuation\\">.</span>Interface\\n  NowFunc                  <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> time<span class=\\"token punctuation\\">.</span>Time <span class=\\"token comment\\">//允许改变 GORM 获取当前时间的实现</span>\\n  CreateBatchSize          <span class=\\"token builtin\\">int</span>  \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{d as comp,k as data};
