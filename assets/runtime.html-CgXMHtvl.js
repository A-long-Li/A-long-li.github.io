import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CI9i1hb1.js";const p={},e=t(`<div class="hint-container info"><p class="hint-container-title">tips</p><p>runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。</p></div><h2 id="_1-环境变量" tabindex="-1"><a class="header-anchor" href="#_1-环境变量"><span>1. 环境变量</span></a></h2><ul><li><p>环境变量<code>GOGC</code>设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。<code>runtime/debug包的SetGCPercent</code>函数允许在运行时修改该百分比。</p></li><li><p>环境变量<code>GODEBUG</code>控制运行时的debug输出。GODEBUG的值是逗号分隔的name=val对。支持的name如下：</p><ul><li><p>allocfreetrace</p><p>设置其为1，会导致每次分配都会记录每一个对象的分配、释放及其堆栈踪迹。</p></li><li><p>efence</p><p>设置其为1，会导致分配器运行模式为：每个对象申请在独立的页和地址，且永不循环利用</p></li><li><p>gctrace</p><p>设置其为1，会导致每次垃圾回收器触发一行日志，包含内存回收的概要信息和暂停的时间。设置其为2，会写入同样的概述，但会重复收集。</p></li><li><p>gcdead</p><p>设置其为1，会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈</p></li><li><p>schedtrace</p><p>设置其为X，会导致调度程序每隔X毫秒输出单行信息到标准错误输出</p></li><li><p>scheddetail</p><p>设置schedtrace为X并设置其为1，会导致调度程序每隔X毫秒输出详细的多行信息，描述调度、进程、线程和go程的状态</p></li></ul></li><li><p>环境变量<code>GOMAXPROCS</code>限制可以同时运行用户层次的go代码的操作系统进程数。没有对代表go代码的、可以在系统调用中阻塞的go程数的限制；那些阻塞的goroutine不与GOMAXPROCS限制冲突。本包的GOMAXPROCS函数可以查询和修改该限制。</p></li><li><p>环境变量<code>GOTRACEBACK</code>控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出。失败的程序默认会打印所有现存go程的堆栈踪迹（省略运行时系统中的函数），然后以状态码2退出。如果GOTRACEBACK为0，会完全忽略所有go程的堆栈踪迹。如果GOTRACEBACK为1，会采用默认行为。如果GOTRACEBACK为2，会打印所有现存go程包括运行时函数的堆栈踪迹。如果GOTRACEBACK为crash，会打印所有现存go程包括运行时函数的堆栈踪迹，并且如果可能会采用操作系统特定的方式崩溃，而不是退出。例如，在Unix系统里，程序会释放SIGABRT信号以触发核心信息转储。</p></li><li><p>环境变量<code>GOARCH</code>、<code>GOOS</code>、<code>GOPATH</code>和<code>GOROOT</code>构成完整的go环境变量集合。它们影响go程序的构建, GOARCH、GOOS和GOROOT在编译时被记录并可用本包的常量和函数获取，但它们不会影响运行时环境</p></li></ul><p>gctrace 每一行打印的日志格式如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>gc <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> @<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>s <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token operator">...</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span> ms clock<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token operator">...</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span> ms cpu<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span> MB<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span> MB goal<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">}</span> P

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个变量的具体定义：</p><ul><li>{0}: gc 运行次数</li><li>{1}: 程序已运行的时间</li><li>{2}: gc 占用的 CPU 百分比</li><li>{3}: 执行时间，包括程序延迟和资源等待</li><li>{4}: 也是执行时间, 一般看这个</li><li>{5}: CPU clock</li><li>{6}: CPU clock</li><li>{7}: GC 启动前的堆内存</li><li>{8}: GC 运行后的堆内存</li><li>{9}: 当前堆内存</li><li>{10}: GC 目标</li><li>{11}: 进程数</li></ul><p>下面是一块存在内存泄露的代码段：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;os&quot;</span>
    <span class="token string">&quot;os/signal&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    sig <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>sig

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>GODEBUG=gctrace=1 go run main.go</code>, 查看运行时的内存情况：</p><p>可以看到程序在运行过程中， 每次 GC，堆内存都在不断增大， 这是一个很明显的内存泄露场景。</p><h2 id="_2-runtime-gosched" tabindex="-1"><a class="header-anchor" href="#_2-runtime-gosched"><span>2. runtime.Gosched</span></a></h2><p>让出CPU时间片，重新等待安排任务</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 让出CPU时间片，重新等带安排任务</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>
 
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
        runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 让出CPU时间片，重新等待安排任务</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-runtime-goexit" tabindex="-1"><a class="header-anchor" href="#_3-runtime-goexit"><span>3. runtime.Goexit</span></a></h2><p>退出当前协程</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;runtime&quot;</span>
    <span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A.defer&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;B.defer&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 结束协程</span>
            runtime<span class="token punctuation">.</span><span class="token function">Goexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;C.defer&quot;</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 主goroutine等待子goroutine结束，主在结束</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-runtime-gomaxprocs" tabindex="-1"><a class="header-anchor" href="#_4-runtime-gomaxprocs"><span>4. runtime.GOMAXPROCS</span></a></h2><p>Go运行时调度器使用<code>runtime.GOMAXPROCS</code>参数来确定需要使用多少个os线程来同时执行go代码, 默认值是机器上的CPU核心数量，例如一个8核心的机器上，调度器会把go代码同时调度到8个os线程上</p><p>go语言中可以通过<code>runtime.GOMAXPROCS()</code>函数来设置当前程序并发时占用的CPU逻辑核心数 go1.5版本之前默认使用的是单核心执行，1.5之后默认使用全部的cpu逻辑核心数</p><p>我们可以通过将任务分配到不同的CPU逻辑核心上，从而实现并行的效果 :</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;runtime&quot;</span>
    <span class="token string">&quot;sync&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
 
<span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token comment">//fmt.Println(&quot;A&quot;, i)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token comment">//fmt.Println(&quot;B&quot;, i)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//runtime.GOMAXPROCS(1)  // 设置go运行时(runtime)的os线程数</span>
    <span class="token comment">// runtime.GOMAXPROCS设置为1os线程数时执行时间要比4os线程数用时更长</span>
    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// 设置go运行时(runtime)的os线程数</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-runtime-numcpu" tabindex="-1"><a class="header-anchor" href="#_5-runtime-numcpu"><span>5. runtime.NumCPU</span></a></h2><p>返回当前系统的 CPU 核数量</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;cpus:&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-runtime-goos" tabindex="-1"><a class="header-anchor" href="#_6-runtime-goos"><span>6. runtime.GOOS</span></a></h2><p>目标操作系统</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;archive:&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span>GOOS<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[e];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","runtime.html.vue"]]),k=JSON.parse('{"path":"/golang/std/runtime.html","title":"Runtime标准库","lang":"zh-CN","frontmatter":{"title":"Runtime标准库","icon":"fab fa-golang","order":2,"category":"golang","tag":["标准库","golang"],"description":"tips runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。 1. 环境变量 环境变量GOGC设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。runti...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/std/runtime.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"Runtime标准库"}],["meta",{"property":"og:description","content":"tips runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。 1. 环境变量 环境变量GOGC设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。runti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-14T04:51:57.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"标准库"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-03-14T04:51:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Runtime标准库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-14T04:51:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. 环境变量","slug":"_1-环境变量","link":"#_1-环境变量","children":[]},{"level":2,"title":"2. runtime.Gosched","slug":"_2-runtime-gosched","link":"#_2-runtime-gosched","children":[]},{"level":2,"title":"3. runtime.Goexit","slug":"_3-runtime-goexit","link":"#_3-runtime-goexit","children":[]},{"level":2,"title":"4. runtime.GOMAXPROCS","slug":"_4-runtime-gomaxprocs","link":"#_4-runtime-gomaxprocs","children":[]},{"level":2,"title":"5. runtime.NumCPU","slug":"_5-runtime-numcpu","link":"#_5-runtime-numcpu","children":[]},{"level":2,"title":"6. runtime.GOOS","slug":"_6-runtime-goos","link":"#_6-runtime-goos","children":[]}],"git":{"createdTime":1710154560000,"updatedTime":1710391917000,"contributors":[{"name":"liyajun","email":"332209078@qq.com","commits":3}]},"readingTime":{"minutes":4.97,"words":1490},"filePathRelative":"golang/std/runtime.md","localizedDate":"2024年3月11日","autoDesc":true,"excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">tips</p>\\n<p>runtime包提供和go运行时环境的互操作，如控制goroutine的函数。它也包括用于reflect包的低层次类型信息。</p>\\n</div>\\n<h2>1. 环境变量</h2>\\n<ul>\\n<li>\\n<p>环境变量<code>GOGC</code>设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。<code>runtime/debug包的SetGCPercent</code>函数允许在运行时修改该百分比。</p>\\n</li>\\n<li>\\n<p>环境变量<code>GODEBUG</code>控制运行时的debug输出。GODEBUG的值是逗号分隔的name=val对。支持的name如下：</p>\\n<ul>\\n<li>\\n<p>allocfreetrace</p>\\n<p>设置其为1，会导致每次分配都会记录每一个对象的分配、释放及其堆栈踪迹。</p>\\n</li>\\n<li>\\n<p>efence</p>\\n<p>设置其为1，会导致分配器运行模式为：每个对象申请在独立的页和地址，且永不循环利用</p>\\n</li>\\n<li>\\n<p>gctrace</p>\\n<p>设置其为1，会导致每次垃圾回收器触发一行日志，包含内存回收的概要信息和暂停的时间。设置其为2，会写入同样的概述，但会重复收集。</p>\\n</li>\\n<li>\\n<p>gcdead</p>\\n<p>设置其为1，会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈</p>\\n</li>\\n<li>\\n<p>schedtrace</p>\\n<p>设置其为X，会导致调度程序每隔X毫秒输出单行信息到标准错误输出</p>\\n</li>\\n<li>\\n<p>scheddetail</p>\\n<p>设置schedtrace为X并设置其为1，会导致调度程序每隔X毫秒输出详细的多行信息，描述调度、进程、线程和go程的状态</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>环境变量<code>GOMAXPROCS</code>限制可以同时运行用户层次的go代码的操作系统进程数。没有对代表go代码的、可以在系统调用中阻塞的go程数的限制；那些阻塞的goroutine不与GOMAXPROCS限制冲突。本包的GOMAXPROCS函数可以查询和修改该限制。</p>\\n</li>\\n<li>\\n<p>环境变量<code>GOTRACEBACK</code>控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出。失败的程序默认会打印所有现存go程的堆栈踪迹（省略运行时系统中的函数），然后以状态码2退出。如果GOTRACEBACK为0，会完全忽略所有go程的堆栈踪迹。如果GOTRACEBACK为1，会采用默认行为。如果GOTRACEBACK为2，会打印所有现存go程包括运行时函数的堆栈踪迹。如果GOTRACEBACK为crash，会打印所有现存go程包括运行时函数的堆栈踪迹，并且如果可能会采用操作系统特定的方式崩溃，而不是退出。例如，在Unix系统里，程序会释放SIGABRT信号以触发核心信息转储。</p>\\n</li>\\n<li>\\n<p>环境变量<code>GOARCH</code>、<code>GOOS</code>、<code>GOPATH</code>和<code>GOROOT</code>构成完整的go环境变量集合。它们影响go程序的构建, GOARCH、GOOS和GOROOT在编译时被记录并可用本包的常量和函数获取，但它们不会影响运行时环境</p>\\n</li>\\n</ul>"}');export{d as comp,k as data};
