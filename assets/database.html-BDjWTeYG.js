import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,o as s,c as r,a as e,d as l,e as a}from"./app-CWz2CPII.js";const d={},t=l("h2",{id:"概述",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#概述"},[l("span",null,"概述")])],-1),p=l("h3",{id:"术语",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#术语"},[l("span",null,"术语")])],-1),c=l("ul",null,[l("li",null,"DBMS 是数据库管理系统的简称。"),l("li",null,"数据库 是长期储存在计算机内、有组织、可共享的大量数据的集合。")],-1),o=l("p",null,"数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。",-1),u=l("ul",null,[l("li",null,"数据库系统 由数据库、DBMS、应用程序和数据库管理员组成。")],-1),b=a('<ul><li>数据模型 是用来对现实世界抽象的工具，用于数据建模，描述数据与数据之间的关系。</li></ul><blockquote><p>由三部分（具体见下方三要素）组成： 数据结构，数据操作，数据完整性约束。</p></blockquote><ul><li>数据库模式 描述了数据库中数据的组织方式和特征。</li></ul><p>对于关系数据库而言，数据库模式由一组关系模式构成。</p><ul><li>数据字典 数据字典是DBMS维护的一系列内部表，用来存放元数据。</li></ul><h3 id="dbms的主要功能" tabindex="-1"><a class="header-anchor" href="#dbms的主要功能"><span>DBMS的主要功能</span></a></h3><ol><li>数据定义。</li><li>数据组织，存储和管理功能。</li><li>数据操纵</li><li>数据事务管理和运行管理</li><li>数据库的建立和维护</li></ol><h3 id="使用数据库进行信息化管理有哪些好处" tabindex="-1"><a class="header-anchor" href="#使用数据库进行信息化管理有哪些好处"><span>使用数据库进行信息化管理有哪些好处？</span></a></h3><ol><li>数据库整体结构化</li><li>数据可以充分共享</li><li>数据具有独立性</li><li>数据标准化</li><li>数据由DBMS统一管理和控制，使得系统能够为数据管理提供更多支持。</li></ol><h3 id="数据模型的三个基本要素是" tabindex="-1"><a class="header-anchor" href="#数据模型的三个基本要素是"><span>数据模型的三个基本要素是</span></a></h3><ol><li>数据结构 描述数据库的对象和对象之间的联系，是对数据的静态描述。关系模型只有关系一种数据结构。</li><li>数据操作 数据库中各种对象允许的操作和操作规则，是对系统的动态描述，定义数据操作的方法有两种：关系代数和关系演算。</li><li>完整性约束 关系模型的完整性约束包括<mark>实体完整性，参照完整性和用户定义的完整性约束。</mark></li></ol><h3 id="数据库系统的三级模式结构" tabindex="-1"><a class="header-anchor" href="#数据库系统的三级模式结构"><span>数据库系统的三级模式结构</span></a></h3><ul><li>外模式 也称为用户模式，是用户或应用程序能够看到和访问的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图。</li><li>概念模式(模式) 是数据库中全体数据的逻辑结构和特性的描述，是所有用户的公共视图。</li><li>内模式 是数据在数据库的内部表示，对数据的索引方式，物理结构和存储方式的描述</li></ul><h3 id="什么是二级映像" tabindex="-1"><a class="header-anchor" href="#什么是二级映像"><span>什么是二级映像</span></a></h3><p>三个模式之间的转换</p><p>外模式/模式映像</p><p>模式/内模式映像</p><h3 id="物理独立性和逻辑独立性" tabindex="-1"><a class="header-anchor" href="#物理独立性和逻辑独立性"><span>物理独立性和逻辑独立性</span></a></h3><ul><li>物理独立性 用户的应用程序与数据库的物理存储结构无关，内模式改变后只需要对模式/内模式映像进行修改，而不用修改应用程序。</li><li>逻辑独立性 用户的应用程序和数据库的逻辑结构无关，当模式改变时只需要改变模式/外模型映像即可。</li></ul><h3 id="dba的主要职责" tabindex="-1"><a class="header-anchor" href="#dba的主要职责"><span>DBA的主要职责</span></a></h3><ul><li>决定数据库中的信息内容和数据的逻辑结构。</li><li>决定数据库的存储结构和存取策略。</li><li>定义数据的安全性要求和完整性约束条件。</li><li>数据库的日常维护。</li></ul><h2 id="关系数据库" tabindex="-1"><a class="header-anchor" href="#关系数据库"><span>关系数据库</span></a></h2><ul><li>关系 一张二维表，表名就是关系名。</li><li>属性 二维表中的列</li><li>元组 二维表中的一行</li><li>关系模式 对关系的描述</li><li>候选码 一个属性集的值可唯一标识一个关系的元素，又不含多余的属性。</li><li>主码 关系模式中候选码中选取的一个作为主码。</li><li>主属性 包含在任意候选码中的属性。</li><li>非主属性 不包含在任意候选码中的属性。</li><li>外键 关系模式R中的属性K是其他关系模式的主键，则称K是R的外键。</li></ul><h3 id="实体完整性与参照完整性的规则" tabindex="-1"><a class="header-anchor" href="#实体完整性与参照完整性的规则"><span>实体完整性与参照完整性的规则</span></a></h3><ul><li>实体完整性 关系中元组在组成主键的属性上不能有空值。</li><li>参照完整性 要么取空值，要么取参照表中某个元组的主码值。</li></ul><h3 id="自然连接和等值连接的异同" tabindex="-1"><a class="header-anchor" href="#自然连接和等值连接的异同"><span>自然连接和等值连接的异同</span></a></h3><p>两个都是常用的连接。自然连接是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉。</p><h3 id="完整性约束的作用" tabindex="-1"><a class="header-anchor" href="#完整性约束的作用"><span>完整性约束的作用</span></a></h3><ul><li>保护数据的一致性和准确性</li><li>提高数据库的安全性和完整性</li></ul><h2 id="sql" tabindex="-1"><a class="header-anchor" href="#sql"><span>SQL</span></a></h2><h3 id="sql的基本特点" tabindex="-1"><a class="header-anchor" href="#sql的基本特点"><span>SQL的基本特点</span></a></h3><ul><li>综合统一</li><li>高度非过程化 只需要支持要做什么，不需要指出怎么做。</li><li>面向集合的操作方式</li><li>语言灵活，功能强大</li></ul><h3 id="sql的基本功能" tabindex="-1"><a class="header-anchor" href="#sql的基本功能"><span>SQL的基本功能</span></a></h3><ul><li>定义模式</li><li>CRUD</li><li>定义视图</li><li>定义完整性约束条件</li><li>授权</li><li>事务</li></ul><h3 id="sql定义语言dd-define-l包括" tabindex="-1"><a class="header-anchor" href="#sql定义语言dd-define-l包括"><span>SQL定义语言DD(Define)L包括</span></a></h3><ul><li>模式，表，视图，域，断言的定义，修改，删除</li><li>授权的定义和回收</li></ul><h3 id="什么是存储过程" tabindex="-1"><a class="header-anchor" href="#什么是存储过程"><span>什么是存储过程</span></a></h3><blockquote><p>一组为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户通过指定存储过程的名字并给出参数(如果需要参数)来执行它。</p></blockquote><ul><li>一个业务同时对多个表进行操作，可以考虑使用存储过程。</li><li>多条件多表联合查询。</li></ul><h3 id="基本表-视图的区别和联系。" tabindex="-1"><a class="header-anchor" href="#基本表-视图的区别和联系。"><span>基本表，视图的区别和联系。</span></a></h3><ul><li>基本表 本身存在的表</li><li>视图 从一个或几个基本表导出的表是一个<mark>虚表</mark>。</li><li>联系 所有视图都是直接或间接的由基本表定义的。</li><li>区别 视图并不存储数据</li></ul><h3 id="视图的优点" tabindex="-1"><a class="header-anchor" href="#视图的优点"><span>视图的优点</span></a></h3><ol><li>简化用户操作。</li><li>可以让用户从多种角度来看同一组数据。</li><li>提供了一定程度的逻辑独立性。</li><li>提高数据的安全性。</li></ol><h3 id="嵌入式sql" tabindex="-1"><a class="header-anchor" href="#嵌入式sql"><span>嵌入式SQL</span></a></h3><blockquote><p>将sql嵌入到变成语言中</p></blockquote><ul><li>SQL只能表达常见的查询，但是不能表达所有的查询。</li><li>一些非数据库操作，如文件操作，网络操作等，不能直接用SQL表达。</li></ul><h3 id="相关子查询和不相关子查询" tabindex="-1"><a class="header-anchor" href="#相关子查询和不相关子查询"><span>相关子查询和不相关子查询</span></a></h3><p>子条件查询不依赖父查询，称为不相关子查询。 子条件查询依赖父查询，称为相关子查询。</p><h3 id="游标" tabindex="-1"><a class="header-anchor" href="#游标"><span>游标</span></a></h3><p>游标是系统为用户开放的缓冲区,用于存放<code>SQL</code>语句的执行结果。 游标通常用于遍历查询结果集，允许应用程序逐行处理查询结果。</p><p>游标的作用包括：</p><ol><li>逐行处理数据：游标允许程序逐行访问查询结果集中的数据，这对于需要逐行处理数据的情况非常有用，比如在编写存储过程或批处理作业时。</li><li>定位和导航：游标提供了定位和导航查询结果集的能力，允许程序员在结果集中移动到特定的行或记录。</li><li>数据检索：通过游标，可以在结果集中检索数据，以便在应用程序中进行处理、分析或展示。</li><li>数据更新：游标还可以用于在结果集中更新、删除或插入数据，允许应用程序对查询结果进行修改。</li></ol><p>游标操作通常比批量操作效率低，且可能会引起性能问题。开发中尽量使用批操作来替代游标</p><h2 id="完整性和安全性" tabindex="-1"><a class="header-anchor" href="#完整性和安全性"><span>完整性和安全性</span></a></h2><h3 id="什么是数据库的完整性-安全性" tabindex="-1"><a class="header-anchor" href="#什么是数据库的完整性-安全性"><span>什么是数据库的完整性？安全性？</span></a></h3><ul><li>完整性 数据库的完整性是指数据的正确性和相容性。</li><li>安全性 保护数据库防止不合法的使用所造成的数据泄露、更改、破坏等。</li></ul><h3 id="维护数据库完整性dbms应该提供哪些支持" tabindex="-1"><a class="header-anchor" href="#维护数据库完整性dbms应该提供哪些支持"><span>维护数据库完整性DBMS应该提供哪些支持？</span></a></h3><ul><li>违约处理</li><li>完整性检查机制</li><li>提供定义完整性约束条件的机制</li></ul><h3 id="实体完整性的定义和违约处理" tabindex="-1"><a class="header-anchor" href="#实体完整性的定义和违约处理"><span>实体完整性的定义和违约处理</span></a></h3><ul><li>定义</li></ul><p>建表的时候使用<code>primary key</code>来定义。 一种是定义为列级约束条件，另外一种是定义为表级约束条件。</p><ul><li>违约处理 当用户进行操作的时候会检查主码值是否唯一或者为空，如果满足条件则拒绝。</li></ul><h3 id="参照完整性的定义和违约处理" tabindex="-1"><a class="header-anchor" href="#参照完整性的定义和违约处理"><span>参照完整性的定义和违约处理</span></a></h3><ul><li>定义 使用<code>foreign key</code>来定义外码，用<code>references</code>来指明这些外码参照哪些表的主码</li><li>违约处理</li></ul><ol><li>拒绝处理</li><li>级联处理</li><li>设置为空值</li><li>设置为缺省值</li></ol><h3 id="用户自定义的完整性" tabindex="-1"><a class="header-anchor" href="#用户自定义的完整性"><span>用户自定义的完整性</span></a></h3><ul><li>断言</li><li>域约束</li><li>属性约束</li><li>关系约束</li></ul><h3 id="触发器的作用-什么时候用触发器-创建触发器的步骤" tabindex="-1"><a class="header-anchor" href="#触发器的作用-什么时候用触发器-创建触发器的步骤"><span>触发器的作用，什么时候用触发器，创建触发器的步骤？</span></a></h3><ul><li>作用 触发器是一种程序模块，是数据库的一种自动处理机制。主要作用是保证数据库的安全性。</li><li>什么时候用触发器</li></ul><blockquote><p>触发器通过事件来激活，实现业务规则或约束，自动化任务。</p></blockquote><ol><li>dml触发器</li><li>ddl触发器</li><li>instead of触发器</li></ol><ul><li>创建触发器的步骤 <ol><li>定义触发器</li><li>触发条件</li><li>声明部分</li><li>主体部分</li></ol></li></ul><h3 id="实现数据库安全性控制的常用方法和技术" tabindex="-1"><a class="header-anchor" href="#实现数据库安全性控制的常用方法和技术"><span>实现数据库安全性控制的常用方法和技术？</span></a></h3><ul><li>用户表示和鉴别 核对用户信息</li><li>多层存取控制 具有权限才能访问</li><li>视图 对不同的用户定义视图。</li><li>审计 建立审计日志。</li><li>数据加密 对于传输的信息进行加密。</li></ul><h3 id="自主存取控制和强制存取控制" tabindex="-1"><a class="header-anchor" href="#自主存取控制和强制存取控制"><span>自主存取控制和强制存取控制</span></a></h3><ul><li>自主存取控制 用户访问的时候检查用户存取权限</li><li>强制存取控制 数据对象被授予密级 ，用户也被赋予相应的许可证。</li></ul><h3 id="强制存取规则" tabindex="-1"><a class="header-anchor" href="#强制存取规则"><span>强制存取规则</span></a></h3><p>主体许可证大于等于客体的密级时才能读取相应的客体。</p><p>主体许可证小于等于客体的密级时才能写相应的客体。</p><h3 id="审计" tabindex="-1"><a class="header-anchor" href="#审计"><span>审计</span></a></h3><p>把用户的所有操作都记录到系统的审计日志中，用来分析。</p><h2 id="关系数据库的设计理论" tabindex="-1"><a class="header-anchor" href="#关系数据库的设计理论"><span>关系数据库的设计理论</span></a></h2><h3 id="为什么范式会出现" tabindex="-1"><a class="header-anchor" href="#为什么范式会出现"><span>为什么范式会出现</span></a></h3><p>在数据库中不合理的设计会导致数据冗余，更新异常，插入异常，删除异常。 范式理论的出现是为了解决不合理的数据依赖，使数据库设计规范化。</p><h3 id="解释范式" tabindex="-1"><a class="header-anchor" href="#解释范式"><span>解释范式</span></a></h3><ol><li>1NF 每一列都是不可分割的数据项。</li><li>2NF 在1NF的基础上，非码属性必须完全依赖于候选码。</li><li>3NF 在2NF的基础上，属性不能简介依赖主属性(传递依赖)。（消除传递依赖）</li><li>BCNF 在1NF的基础上，所有的函数依赖，比如x-&gt;y,决定因素x中都是候选码。</li><li>4NF 关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。</li></ol><ul><li>1NF到2NF消除了非码属性对部分函数的依赖。</li><li>2NF到3NF消除了非主属性对码的传递函数依赖。</li><li>3NF到4NF消除了主属性对码的部分函数依赖和传递函数依赖。</li><li>BCNF到4NF消除了非平凡且非函数依赖的多值依赖。</li></ul>',87),f=a('<h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计"><span>数据库设计</span></a></h2><h3 id="数据库设计的基本步骤" tabindex="-1"><a class="header-anchor" href="#数据库设计的基本步骤"><span>数据库设计的基本步骤</span></a></h3><ol><li>需求分析 数据字典</li><li>概念结构设计 E-R图</li><li>逻辑结构设计 将E-R图转化为数据模型。形成模式。同时还能建立数据的外模式。</li><li>物理结构设计 设计索引，物理存储安排，设立内模式。</li><li>数据库实施</li><li>数据库运行和维护</li></ol><h3 id="什么是数据库设计" tabindex="-1"><a class="header-anchor" href="#什么是数据库设计"><span>什么是数据库设计</span></a></h3><p>对于一个给定的应用环境，构造最优的数据库模式，建立数据库及其应用系统，使之能够有效的存储数据，满足各种用户的应用需求。</p><h3 id="数据字典的内容及其作用" tabindex="-1"><a class="header-anchor" href="#数据字典的内容及其作用"><span>数据字典的内容及其作用</span></a></h3><p>数据字典通常包括数据项，数据结构，数据流，数据存储和处理过程。</p><p>数据字典是关于数据库中数据的描述。</p><h3 id="设计概念系统结构" tabindex="-1"><a class="header-anchor" href="#设计概念系统结构"><span>设计概念系统结构</span></a></h3><p>特点：能够真实的反应现实世界，事物与事物之间的联系。易于理解，易于修改。易于向数据模型转化</p><p>设计策略：</p><ul><li>自顶向下 首先定义全局概念结构框架，然后逐步细化。</li><li>自底向上 首先定义局部概念结构框架，然后逐步向上细化。</li><li>逐步扩张 首先定义核心概念结构，然后向外扩充。</li><li>混合策略 结合起来</li></ul><h3 id="逻辑设计阶段主要内容和步骤" tabindex="-1"><a class="header-anchor" href="#逻辑设计阶段主要内容和步骤"><span>逻辑设计阶段主要内容和步骤</span></a></h3><blockquote><p>将概念结构设计阶段设计好的基本E-R图转化为关系数据模型。</p></blockquote><ol><li>将概念结构转化为关系模型</li><li>对数据模型优化</li></ol><h3 id="e-r模式合并时发生的三种冲突" tabindex="-1"><a class="header-anchor" href="#e-r模式合并时发生的三种冲突"><span>E-R模式合并时发生的三种冲突</span></a></h3><ol><li>属性冲突 域范围不相同</li><li>命名冲突</li><li>结构冲突 同一个对象在不同地方有不同的身份</li></ol><h3 id="物理设计的内容和步骤" tabindex="-1"><a class="header-anchor" href="#物理设计的内容和步骤"><span>物理设计的内容和步骤</span></a></h3><ol><li>确定数据库的物理结构</li><li>对所设计的物理结构进行评价</li></ol><h3 id="数据库的运行与维护-从以下几个角度考虑" tabindex="-1"><a class="header-anchor" href="#数据库的运行与维护-从以下几个角度考虑"><span>数据库的运行与维护，从以下几个角度考虑</span></a></h3><ol><li>数据库的转储和恢复。</li><li>数据库的安全性，完整性控制。</li><li>数据库的性能监督，分析和改造。</li><li>数据库的再组织和重改造。</li></ol><h3 id="再组织和重构造" tabindex="-1"><a class="header-anchor" href="#再组织和重构造"><span>再组织和重构造</span></a></h3><p>再组织是按照原设计要求重新安排存储位置，回收垃圾，以提高系统性能。</p><p>重改造是修改数据库的模式和内模式。</p><h2 id="事务和并发控制" tabindex="-1"><a class="header-anchor" href="#事务和并发控制"><span>事务和并发控制</span></a></h2><h3 id="为什么要并发" tabindex="-1"><a class="header-anchor" href="#为什么要并发"><span>为什么要并发</span></a></h3><ol><li>提高吞吐量和资源的利用率。</li><li>减少平均等待事件和平均响应时间。</li></ol><p>并发控制能保证事务的ACID性质，主要是保证事务的隔离性和数据库的一致性。</p><h3 id="事务的定义" tabindex="-1"><a class="header-anchor" href="#事务的定义"><span>事务的定义</span></a></h3><p>事务是用户定义的数据库操作序列，具有原子性，是一个不可分割的执行单元。它确保数据库操作的一致性和完整性，同时也是恢复技术和并发控制的基本构建块。</p><h3 id="事务的四大特性" tabindex="-1"><a class="header-anchor" href="#事务的四大特性"><span>事务的四大特性</span></a></h3><ul><li>原子性 事务中的全部操作是不可分割的。原子性保证了事务的一致性。</li><li>一致性 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。满足完整性约束。</li><li>隔离性 事务的执行不受其他的事务的干扰。</li><li>持久性 对于任意已提交的事务，系统保证该事务对数据库的改变不会丢失，也就是出现故障。</li></ul><h3 id="事务并发执行可能导致哪几类数据不一致-怎么解决" tabindex="-1"><a class="header-anchor" href="#事务并发执行可能导致哪几类数据不一致-怎么解决"><span>事务并发执行可能导致哪几类数据不一致？怎么解决？</span></a></h3><p>事务并发执行可能导致</p><ol><li>丢失修改 <ol><li>两个事务同时修改数据，会有一个被覆盖掉。</li></ol></li><li>读“脏”数据 <ol><li>读未提交，其他事务回滚导致使用的数据不对</li></ol></li><li>不可重复读 <ol><li>一个事务内读到了两个不相同的数据</li></ol></li></ol><p>数据库系统解决这些问题的主要方法是采用封锁技术。</p><ol><li>一级封锁协议可以保证不丢失修改</li><li>二级封锁协议可以保证不读“脏”数据</li><li>三级封锁协议可以保证可重复读</li></ol><h3 id="封锁的定义" tabindex="-1"><a class="header-anchor" href="#封锁的定义"><span>封锁的定义</span></a></h3><p>数据库系统中的封锁是指数据库并发执行过程中，将某个事务的所有操作单元全部锁定的操作。</p><h3 id="封锁的类型" tabindex="-1"><a class="header-anchor" href="#封锁的类型"><span>封锁的类型</span></a></h3><ul><li>排它锁（X锁）</li><li>共享锁（S锁）</li></ul><h3 id="锁的类型" tabindex="-1"><a class="header-anchor" href="#锁的类型"><span>锁的类型</span></a></h3><p>活锁又称为饥饿，是一个事务在等待资源的过程中，被无限期地拒绝资源。使用fifo来避免活锁</p><p>死锁两个或多个事务在执行过程中，因竞争资源而造成的一种阻塞的现象，若无外力作用，它们将无法推进下去。</p><h3 id="死锁的检测和预防" tabindex="-1"><a class="header-anchor" href="#死锁的检测和预防"><span>死锁的检测和预防</span></a></h3><p>检测</p><ol><li>超时法</li><li>设置时间</li><li>超过则死锁</li></ol><p>预防</p><ol><li>一次封锁法</li><li>顺序封锁法 <ol><li>事务按顺序执行</li></ol></li></ol><h3 id="事务的可串行化" tabindex="-1"><a class="header-anchor" href="#事务的可串行化"><span>事务的可串行化</span></a></h3><p>多个事务并发执行，当且仅当结果与某一次顺序串行执行的结果相同。</p><p>可串行化调度是并行调度正确的唯一准则。</p><h3 id="描述两段锁结构" tabindex="-1"><a class="header-anchor" href="#描述两段锁结构"><span>描述两段锁结构</span></a></h3><blockquote><p>第一阶段只加锁，第二段只释放锁。 协议规定</p></blockquote><ol><li>对任何数据读写之前，必须先加锁。</li><li>释放了一个锁之后，事务不能再获取其他的锁。</li></ol><p>两段锁协议可以保证事务的可串行化，是充分条件。</p><h2 id="数据库恢复技术" tabindex="-1"><a class="header-anchor" href="#数据库恢复技术"><span>数据库恢复技术</span></a></h2><h3 id="故障的种类" tabindex="-1"><a class="header-anchor" href="#故障的种类"><span>故障的种类</span></a></h3><ol><li>事务内部的故障</li><li>系统故障</li><li>介质故障</li><li>计算机病毒</li></ol><h3 id="恢复策略" tabindex="-1"><a class="header-anchor" href="#恢复策略"><span>恢复策略</span></a></h3><ol><li>REDO重做 正向扫描日志文件，对每个REDO事务重新执行日志文件的登记操作</li><li>UNDO撤销 逆向扫描日志文件，对每个UNDO事务执行回滚操作</li><li>COMMIT提交 将事务的修改永久保存到数据库中</li><li>ROLLBACK回滚 将事务的修改从数据库中撤销</li></ol><h3 id="故障的种类和恢复方法" tabindex="-1"><a class="header-anchor" href="#故障的种类和恢复方法"><span>故障的种类和恢复方法</span></a></h3><ul><li>事务故障 表示非预期的不正常程序结束所造成的故障。</li></ul><p>反向扫描文件日志，查找该事务的更新操作，并对那些操作进行逆操作，直到事务开始的标志。</p><ul><li>系统故障 表示非预期的系统崩溃或断电所造成的故障。</li></ul><p>正向扫描日志</p><ol><li>未完成的事务，进行UNDO</li><li>提交的事务，进行REDO</li></ol><ul><li>介质故障 表示非预期的存储介质故障所造成的故障。</li></ul><p>装入数据库副本。装入日志文件副本，并执行恢复。</p><h3 id="什么是记录检查点-包含哪些内容" tabindex="-1"><a class="header-anchor" href="#什么是记录检查点-包含哪些内容"><span>什么是记录检查点？包含哪些内容？</span></a></h3><p>检查点是一类新的日志记录，包括建立检查点时刻所有正在执行的事务清单，这些事务的最新一个日志记录地址</p><h3 id="数据库转储" tabindex="-1"><a class="header-anchor" href="#数据库转储"><span>数据库转储</span></a></h3><ul><li>按照系统状态分类 <ol><li>静态转储 停止数据库服务，将数据库的当前状态保存到磁盘上</li><li>动态转储 运行事务并转储，但要在转储期间记录数据活动的日志。恢复时通过日志和副本共同恢复</li></ol></li><li>转储量分类 <ol><li>海量转储 一次转储所有的数据</li><li>增量转储 只转储更新过的数据</li></ol></li></ul><h3 id="为什么要先登记日志文件-后写数据库" tabindex="-1"><a class="header-anchor" href="#为什么要先登记日志文件-后写数据库"><span>为什么要先登记日志文件，后写数据库？</span></a></h3><p>如果先写了数据库修改，在日志中没有记录，这样就没有办法恢复这个修改了。</p><p>如果先写了日志，但是没有修改数据库，这样在恢复时只不过多执行一次undo操作，并不会影响数据库的正确性。</p><h3 id="使用日志的数据库恢复技术" tabindex="-1"><a class="header-anchor" href="#使用日志的数据库恢复技术"><span>使用日志的数据库恢复技术</span></a></h3><ul><li>推迟更新技术 每个数据到达提交点之前不能更新数据库； 一个事务的所有更新操作对应的日志记录写入存储器之前，该事务无法到达提交点。</li><li>即时更新技术 所有更新类型的日志安全的存储到存储器之前，事务T不能更新数据库，也无法提交。</li></ul><h3 id="什么是数据库镜像-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是数据库镜像-有什么作用"><span>什么是数据库镜像？有什么作用？</span></a></h3><p>自动的把数据库中所有或者关键数据复制一份保存在磁盘上</p><p>用于数据库恢复，提高数据库的可用性。</p><h3 id="为什么引入意向锁-含义是什么" tabindex="-1"><a class="header-anchor" href="#为什么引入意向锁-含义是什么"><span>为什么引入意向锁？含义是什么？</span></a></h3><p>引进意向锁是为了提高封锁子系统的效率。</p><p>对任意节点加锁时，都必须先对其上层节点加意向锁。引进意向锁之后，系统对某一数据对象加锁时不必逐个检查锁冲突了。</p><h3 id="is-ix-six锁" tabindex="-1"><a class="header-anchor" href="#is-ix-six锁"><span>IS，IX，SIX锁</span></a></h3><ul><li>IS锁 对一个数据对象加IS锁代表其后裔节点加S锁</li><li>IX锁 对一个数据对象加IX锁代表其后裔节点加X锁</li><li>SIX锁 先加S锁再加IX锁</li></ul><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><h3 id="数据库的锁机制" tabindex="-1"><a class="header-anchor" href="#数据库的锁机制"><span>数据库的锁机制</span></a></h3><ol><li>排他锁 独占</li><li>共享锁 可以和别人共享</li><li>意向锁 指示事务将进行的锁定</li></ol><h3 id="什么是事务-恢复技术能保证事务的那些特性" tabindex="-1"><a class="header-anchor" href="#什么是事务-恢复技术能保证事务的那些特性"><span>什么是事务？恢复技术能保证事务的那些特性</span></a></h3><p>事务是一个不可分割的工作单元。</p><p>恢复技术保证了事务的 原子性和持久性</p><h3 id="什么是索引-优缺点" tabindex="-1"><a class="header-anchor" href="#什么是索引-优缺点"><span>什么是索引？优缺点？</span></a></h3><p>索引是一种数据结构，用于快速查找和访问数据库表中的特定行。</p><ul><li>优点 加快检索速度，优化排序和分组操作，减少磁盘IO</li><li>缺点 占用磁盘空间，降低数据插入更新和删除的速度。</li></ul><h3 id="什么是er图-er图向关系模型的转换规则是什么-er图的设计原则是什么" tabindex="-1"><a class="header-anchor" href="#什么是er图-er图向关系模型的转换规则是什么-er图的设计原则是什么"><span>什么是ER图？ER图向关系模型的转换规则是什么？ER图的设计原则是什么？</span></a></h3><p>ER图是一种用于描述实体之间关系的图形化工具，常用于数据库概念设计阶段。</p><p>实体转化成表，属性转化成字段，联系转化成外键，多对多关系转化成连接表。</p><p>设计原则：简单性，完整性，准确性，一致性，可扩展性。</p><h3 id="并发控制的主要技术" tabindex="-1"><a class="header-anchor" href="#并发控制的主要技术"><span>并发控制的主要技术</span></a></h3><p>锁，时间戳，乐观控制法，多版本并发控制（MVCC）</p><h3 id="delete和drop的区别" tabindex="-1"><a class="header-anchor" href="#delete和drop的区别"><span>delete和drop的区别</span></a></h3><ul><li>delete 是dml命令，可以和where子句一起使用，删除满足条件的记录，会被记录在日志中，可以回滚，不会改变表的结构或索引所占空间</li><li>drop 是ddl命令，不能和其他命令一起使用，删除表的结构和所有数据，不会被记录在日志中，不能回滚，会释放表占用的空间</li></ul><h3 id="orm映射" tabindex="-1"><a class="header-anchor" href="#orm映射"><span>orm映射</span></a></h3><p>对象关系映射，在关系数据库和对象之间建立了一个映射，使得用户可以操纵对象的方式操纵数据库。</p>',105);function k(g,x){const i=h("Mermaid");return s(),r("div",null,[t,p,c,o,u,e(i,{id:"mermaid-28",code:"eJxLy8kvT85ILCpRCHHhKi5NSi9KLMhQyExJNVSIdnEKjuVyjH6+ovvprv6nE2fEKujq2ik4a0Q/3TXl+ZQVEPFYTS6n6GdTNzzrXfd01+Tnuzuer14PlHzWsT0Wu2oMEZAyFw2gbb7BQGlXIMMRYhNCEM4Ci7tFa7gkliQmJRanasZyofDA8u7RIIFYrtS8FC4uADw/WxQ="}),b,e(i,{id:"mermaid-811",code:"eJxLy8kvT85ILCpRCHHhUlBwjFYy9HNTitXVtat5tq3j5cwlL+fOe76g8enGec8alj9dv/Nl84qnHW1P2/c+m7rh+ayWJ/vmvtg6rUbBKVrJCKQPaASMiWLEkx274UYAjQPp3LPgZcMkiEEwU5yjlYyhprhGKzk5oxqDaQayYyBmPJ3Ug81gl2glE6jBMDtQnPd05+an7Quf7JgCYiPpBNrxdMmspw17YAbBncUFAAIdqyw="}),f])}const S=n(d,[["render",k],["__file","database.html.vue"]]),q=JSON.parse('{"path":"/notes/order/database.html","title":"数据库","lang":"zh-CN","frontmatter":{"title":"数据库","icon":"fa-solid fa-database","category":"note","tag":["database"],"description":"概述 术语 DBMS 是数据库管理系统的简称。 数据库 是长期储存在计算机内、有组织、可共享的大量数据的集合。 数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。 数据库系统 由数据库、DBMS、应用程序和数据库管理员组成。 数据模型 是用来对现实世界抽象的工具，用于数据建模，描述数...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/notes/order/database.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"数据库"}],["meta",{"property":"og:description","content":"概述 术语 DBMS 是数据库管理系统的简称。 数据库 是长期储存在计算机内、有组织、可共享的大量数据的集合。 数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。 数据库系统 由数据库、DBMS、应用程序和数据库管理员组成。 数据模型 是用来对现实世界抽象的工具，用于数据建模，描述数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-02T11:33:06.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:modified_time","content":"2024-04-02T11:33:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-02T11:33:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":3,"title":"DBMS的主要功能","slug":"dbms的主要功能","link":"#dbms的主要功能","children":[]},{"level":3,"title":"使用数据库进行信息化管理有哪些好处？","slug":"使用数据库进行信息化管理有哪些好处","link":"#使用数据库进行信息化管理有哪些好处","children":[]},{"level":3,"title":"数据模型的三个基本要素是","slug":"数据模型的三个基本要素是","link":"#数据模型的三个基本要素是","children":[]},{"level":3,"title":"数据库系统的三级模式结构","slug":"数据库系统的三级模式结构","link":"#数据库系统的三级模式结构","children":[]},{"level":3,"title":"什么是二级映像","slug":"什么是二级映像","link":"#什么是二级映像","children":[]},{"level":3,"title":"物理独立性和逻辑独立性","slug":"物理独立性和逻辑独立性","link":"#物理独立性和逻辑独立性","children":[]},{"level":3,"title":"DBA的主要职责","slug":"dba的主要职责","link":"#dba的主要职责","children":[]}]},{"level":2,"title":"关系数据库","slug":"关系数据库","link":"#关系数据库","children":[{"level":3,"title":"实体完整性与参照完整性的规则","slug":"实体完整性与参照完整性的规则","link":"#实体完整性与参照完整性的规则","children":[]},{"level":3,"title":"自然连接和等值连接的异同","slug":"自然连接和等值连接的异同","link":"#自然连接和等值连接的异同","children":[]},{"level":3,"title":"完整性约束的作用","slug":"完整性约束的作用","link":"#完整性约束的作用","children":[]}]},{"level":2,"title":"SQL","slug":"sql","link":"#sql","children":[{"level":3,"title":"SQL的基本特点","slug":"sql的基本特点","link":"#sql的基本特点","children":[]},{"level":3,"title":"SQL的基本功能","slug":"sql的基本功能","link":"#sql的基本功能","children":[]},{"level":3,"title":"SQL定义语言DD(Define)L包括","slug":"sql定义语言dd-define-l包括","link":"#sql定义语言dd-define-l包括","children":[]},{"level":3,"title":"什么是存储过程","slug":"什么是存储过程","link":"#什么是存储过程","children":[]},{"level":3,"title":"基本表，视图的区别和联系。","slug":"基本表-视图的区别和联系。","link":"#基本表-视图的区别和联系。","children":[]},{"level":3,"title":"视图的优点","slug":"视图的优点","link":"#视图的优点","children":[]},{"level":3,"title":"嵌入式SQL","slug":"嵌入式sql","link":"#嵌入式sql","children":[]},{"level":3,"title":"相关子查询和不相关子查询","slug":"相关子查询和不相关子查询","link":"#相关子查询和不相关子查询","children":[]},{"level":3,"title":"游标","slug":"游标","link":"#游标","children":[]}]},{"level":2,"title":"完整性和安全性","slug":"完整性和安全性","link":"#完整性和安全性","children":[{"level":3,"title":"什么是数据库的完整性？安全性？","slug":"什么是数据库的完整性-安全性","link":"#什么是数据库的完整性-安全性","children":[]},{"level":3,"title":"维护数据库完整性DBMS应该提供哪些支持？","slug":"维护数据库完整性dbms应该提供哪些支持","link":"#维护数据库完整性dbms应该提供哪些支持","children":[]},{"level":3,"title":"实体完整性的定义和违约处理","slug":"实体完整性的定义和违约处理","link":"#实体完整性的定义和违约处理","children":[]},{"level":3,"title":"参照完整性的定义和违约处理","slug":"参照完整性的定义和违约处理","link":"#参照完整性的定义和违约处理","children":[]},{"level":3,"title":"用户自定义的完整性","slug":"用户自定义的完整性","link":"#用户自定义的完整性","children":[]},{"level":3,"title":"触发器的作用，什么时候用触发器，创建触发器的步骤？","slug":"触发器的作用-什么时候用触发器-创建触发器的步骤","link":"#触发器的作用-什么时候用触发器-创建触发器的步骤","children":[]},{"level":3,"title":"实现数据库安全性控制的常用方法和技术？","slug":"实现数据库安全性控制的常用方法和技术","link":"#实现数据库安全性控制的常用方法和技术","children":[]},{"level":3,"title":"自主存取控制和强制存取控制","slug":"自主存取控制和强制存取控制","link":"#自主存取控制和强制存取控制","children":[]},{"level":3,"title":"强制存取规则","slug":"强制存取规则","link":"#强制存取规则","children":[]},{"level":3,"title":"审计","slug":"审计","link":"#审计","children":[]}]},{"level":2,"title":"关系数据库的设计理论","slug":"关系数据库的设计理论","link":"#关系数据库的设计理论","children":[{"level":3,"title":"为什么范式会出现","slug":"为什么范式会出现","link":"#为什么范式会出现","children":[]},{"level":3,"title":"解释范式","slug":"解释范式","link":"#解释范式","children":[]}]},{"level":2,"title":"数据库设计","slug":"数据库设计","link":"#数据库设计","children":[{"level":3,"title":"数据库设计的基本步骤","slug":"数据库设计的基本步骤","link":"#数据库设计的基本步骤","children":[]},{"level":3,"title":"什么是数据库设计","slug":"什么是数据库设计","link":"#什么是数据库设计","children":[]},{"level":3,"title":"数据字典的内容及其作用","slug":"数据字典的内容及其作用","link":"#数据字典的内容及其作用","children":[]},{"level":3,"title":"设计概念系统结构","slug":"设计概念系统结构","link":"#设计概念系统结构","children":[]},{"level":3,"title":"逻辑设计阶段主要内容和步骤","slug":"逻辑设计阶段主要内容和步骤","link":"#逻辑设计阶段主要内容和步骤","children":[]},{"level":3,"title":"E-R模式合并时发生的三种冲突","slug":"e-r模式合并时发生的三种冲突","link":"#e-r模式合并时发生的三种冲突","children":[]},{"level":3,"title":"物理设计的内容和步骤","slug":"物理设计的内容和步骤","link":"#物理设计的内容和步骤","children":[]},{"level":3,"title":"数据库的运行与维护，从以下几个角度考虑","slug":"数据库的运行与维护-从以下几个角度考虑","link":"#数据库的运行与维护-从以下几个角度考虑","children":[]},{"level":3,"title":"再组织和重构造","slug":"再组织和重构造","link":"#再组织和重构造","children":[]}]},{"level":2,"title":"事务和并发控制","slug":"事务和并发控制","link":"#事务和并发控制","children":[{"level":3,"title":"为什么要并发","slug":"为什么要并发","link":"#为什么要并发","children":[]},{"level":3,"title":"事务的定义","slug":"事务的定义","link":"#事务的定义","children":[]},{"level":3,"title":"事务的四大特性","slug":"事务的四大特性","link":"#事务的四大特性","children":[]},{"level":3,"title":"事务并发执行可能导致哪几类数据不一致？怎么解决？","slug":"事务并发执行可能导致哪几类数据不一致-怎么解决","link":"#事务并发执行可能导致哪几类数据不一致-怎么解决","children":[]},{"level":3,"title":"封锁的定义","slug":"封锁的定义","link":"#封锁的定义","children":[]},{"level":3,"title":"封锁的类型","slug":"封锁的类型","link":"#封锁的类型","children":[]},{"level":3,"title":"锁的类型","slug":"锁的类型","link":"#锁的类型","children":[]},{"level":3,"title":"死锁的检测和预防","slug":"死锁的检测和预防","link":"#死锁的检测和预防","children":[]},{"level":3,"title":"事务的可串行化","slug":"事务的可串行化","link":"#事务的可串行化","children":[]},{"level":3,"title":"描述两段锁结构","slug":"描述两段锁结构","link":"#描述两段锁结构","children":[]}]},{"level":2,"title":"数据库恢复技术","slug":"数据库恢复技术","link":"#数据库恢复技术","children":[{"level":3,"title":"故障的种类","slug":"故障的种类","link":"#故障的种类","children":[]},{"level":3,"title":"恢复策略","slug":"恢复策略","link":"#恢复策略","children":[]},{"level":3,"title":"故障的种类和恢复方法","slug":"故障的种类和恢复方法","link":"#故障的种类和恢复方法","children":[]},{"level":3,"title":"什么是记录检查点？包含哪些内容？","slug":"什么是记录检查点-包含哪些内容","link":"#什么是记录检查点-包含哪些内容","children":[]},{"level":3,"title":"数据库转储","slug":"数据库转储","link":"#数据库转储","children":[]},{"level":3,"title":"为什么要先登记日志文件，后写数据库？","slug":"为什么要先登记日志文件-后写数据库","link":"#为什么要先登记日志文件-后写数据库","children":[]},{"level":3,"title":"使用日志的数据库恢复技术","slug":"使用日志的数据库恢复技术","link":"#使用日志的数据库恢复技术","children":[]},{"level":3,"title":"什么是数据库镜像？有什么作用？","slug":"什么是数据库镜像-有什么作用","link":"#什么是数据库镜像-有什么作用","children":[]},{"level":3,"title":"为什么引入意向锁？含义是什么？","slug":"为什么引入意向锁-含义是什么","link":"#为什么引入意向锁-含义是什么","children":[]},{"level":3,"title":"IS，IX，SIX锁","slug":"is-ix-six锁","link":"#is-ix-six锁","children":[]}]},{"level":2,"title":"补充","slug":"补充","link":"#补充","children":[{"level":3,"title":"数据库的锁机制","slug":"数据库的锁机制","link":"#数据库的锁机制","children":[]},{"level":3,"title":"什么是事务？恢复技术能保证事务的那些特性","slug":"什么是事务-恢复技术能保证事务的那些特性","link":"#什么是事务-恢复技术能保证事务的那些特性","children":[]},{"level":3,"title":"什么是索引？优缺点？","slug":"什么是索引-优缺点","link":"#什么是索引-优缺点","children":[]},{"level":3,"title":"什么是ER图？ER图向关系模型的转换规则是什么？ER图的设计原则是什么？","slug":"什么是er图-er图向关系模型的转换规则是什么-er图的设计原则是什么","link":"#什么是er图-er图向关系模型的转换规则是什么-er图的设计原则是什么","children":[]},{"level":3,"title":"并发控制的主要技术","slug":"并发控制的主要技术","link":"#并发控制的主要技术","children":[]},{"level":3,"title":"delete和drop的区别","slug":"delete和drop的区别","link":"#delete和drop的区别","children":[]},{"level":3,"title":"orm映射","slug":"orm映射","link":"#orm映射","children":[]}]}],"git":{"createdTime":1710221104000,"updatedTime":1712057586000,"contributors":[{"name":"liyajun","email":"332209078@qq.com","commits":6},{"name":"zarttic","email":"332209078@qq.com","commits":3}]},"readingTime":{"minutes":19.13,"words":5738},"filePathRelative":"notes/order/database.md","localizedDate":"2024年3月12日","autoDesc":true,"excerpt":"<h2>概述</h2>\\n<h3>术语</h3>\\n<ul>\\n<li>DBMS\\n是数据库管理系统的简称。</li>\\n<li>数据库\\n是长期储存在计算机内、有组织、可共享的大量数据的集合。</li>\\n</ul>\\n<p>数据库中的数据按照一定的数据模型组织，描述和存储，可以被各种用户共享，具有较小的冗余度，较高的数据独立性，并且易于拓展。</p>\\n<ul>\\n<li>数据库系统\\n由数据库、DBMS、应用程序和数据库管理员组成。</li>\\n</ul>\\n<ul>\\n<li>数据模型\\n是用来对现实世界抽象的工具，用于数据建模，描述数据与数据之间的关系。</li>\\n</ul>\\n<blockquote>\\n<p>由三部分（具体见下方三要素）组成：\\n数据结构，数据操作，数据完整性约束。</p>\\n</blockquote>"}');export{S as comp,q as data};
