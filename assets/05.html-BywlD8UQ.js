import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CWz2CPII.js";const p={},e=t(`<h1 id="高级查询" tabindex="-1"><a class="header-anchor" href="#高级查询"><span>高级查询</span></a></h1><h2 id="_1-scope" tabindex="-1"><a class="header-anchor" href="#_1-scope"><span>1. scope</span></a></h2><p>作用域允许你复用通用的逻辑，这种共享逻辑需要定义为类型<code>func(*gorm.DB) *gorm.DB</code>。</p><p>例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Paginate</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
    q <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    page<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      page <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    pageSize<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;page_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> pageSize <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
      pageSize <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">case</span> pageSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
      pageSize <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token punctuation">}</span>

    offset <span class="token operator">:=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Scopes</span><span class="token punctuation">(</span><span class="token function">Paginate</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Scopes</span><span class="token punctuation">(</span><span class="token function">Paginate</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>articles<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-智能选择字段" tabindex="-1"><a class="header-anchor" href="#_2-智能选择字段"><span>2. 智能选择字段</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID     <span class="token builtin">uint</span>
  Name   <span class="token builtin">string</span>
  Age    <span class="token builtin">int</span>
  Gender <span class="token builtin">string</span>
  <span class="token comment">// 假设后面还有几百个字段...</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> APIUser <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">uint</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查询时会自动选择 \`id\`, \`name\` 字段</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>APIUser<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT \`id\`, \`name\` FROM \`users\` LIMIT 10</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-子查询" tabindex="-1"><a class="header-anchor" href="#_3-子查询"><span>3. 子查询</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;amount &gt; (?)&quot;</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;AVG(amount)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>orders<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM &quot;orders&quot; WHERE amount &gt; (SELECT AVG(amount) FROM &quot;orders&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>from子查询</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;(?) as u&quot;</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;age = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM (SELECT \`name\`,\`age\` FROM \`users\`) as u WHERE \`age\` = 18</span>

subQuery1 <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
subQuery2 <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Pet<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;(?) as u, (?) as p&quot;</span><span class="token punctuation">,</span> subQuery1<span class="token punctuation">,</span> subQuery2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-关联操作" tabindex="-1"><a class="header-anchor" href="#_4-关联操作"><span>4. 关联操作</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>gorm<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>user_profiles<span class="token punctuation">\`</span></span>  <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>sex<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如有一个用户属性表，查询用户的时候需要将其的性别和年龄查询出来：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> UserProfile <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID     <span class="token builtin">int64</span>
	UserId <span class="token builtin">int64</span>
	Sex    <span class="token builtin">int</span>
	Age    <span class="token builtin">int</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u UserProfile<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;user_profiles&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID          <span class="token builtin">int64</span>
	Username    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;column:username&quot;\`</span>
	Password    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;column:password&quot;\`</span>
	CreateTime  <span class="token builtin">int64</span>  <span class="token string">\`gorm:&quot;column:createtime&quot;\`</span>
	UserProfile UserProfile
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存User</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user <span class="token operator">=</span> User<span class="token punctuation">{</span>
		Username<span class="token punctuation">:</span>   <span class="token string">&quot;ms&quot;</span><span class="token punctuation">,</span>
		Password<span class="token punctuation">:</span>   <span class="token string">&quot;ms&quot;</span><span class="token punctuation">,</span>
		CreateTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		UserProfile<span class="token punctuation">:</span> UserProfile<span class="token punctuation">{</span>
			Sex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	DB<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会产生两条sql，users表和user_profiles表都有数据</p><blockquote><p>这是因为默认的外键是结构体名字+下划线+id，即UserId或者表字段是user_id</p></blockquote><p>如果将user_profiles表中的user_id改为other_id就会失败。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID          <span class="token builtin">int64</span>
	Username    <span class="token builtin">string</span>      <span class="token string">\`gorm:&quot;column:username&quot;\`</span>
	Password    <span class="token builtin">string</span>      <span class="token string">\`gorm:&quot;column:password&quot;\`</span>
	CreateTime  <span class="token builtin">int64</span>       <span class="token string">\`gorm:&quot;column:createtime&quot;\`</span>
	UserProfile UserProfile <span class="token string">\`gorm:&quot;foreignKey:OtherId&quot;\`</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要给UserProfile添加上相应的tag即可。</p><p><strong>关联标签</strong></p><table><thead><tr><th style="text-align:left;">标签</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">foreignKey</td><td style="text-align:left;">指定当前模型的列作为连接表的外键</td></tr><tr><td style="text-align:left;">references</td><td style="text-align:left;">指定引用表的列名，其将被映射为连接表外键</td></tr><tr><td style="text-align:left;">polymorphic</td><td style="text-align:left;">指定多态类型，比如模型名</td></tr><tr><td style="text-align:left;">polymorphicValue</td><td style="text-align:left;">指定多态值、默认表名</td></tr><tr><td style="text-align:left;">many2many</td><td style="text-align:left;">指定连接表表名</td></tr><tr><td style="text-align:left;">joinForeignKey</td><td style="text-align:left;">指定连接表的外键列名，其将被映射到当前表</td></tr><tr><td style="text-align:left;">joinReferences</td><td style="text-align:left;">指定连接表的外键列名，其将被映射到引用表</td></tr><tr><td style="text-align:left;">constraint</td><td style="text-align:left;">关系约束，例如：<code>OnUpdate</code>、<code>OnDelete</code></td></tr></tbody></table><h3 id="_4-1-查询" tabindex="-1"><a class="header-anchor" href="#_4-1-查询"><span>4.1 查询</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
	err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;UserProfile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Preload预加载，直接加载关联关系</p><p>也可以使用joins进行加载关联数据：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>    <span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
	err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">&quot;UserProfile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从sql中能看的出来，使用了left join。</p><p>如果不想要User的数据，只想要关联表的数据，可以这么做：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>   <span class="token keyword">var</span> user User
	DB<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id=?&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
	<span class="token keyword">var</span> userProfile UserProfile
	err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;UserProfile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userProfile<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>userProfile<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","05.html.vue"]]),d=JSON.parse('{"path":"/golang/gorm/05.html","title":"高级查询","lang":"zh-CN","frontmatter":{"title":"高级查询","icon":"fab fa-golang","category":"golang","order":5,"tag":["gorm","golang"],"description":"高级查询 1. scope 作用域允许你复用通用的逻辑，这种共享逻辑需要定义为类型func(*gorm.DB) *gorm.DB。 例子： 2. 智能选择字段 3. 子查询 from子查询 4. 关联操作 比如有一个用户属性表，查询用户的时候需要将其的性别和年龄查询出来： 保存User 会产生两条sql，users表和user_profiles表都有数...","head":[["meta",{"property":"og:url","content":"https://zarttic.github.io/golang/gorm/05.html"}],["meta",{"property":"og:site_name","content":"文档库"}],["meta",{"property":"og:title","content":"高级查询"}],["meta",{"property":"og:description","content":"高级查询 1. scope 作用域允许你复用通用的逻辑，这种共享逻辑需要定义为类型func(*gorm.DB) *gorm.DB。 例子： 2. 智能选择字段 3. 子查询 from子查询 4. 关联操作 比如有一个用户属性表，查询用户的时候需要将其的性别和年龄查询出来： 保存User 会产生两条sql，users表和user_profiles表都有数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T15:33:17.000Z"}],["meta",{"property":"article:author","content":"zarttic"}],["meta",{"property":"article:tag","content":"gorm"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:modified_time","content":"2024-04-08T15:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级查询\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T15:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zarttic\\",\\"url\\":\\"https://github.com/zarttic\\"}]}"]]},"headers":[{"level":2,"title":"1. scope","slug":"_1-scope","link":"#_1-scope","children":[]},{"level":2,"title":"2. 智能选择字段","slug":"_2-智能选择字段","link":"#_2-智能选择字段","children":[]},{"level":2,"title":"3. 子查询","slug":"_3-子查询","link":"#_3-子查询","children":[]},{"level":2,"title":"4. 关联操作","slug":"_4-关联操作","link":"#_4-关联操作","children":[{"level":3,"title":"4.1 查询","slug":"_4-1-查询","link":"#_4-1-查询","children":[]}]}],"git":{"createdTime":1712590397000,"updatedTime":1712590397000,"contributors":[{"name":"zarttic","email":"332209078@qq.com","commits":1}]},"readingTime":{"minutes":2.44,"words":732},"filePathRelative":"golang/gorm/05.md","localizedDate":"2024年4月8日","autoDesc":true,"excerpt":"\\n<h2>1. scope</h2>\\n<p>作用域允许你复用通用的逻辑，这种共享逻辑需要定义为类型<code>func(*gorm.DB) *gorm.DB</code>。</p>\\n<p>例子：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">Paginate</span><span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">*</span>http<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span>db <span class=\\"token operator\\">*</span>gorm<span class=\\"token punctuation\\">.</span>DB<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>gorm<span class=\\"token punctuation\\">.</span>DB <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>db <span class=\\"token operator\\">*</span>gorm<span class=\\"token punctuation\\">.</span>DB<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>gorm<span class=\\"token punctuation\\">.</span>DB <span class=\\"token punctuation\\">{</span>\\n    q <span class=\\"token operator\\">:=</span> r<span class=\\"token punctuation\\">.</span>URL<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Query</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    page<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">_</span> <span class=\\"token operator\\">:=</span> strconv<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Atoi</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"page\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> page <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n      page <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    pageSize<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">_</span> <span class=\\"token operator\\">:=</span> strconv<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Atoi</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"page_size\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> pageSize <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">:</span>\\n      pageSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span>\\n    <span class=\\"token keyword\\">case</span> pageSize <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n      pageSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    offset <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">(</span>page <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> pageSize\\n    <span class=\\"token keyword\\">return</span> db<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Offset</span><span class=\\"token punctuation\\">(</span>offset<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Limit</span><span class=\\"token punctuation\\">(</span>pageSize<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ndb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Scopes</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Paginate</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Find</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>users<span class=\\"token punctuation\\">)</span>\\ndb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Scopes</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Paginate</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Find</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>articles<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>"}');export{k as comp,d as data};
